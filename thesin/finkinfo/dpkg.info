Package: dpkg
Version: 1.16.3
Revision: 1
GCC: 4.0
BuildDepends: fink (>= 0.24.12), libgettext8-dev, gettext-tools, pkgconfig, flex, po4a, bzip2-dev, libncursesw5, io-string-pm, timedate-pm5123
Conflicts: dpkg-bootstrap
Replaces: dpkg-bootstrap
Depends: libgettext8-shlibs, libiconv (>= 1.11-1), gzip, tar, libncurses5-shlibs (>= 5.4-20041023-1006), install-info (>= 1.15.5.6-13)
Essential: yes
Maintainer: Fink Core Group <fink-core@lists.sourceforge.net>

Source: mirror:debian:/pool/main/d/%n/%n_%v.tar.bz2
SourceDirectory: dpkg-%v
Source-MD5: 20189e2926ada3dda4f77ef2e36999af

PatchFile: %n.patch
PatchFile-MD5: de4b5d71611e80db849e60414fe16061

PatchScript: <<
sed -e 's,@FINKPREFIX@,%p,g' %{PatchFile} | patch -p1

# Make sure all scripts have use lib %p/lib/perl5 to find the modules it needs
perl -pi -e 's,^(\#\!/usr/bin/perl .*)$,$1\nuse lib "%p/lib/perl5";,' %b/scripts/*.pl

# fix paths
for i in %b/po/*.po %b/po/*.pot %b/doc/triggers.txt %b/man/*.[13578] %b/man/*/*.[13578]; do \
  perl -pi -e 's,/usr,%p,g' $i; \
  perl -pi -e 's,/var,%p/var,g' $i; \
  perl -pi -e 's,/etc,%p/etc,g' $i; \
  perl -pi -e 's,amd64,x86_64,g' $i; \
done 

# Fink uses "x86_64" instead of "amd64"
perl -pi -e 's|amd64|x86_64|g' *table debian/archtable lib/dpkg/test/t-arch.c scripts/t/200_Dpkg_Shlibs/basictags.symbols scripts/t/200_Dpkg_Shlibs.t
<<

SetCFLAGS: -I%p/include -F/System/Library/Frameworks/CoreFoundation.framework -Wall -Wextra -Wno-unused-parameter -Wno-missing-field-initializers
SetLDFLAGS: -framework CoreFoundation

ConfigureParams: --without-start-stop-daemon --with-admindir=%p/var/lib/dpkg --mandir=%p/share/man --infodir=%p/share/info --sysconfdir=%p/etc --localstatedir=%p/var --with-zlib --with-bz2 --srcdir=%b

CompileScript: <<
PERL5LIB=%p/lib/perl5 PERL=/usr/bin/perl ./configure --build=%m-apple-darwin %c
/usr/bin/make
<<

InfoTest: <<
  TestConfigureParams: --disable-silent-rules
  TestScript: make check || exit 2
<<

InstallScript: <<
install -d -m 0755 %i/share/doc/dpkg

/usr/bin/make install DESTDIR=%d

install -f -m 0755 %i/etc/dpkg/origins
install -c -p -m 644 origin.fink %i/etc/dpkg/origins/fink
rm -rf %i/lib/dpkg/methods/*

mv %i/sbin/install-info %i/bin/ginstall-info
install -m 0755 fink/install-info.sh %i/bin/install-info
install -m 0755 fink/md5sum %i/bin
install -m 0755 fink/update-info-dir %i/sbin
install -m 0644 fink/update-info-dir.8 %i/share/man/man8

# some files that were previously installed in sbin are now in bin
# but some stuff still expects it in sbin
ln -s %p/bin/install-info %i/sbin/install-info
ln -s %p/bin/dpkg-divert %i/sbin/dpkg-divert
ln -s %p/bin/dpkg-statoverride %i/sbin/dpkg-statoverride
ln -s %p/bin/update-alternatives %i/sbin/update-alternatives

# and move the Perl libraries, 'cause they are consistently installed in the
# wrong place whatever PERL_LIBDIR is
# mkdir -p %i/lib/perl5
# mv %d/Network/Library/Perl/*/* %i/lib/perl5
# rmdir %d/Network/Library/Perl/* %d/Network/Library/Perl \
#       %d/Network/Library %d/Network
<<
DocFiles: <<
  ABOUT-NLS AUTHORS COPYING ChangeLog INSTALL NEWS
  README README.translators THANKS TODO
<<
Description: The Debian package manager
DescDetail: <<
dpkg installs and removes binary packages; it is the base of the
distribution. This package also contains some helper programs and
dselect, a full-screen console frontend to dpkg.
<<
DescPackaging: <<
 In may of 2010, version 1.10.21 which had been used by Fink since 2002, was
 bumped to 1.15.5.6. Between those versions, some files were removed and some
 were added. For example, 822-date, md5sum and cleanup-info were removed from
 the package, and dpkg-trigger, dpkg-vendor and dpkg-gensymbols were removed.

 Because 'md5sum' is often used and no longer available, this package adds
 an md5sum tool in the patch. This tool, written in Perl and using the standard
 Perl on OSX, does not have any dependencies apart from the 'md5' executable
 installed on every OS X system.

 Current dpkg also ships with some Perl libraries. These are by default
 installed in lib/$PERL_VERSION, i.e. lib/5.8.8 or lib/5.10.0 depending on
 OSX dist, Leopard and Snow Leopard respectively. This infofile installs
 these files in lib/, so people updating from Leopard to Snow Leopard will
 not get any dpkg Perl file errors.

 The current Debian plans are to remove install-info from dpkg in favor of
 TeXinfo's install-info (which the current Fink package removes). However,
 as long as dpkg still ships an install-info, we use that one in our
 SplitOff because it's easier, considering the newer dpkg also needs to handle
 install-info differently (with triggers).

 As dpkg is mainly developed for Debian, I (Sjors) expect install-info to be
 removed from dpkg sometime soon, leaving only TeXinfo install-info. Therefore,
 it might be required to move the install-info SplitOff to the texinfo package
 later.
<<
DescPort: <<
1.10.9 
- Removed --without-zlib flag
- Gets confused about top_srcdir without the --srcdir arg.
- Fixed bug with BR manpage
- Patched update-rc.d out of the app check code, not needed on OS X.

Pre-Jaguar: Needed fixes to use the right architecture, disable code that uses
unimplemented functions on Darwin and other stuff.

Added code to support the pseudo package 'macosx' and 'darwin'.

Fix to install-info script to prevent a certain problem with section titles.

Patched to run 'fink-virtual-pkgs' to see what packages we have outside of $prefix.

Patched to suppress warning about BuildDependsOnly control field.

Previous versions by Christoph Pfisterer.

Patched to not remove Darwin's system-critical symlinks (/etc /tmp /var)

Patched to hardcode complete paths to our component executables
instead of relying on PATH

Patch 'dpkg -b' tar invocation to avoid warning under tar>=1.16
See: http://permalink.gmane.org/gmane.os.apple.fink.core/1281

Patch 'dpkg -b' tar invocation to not die if tar returns exit code 1.  
(Exit 1 is a non-fatal error for tar; exit 2 is fatal.)  patch written by vasi

Fink's make-3.81-1 breaks compiling so use Apple's to be safe.

The on-board getopt needs tweaking for darwin, but isn't needed at all
because libSystem has what dpkg needs, so just scrap it.

Remove un/misused variable in dpkg enquiry.c (solve bus error in --architecture)

Filesystem may be case-insensitive, so do case-insensitive check for
"dpkg -i" replacing files in an already-installed other package

1.15.5.6 adds a new 'md5sum' tool, see DescPackaging for more information.
Also the COPYING filename was updated to point to a Fink path, so
'dpkg --license' works correctly.

PERL5LIB is now set correctly in finkinit, because scripts may need to find
/sw/lib/perl5 for Dpkg.pm.

A wrapper for setenv was added to src/help.c because of a crash I saw earlier.
Some investigation turned out that setenv(x, 0, y) crashes on my Snow Leopard
system, while on Linux it doesn't. The wrapper checks if 'name' or 'value'
are zero, and return 0 if they are, preventing the crash.
<<
#
PreInstScript: <<
# This script can be called in the following ways:
#
# Before the package is installed:
#	<new-preinst> install
#
# Before removed package is upgraded:
#	<new-preinst> install <old-version>
#
# Before the package is upgraded:
#	<new-preinst> upgrade <old-version>
#
#
# If postrm fails during upgrade or fails on failed upgrade:
#	<old-preinst> abort-upgrade <new-version>

# Handle upgrades from pre-conffile dpkg.cfg
upgrade_dpkg_non_conffile()
{
    if [ -r /etc/dpkg/dpkg.cfg ]; then
	dpkg_cfg_md5="535552ad5ee9145dbc7a34c264df4e59  %p/etc/dpkg/dpkg.cfg"
	if echo "$dpkg_cfg_md5" | md5sum -c >/dev/null 2>&1; then
	    echo "Removing non-modified dpkg.cfg to be replaced by a conffile ..."
	    rm -f %p/etc/dpkg/dpkg.cfg
	fi
    fi
}

kill_bad_alternatives () {
    local IFS=""
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    ALTDIR="$admindir/alternatives"
    for alt in $ALTDIR/*; do
        if [ ! -f $alt ]; then
            # In case it's been removed by the code below, or in case
            # it's not a real file
            continue
        fi
        {
            read mode || continue
            read mainlink || continue
            while true; do
                read slave || break
                if [ "$slave" = "" ]; then
                    break
                fi
                if [ -e "$ALTDIR/$slave" ]; then
                    echo "Removing conflicting master alternative $slave (it is slave of $(basename $alt))..."
                    rm -f "$ALTDIR/$slave"
                fi
                read slavelink || break
            done
        } <$alt
    done
}

case "$1" in
    install)
	;;

    upgrade)
        # Cleanup bad alternatives that would choke with new
        # update-alternatives (see #530633, #531611, #532739, #521760)
        if dpkg --compare-versions "$2" lt 1.15.3; then
            kill_bad_alternatives
        fi

	case "$2" in
	    # Upgrade from pre-conffile dpkg.cfg
	    1.9.21 | 1.10.* )
		upgrade_dpkg_non_conffile
		;;
	esac
	;;

    abort-upgrade)
	;;


    *)
	echo "$0 called with unknown argument \`$1'" 1>&2
	exit 1
	;;
esac

exit 0
<<
PostInstScript: <<
# This script can be called in the following ways:
#
# After the package was installed:
#	<postinst> configure <old-version>
#
#
# If prerm fails during upgrade or fails on failed upgrade:
#	<old-postinst> abort-upgrade <new-version>
#
# If prerm fails during removal:
#	<old-postinst> abort-remove
#
# If prerm fails during deconfiguration of a package:
#	<postinst> abort-deconfigure in-favour <new-package> <version>
#		   removing <old-package> <version>
#
# If prerm fails during replacement due to conflict:
#	<postinst> abort-remove in-favour <new-package> <version>


# Create the database files if they don't already exist
create_database() {
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}

    for file in diversions statoverride status; do
	if [ ! -f "$admindir/$file" ]; then
	    touch "$admindir/$file"
	fi
    done
}


# Move the info directory from %p/info to %p/share/info
move_info_directory() {
    if [ -d %p/info ] && [ ! -L %p/info ] \
	&& [ -f %p/info/dir ] && [ ! -L %p/info/dir ]
    then
	echo "Moving %p/info/dir to %p/share/info/dir ..."
	mv %p/info/dir %p/share/info/dir
	if [ -f %p/info/dir.old ]; then
	    mv %p/info/dir.old %p/share/info/dir.old
	fi
    fi
}


# Remove the /usr/info symlinks we used to generate
remove_info_symlink() {
    if [ -L %p/info ]; then
	echo "Removing %p/info symlink ..."
	rm %p/info
    elif [ -L %p/info/dir ]; then
	echo "Removing %p/info/dir symlink ..."
	rm %p/info/dir
    fi
}

# Create log file and set default permissions if possible
create_logfile() {
    logfile=%p/var/log/dpkg.log
    touch $logfile
    chmod 644 $logfile
    chown root:root $logfile 2>/dev/null || chown 0:0 $logfile
}


case "$1" in
    configure)
	create_database
	create_logfile

	move_info_directory
	remove_info_symlink
	;;

    abort-upgrade|abort-deconfigure|abort-remove)
	;;

    *)
	echo "$0 called with unknown argument \`$1'" 1>&2
	exit 1
	;;
esac

exit 0
<<
PreRmScript: <<
# This script can be called in the following ways:
#
# Before the package is removed:
#      <prerm> remove
#
# Before an upgrade:
#      <old-prerm> upgrade <new-version>
# if that fails:
#      <new-prerm> failed-upgrade <old-version>
#
#
# Before package is deconfigured while dependency is replaced due to conflict:
#      <prerm> deconfigure in-favour <new-package> <version>
#              removing <old-package> <version>
#
# Before the package is replaced due to conflict:
#      <prerm> remove in-favour <new-package> <version>

ensure_no_triggers_noawait()
{
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    pkgadmindir=$admindir/info

    trig_noawait=$(find "$pkgadmindir" -name "*.triggers" -type f | \
                   xargs -r grep -El "^(interest|activate)-(no)?await" | \
		   sed -e 's,^.*/\([^/.:]\+\)[^/]\+$,\1,')

    # Abort if we cannot possibly downgrade
    if [ -n "$trig_noawait" ]; then
        cat <<- MSG
	dpkg: error: You have packages using the "interest-noawait" and/or
	"activate-noawait" trigger directives but the dpkg version that
	you're trying to downgrade to doesn't support them. Aborting
	downgrade.

	List of affected packages:

	$trig_noawait
	MSG
        exit 1
    fi

    bad_triggers_files=$(find "$admindir/triggers" -type f | \
                         xargs -r grep -l "/noawait$" || true)
    if [ -n "$bad_triggers_files" ]; then
        cat <<- MSG
	dpkg: error: Some internal trigger files unexpectedly reference
	packages tagged with "/noawait" while their corresponding
	infodb files doesn't seem to contain any "interest-noawait"
	directive. Aborting the downgrade as those tags are not supported
	by the version you're trying to downgrade to.

	List of internal trigger files that are affected:

	$bad_triggers_files
	MSG
	exit 1
    fi
}

downgrade_multiarch_infodb()
{
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    pkgadmindir=$admindir/info
    triggersdir=$admindir/triggers

    coinst_pkgs="`ls "$pkgadmindir" | \
        sed -n -e 's/^\([^:]\+:[^.]\+\)\..*$/\1/p' | sort -u | \
        cut -d: -f1 | uniq -d`"

    # Abort if we cannot possibly downgrade
    if [ -n "$coinst_pkgs" ]; then
        cat <<- MSG
	dpkg: error: You have more than one architecture instance for some
	installed 'Multi-Arch: same' packages, to be able to downgrade dpkg
	you will need to have only one instance installed per package.

	List of co-installed packages:

	$coinst_pkgs
	MSG
        exit 1
    fi

    bad_dep_pkgs=$(dpkg-query -f '${Package}\t${Depends} ${Recommends} ${Suggests} ${Enhances} ${Conflicts} ${Replaces} ${Breaks}\n' -W | \
        grep ":any" | cut -f1 | sort -u)
    if [ -n "$bad_dep_pkgs" ]; then
        cat <<- MSG
	dpkg: error: Some installed packages have multiarch dependencies that
	the old dpkg won't parse. You should get rid of them (or downgrade
	them to versions without those dependencies) before proceeding with
	dpkg's downgrade.

	List of affected packages:

	$bad_dep_pkgs
	MSG
        exit 1
    fi

    dep_fields='Depends|Recommends|Suggests|Enhances|Conflicts|Replaces|Breaks'
    if grep -qE "^($dep_fields):.*:any" $admindir/available; then
	cat <<- MSG
	dpkg: error: Some available packages have multiarch dependencies that
	the old dpkg won't parse. You should clear this file before proceeding
	with dpkg's downgrade, with:

	  # dpkg --clear-avail
	MSG
	exit 1
    fi

    file_triggers_pkgs="`sed -n -e 's/^[^ ]\+ \([^:]\+\):[^.]\+$/\1/p' \
        $triggersdir/File| sort -u`"

    if [ -n "$file_triggers_pkgs" ]; then
	cat <<-MSG
	dpkg: error: The triggers database contains arch-qualified package
	names that the old dpkg won't parse. You should get rid of them (or
	downgrade them to a non Multi-Arch: same version) before proceeding
	with dpkg's downgrade.

	List of affected packages:

	$file_triggers_pkgs
	MSG
	exit 1
    fi

    echo "Downgrading the multiarch dpkg control files database ..."
    ls $pkgadmindir | grep : | while read oldfile; do
        # We first do a round of hardlinks to the new names, so that the db
        # will never be unusable for either of the dpkg versions.
        newfile=$(echo $oldfile | sed -e 's/:[^.]\+//')
        ln -f "$pkgadmindir/$oldfile" "$pkgadmindir/$newfile"
    done
}

case "$1" in
    upgrade)
        # Allow the downgrade only if no package is using the
	# (interest|activate)-noawait trigger directives
        if dpkg --compare-versions "$2" lt 1.16.1; then
            ensure_no_triggers_noawait
        fi
        # Downgrade the multiarch db to a "monoarch" db layout
        if dpkg --compare-versions "$2" lt 1.16.2; then
            downgrade_multiarch_infodb
        fi
        ;;

    remove|failed-upgrade|deconfigure)
        ;;

    *)
        echo "$0 called with unknown argument \`$1'" 1>&2
        exit 1
        ;;
esac

exit 0
<<
PostRmScript: <<
# This script can be called in the following ways:
#
# After the package was removed:
#	<postrm> remove
#
# After the package was purged:
#	<postrm> purge
#
# After the package was upgraded:
#	<old-postrm> upgrade <new-version>
# if that fails:
#	<new-postrm> failed-upgrade <old-version>
#
#
# After all of the packages files have been replaced:
#	<postrm> disappear <overwriting-package> <version>
#
#
# If preinst fails during install:
#	<new-postrm> abort-install
#
# If preinst fails during upgrade of removed package:
#	<new-postrm> abort-install <old-version>
#
# If preinst fails during upgrade:
#	<new-postrm> abort-upgrade <old-version>


# Remove log file when dpkg is purged
remove_logfile() {
    rm -f %p/var/log/dpkg.log %p/var/log/dpkg.log.* 2>/dev/null
}

# Cleanup multiarch infodb leftovers
cleanup_multiarch_infodb()
{
    admindir=${DPKG_ADMINDIR:-%p/var/lib/dpkg}
    pkgadmindir=$admindir/info

    echo "Cleaning up the multiarch dpkg control files database ..."
    ls $pkgadmindir | grep : | while read oldfile; do
        rm "$pkgadmindir/$oldfile"
    done
    rm -f $pkgadmindir/format
}

case "$1" in
    remove)
	;;

    purge)
	remove_logfile
	;;

    upgrade)
	# Downgrade the multiarch db to a "monoarch" db layout
	if dpkg --compare-versions "$2" lt 1.16.2; then
	    cleanup_multiarch_infodb
	fi
	;;

    failed-upgrade|disappear|abort-install|abort-upgrade)
	;;


    *)
	echo "$0 called with unknown argument \`$1'" 1>&2
	exit 1
	;;
esac

exit 0
<<
License: GPL
Homepage: http://packages.qa.debian.org/d/dpkg.html

SplitOff: <<
  Package: install-info
  Description: install-info binary from dpkg, wrapper and triggers
  Conflicts: dpkg (<= 1.15.5.6-11)
  Files: <<
    bin/ginstall-info
    bin/install-info
    sbin/install-info
    sbin/update-info-dir
    share/man/man8/update-info-dir.8
  <<
  InstallScript: <<
    # Install the trigger
    echo "interest texinfo" >>%d/DEBIAN/triggers
    echo "interest %p/share/info" >>%d/DEBIAN/triggers
  <<
  PostInstScript: <<
    # Update the TeXinfo directory.
    %p/sbin/update-info-dir
  <<
<<
