Package: llvm30
Version: 3.0
Revision: 0
Description: Modular and reusable compiler
License: BSD
Maintainer: Benjamin Reed <llvm@fink.raccoonfink.com>

BuildDepends: cmake (>= 2.8.2-1), gcc46-compiler, fink (>= 0.28), ccache
Depends: gcc46-shlibs
InfoTest: 	TestScript: make check || exit 1

Source: http://llvm.org/releases/%v/llvm-%v.tar.gz
Source-MD5: a8e5f5f1c1adebae7b4a654c376a6005
Source2: http://llvm.org/releases/%v/clang-%v.tar.gz
Source2-MD5: 43350706ae6cf05d0068885792ea0591

SourceDirectory: llvm-%v.src
BuildDependsOnly: false
UseMaxBuildJobs: true

PatchScript: <<
	#!/bin/sh -ev
	mv ../clang-%v.src tools/clang
	# some libs failed to explicitly list their dependencies, so we append
	cp utils/unittest/CMakeLists.txt{,.orig}
	{ echo "add_llvm_library_dependencies(gtest LLVMSupport)" ; \
	  echo "add_llvm_library_dependencies(gtest_main gtest)" ; \
	} >> utils/unittest/CMakeLists.txt
	cp tools/clang/lib/Serialization/CMakeLists.txt{,.orig}
	{ echo "add_llvm_library_dependencies(clangSerialization clangAST clangBasic clangSema LLVMSupport)" ; \
	} >> tools/clang/lib/Serialization/CMakeLists.txt
	# circular dependence between clangSerialization and clangFrontend
	# to resolve, lump all of Serialization into Frontend
	pushd tools/clang/lib/Frontend
	ln -s ../Serialization/*.cpp .
	ln -s ../Serialization/*.h .
	ser_files=`ls ../Serialization/*.cpp | xargs basename | tr '\n' ' '`
	echo "linking: $ser_files"
	sed -i.orig -e '/clangSerialization/d' \
		-e "s|Warnings\.cpp|& $ser_files|" CMakeLists.txt
	popd
	# purge refs to clangSerialization (that already have clangFrontend)
	for f in tools/clang/{tools/{driver,libclang},examples/{wpa,clang-interpreter}}/CMakeLists.txt
	do sed -i.orig -e '/clangSerialization/d' $f
	done
	# JIT needs CodeGen, duh.
	sed -i.orig -e 's|LLVMCore|LLVMCodeGen &|' lib/ExecutionEngine/JIT/CMakeLists.txt
<<
CompileScript: <<
	#!/bin/sh -ev
	case "%m" in
	x86_64)
	CMAKE_OPTIONS="-DLLVM_BUILD_32_BITS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD=X86"
	;;
	powerpc)
	CMAKE_OPTIONS="-DLLVM_BUILD_32_BITS:BOOL=ON -DLLVM_TARGETS_TO_BUILD=PowerPC"
	;;
	*)
	CMAKE_OPTIONS="-DLLVM_BUILD_32_BITS:BOOL=ON -DLLVM_TARGETS_TO_BUILD=X86"
	esac

	# gcc-4.0.1 FAILS on darwin9
	darwin_vers=`uname -r | cut -d. -f1`
	case "$darwin_vers" in
	8)
	  mkdir ../opt-bin
	  pushd ../opt-bin
	  { echo "#!/bin/sh" ; echo 'exec ccache gcc-fsf-4.6 "$@"' ; } > ccgcc-4.6
	  { echo "#!/bin/sh" ; echo 'exec ccache g++-fsf-4.6 "$@"' ; } > ccg++-4.6
	  chmod +x ccg*
	  export PATH=`pwd`:$PATH
	  popd
	  export CC=ccgcc-4.6
	  export CXX=ccg++-4.6
	  CMAKE_OPTIONS="$CMAKE_OPTIONS -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_C_FLAGS=-fno-common -DCMAKE_CXX_FLAGS=-fno-common"
	  ;;
	9)
	  export CC=gcc-4.2
	  export CXX=g++-4.2
	  ;;
	*) : ;;
	esac

	mkdir ../build
	pushd ../build
	cmake $CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=%p/opt/llvm-%v -DLLVM_ENABLE_ASSERTIONS=OFF -DCMAKE_BUILD_TYPE=Release ../llvm-%v.src
	make VERBOSE=1
	popd
<<

InstallScript: <<
#!/bin/sh -ev
	pushd ../build
		make -j1 install/fast DESTDIR="%d"
	popd

	install_name_tool -id "%p/opt/llvm-%v/lib/liblibclang.%v.dylib" "%i/opt/llvm-%v/lib/liblibclang.%v.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/BugpointPasses.dylib" "%i/opt/llvm-%v/lib/BugpointPasses.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/LLVMHello.dylib" "%i/opt/llvm-%v/lib/LLVMHello.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/libLTO.dylib" "%i/opt/llvm-%v/lib/libLTO.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/profile_rt.dylib" "%i/opt/llvm-%v/lib/profile_rt.dylib"
<<
DocFiles: *.TXT README.txt
Shlibs: <<
	 	%p/opt/llvm-%v/lib/liblibclang.3.0.dylib 1.0.0 %n (>= 3.0-1)
		!%p/opt/llvm-%v/lib/liblibclang.dylib
		!%p/opt/llvm-%v/lib/libLTO.dylib
		%p/opt/llvm-%v/lib/profile_rt.dylib 0.0.0  %n (>= 3.0-1)
		%p/opt/llvm-%v/lib/BugpointPasses.dylib 0.0.0 %n (>= 3.0-1)
		%p/opt/llvm-%v/lib/LLVMHello.dylib 0.0.0 %n (>= 3.0-1)
<<
Homepage: http://llvm.org/
DescDetail: <<
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies.  Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them.
<<
DescPort: <<
fangism contributed the porting effort to get this to work on PowerPC-darwin8.
<<
