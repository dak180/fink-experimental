#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
#interact with processes
use IPC::Run qw( run );
use File::Temp qw ( tempdir );

sub get_usage {
	return <<EOT;
Usage:
check_finkrsync -H <hostname>
  [-p <path>] [-v|-vv|-vvv] [-h]
EOT
}

sub go_die {
	my $msg = shift;
	my $exitcode = shift || 3;

	print STDERR "Error: $msg\n";
	exit($exitcode);
}

sub get_help {
	return <<EOT;
  -H <hostname>
       hostname or IP of the finkinfo rsync server.
  [-p] <path>
       path to the TIMPSTAMP file in rsync
  [-v|-vv|-vvv]
       be verbose
         (no -v) .. single line output
         -v   ..... single line output with additional details for warnings
         -vv  ..... multi line output, also with additional details for warnings
         -vvv ..... debugging output, followed by normal multi line output
  [-h]
       show this help
EOT
}

sub usage {
	my ($arg) = @_; #the list of inputs
	my ($exitcode);

	if ( defined $arg ) {
		if ( $arg =~ m/^\d+$/ ) {
			$exitcode = $arg;
		} else {
			print STDOUT $arg, "\n";
			$exitcode = 1;
		}
	}
	print STDOUT get_usage();

	exit($exitcode) if defined $exitcode;
}

our $verbosity = 0;
our ($rsync, $rsync_host, $rsync_path);

MAIN: {
	#force a flush after every write or print
	$| = 1;
	#keep args for verbose output
	my @ARGV_SAVE = @ARGV;
	my ($show_help);

	#read in command line arguments and init hash variables with the given
	#values from argv
	if ( !( GetOptions(
		'H|host=s'	=> \$rsync_host,
		'p|path=s'	=> \$rsync_path,
		'v|verbosity'	=> \$verbosity,
		'vv'		=> sub{$verbosity=2},
		'vvv'		=> sub{$verbosity=3},
		'h|help'	=> sub{
			print STDOUT get_usage();
			print STDOUT "\n";
			print STDOUT get_help();
			exit(0)
		},
		'usage|?'	=> sub{
			print STDOUT get_usage();
			exit(3);
		}
	) ) ) {
		#call usage if GetOptions failed
		usage(1);
	}

	#print usage if unknown arg list is left
	usage(1) if @ARGV;

	#make sure host is set
	if ( !$rsync_host ) {
		go_die("Error: host is a required option.", 3);
	}

	#make sure host does not start with .+://
	$rsync_host =~ s/^.+:\\//g;

	#if path not specified assume finkinfo
	$rsync_path = "finkinfo" unless length $rsync_path;

	#make sure path doesn start or end with a /
	$rsync_path =~ s/^\///g;
	$rsync_path =~ s/\/$//g;

	#make rsync line
	$rsync = "rsync://$rsync_host/$rsync_path/";

	#variable for command to call rsync
	my (@rsynccmd1, @rsynccmd2, @rsynccmd3);

	my $rsync_options = "-az";
	if ($verbosity == 3) {
		$rsync_options .= "v";
	} else {
		$rsync_options .= "q";
	}

	my $tmpdir = tempdir(CLEANUP => 1);
	@rsynccmd1 = ("rsync", $rsync_options, $rsync . "TIMESTAMP", "$tmpdir/");
	@rsynccmd2 = ("rsync", $rsync_options, $rsync . "LOCAL", "$tmpdir/");
	@rsynccmd3 = ("rsync", $rsync_options, $rsync . "UPDATE", "$tmpdir/");

	#execute status command and redirect stdout and stderr to ipmioutput
	my ($rsyncoutput1, $rsyncoutput2, $rsyncoutput3);
	my ($returncode1, $returncode2, $returncode3);

	#the upper eight bits contain the error condition (exit code)
	#see http://perldoc.perl.org/perlvar.html#Error-Variables
	run \@rsynccmd1, '>&', \$rsyncoutput1;
	$returncode1 = $? >> 8;
	if ( $returncode1 == 0) {
		run \@rsynccmd2, '>&', \$rsyncoutput2;
		$returncode2 = $? >> 8;
		if ( $returncode2 == 0) {
			run \@rsynccmd3, '>&', \$rsyncoutput3;
			$returncode3 = $? >> 8;
		}
	}

	# print debug output when verbosity is set to 3 (-vvv)
	if ( $verbosity == 3 ) {
		print STDOUT "------------- begin of debug output (-vvv is set): ------------\n";
		print STDOUT "  script was executed with the following parameters:\n";
		print STDOUT "    $0 ", join(' ', @ARGV_SAVE), "\n";
		print STDOUT "  rsync was executed with the following parameters:\n";
		print STDOUT "    ", join(' ', @rsynccmd1), "\n";
		print STDOUT "    ", join(' ', @rsynccmd2), "\n";
		print STDOUT "    ", join(' ', @rsynccmd3), "\n";

		if ( $returncode1 != 0) {
			print STDOUT "-> Execution of rsync failed with return code $returncode1.\n";
			print STDOUT "$rsyncoutput1\n";
		}
		if ( $returncode2 != 0) {
			print STDOUT "-> Execution of rsync failed with return code $returncode2.\n";
			print STDOUT "$rsyncoutput2\n";
		}
		if ( $returncode3 != 0) {
			print STDOUT "-> Execution of rsync failed with return code $returncode3.\n";
			print STDOUT "$rsyncoutput3\n";
		}
		print STDOUT "--------------------- end of debug output ---------------------\n";
	}

	if ( -d $tmpdir) {
		if ($verbosity == 3) {
			print STDOUT "Temp dir '$tmpdir' exists.\n";
		}
	} else {
		go_die("Error: '$tmpdir' not created");
	}

	if ( $returncode1 != 0 || $returncode2 != 0) {
		print STDOUT "$rsync_host RSYNC Status: Critical [down]\n";
		exit(3);
	} else {
		my $output = "$rsync_host RSYNC Status: ";

		my $exit = 0;		
		my ($fh, $timestamp, $local, $updated);

		#get timestamp from $tmpdir/TIMESTAMP
		open $fh, '<', "$tmpdir/TIMESTAMP" or go_die("$tmpdir/TIMESTAMP: $!");
		while (<$fh>) {
			chomp;
			$timestamp = $_;
		}
		close $fh or go_die("$tmpdir/TIMESTAMP: $!");
		my $tsdiff = sprintf("%.0f", (abs($timestamp - time) / 86400) * 24 * 60);

		#get timestamp from $tmpdir/LOCAL
		open $fh, '<', "$tmpdir/LOCAL" or go_die("$tmpdir/LOCAL: $!");
		while (<$fh>) {
			chomp;
			$local = $_;
		}
		close $fh or go_die("$tmpdir/LOCAL: $!");
		my $lcdiff = sprintf("%.0f", (abs($local - time) / 86400) * 24 * 60);

		#get timestamp from $tmpdir/UPDATE
		my $updiff = 0;
		if (open $fh, '<', "$tmpdir/UPDATE") {
			while (<$fh>) {
				chomp;
				$updated = $_;
			}
			close $fh or go_die("$tmpdir/UPDATE: $!");
			$updiff = sprintf("%.0f", (abs($updated - time) / 86400) * 24 * 60);
		}

		if ($lcdiff > (60 * 24)) {
			$exit = 2;
			$output .= "Critical";
		} elsif ($lcdiff > (60 * 4)) {
			$exit = 1;
			$output .= "Warning";
		} else {
			$output .= "OK";
		}

		$output .= " [";
		if ($lcdiff > (60 * 24)) {
			$output .= sprintf "Success %.0f days ago", $lcdiff/60/24;
		} elsif($lcdiff > 60) {
			$output .= sprintf "Success %.0f hours ago", $lcdiff/60;
		} else {
			$output .= "Success $lcdiff minutes ago";
		}
		$output .= ", ";
		if ($tsdiff > (60 * 24)) {
			$output .= sprintf "Updated %.0f days ago", $tsdiff/60/24;
		} elsif($tsdiff > 60) {
			$output .= sprintf "Updated %.0f hours ago", $tsdiff/60;
		} else {
			$output .= "Update $tsdiff minutes ago";
		}
		if ($updiff) {
			$output .= ", ";
			if ($updiff > (60 * 24)) {
				$output .= sprintf "Ran %.0f days ago", $updiff/60/24;
			} elsif($updiff > 60) {
				$output .= sprintf "Ran %.0f hours ago", $updiff/60;
			} else {
				$output .= "Ran $updiff minutes ago";
			}
		}
		$output .= "]";

		print STDOUT "$output\n";
		exit($exit);
	}
};
