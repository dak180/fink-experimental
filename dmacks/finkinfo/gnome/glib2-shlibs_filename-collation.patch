diff --git a/glib/gunicollate.c b/glib/gunicollate.c
index f9d8b3d..15923b2 100644
--- a/glib/gunicollate.c
+++ b/glib/gunicollate.c
@@ -501,16 +501,22 @@ gchar *
 g_utf8_collate_key_for_filename (const gchar *str,
 				 gssize       len)
 {
-#ifndef HAVE_CARBON
+#if 1 || defined HAVE_CARBON
   GString *result;
   GString *append;
   const gchar *p;
   const gchar *prev;
   const gchar *end;
+  gchar *work_str;
   gchar *collate_key;
   gint digits;
   gint leading_zeros;
 
+  /* find out whether current collation is case_sensitive */
+  gboolean case_sensitive = strcoll ("aa","Ab") > 0 || strcoll ("Aa", "ab") > 0;
+  if (!case_sensitive)
+    work_str = g_utf8_strdown (str,len);
+
   /*
    * How it works:
    *
@@ -563,10 +569,11 @@ g_utf8_collate_key_for_filename (const gchar *str,
   result = g_string_sized_new (len * 2);
   append = g_string_sized_new (0);
 
-  end = str + len;
+  prev = p = ((case_sensitive) ? str : work_str);
+  end = prev + len;
 
   /* No need to use utf8 functions, since we're only looking for ascii chars */
-  for (prev = p = str; p < end; p++)
+  for (; p < end; p++)
     {
       switch (*p)
 	{
@@ -672,6 +679,14 @@ g_utf8_collate_key_for_filename (const gchar *str,
   g_string_append (result, append->str);
   g_string_free (append, TRUE);
 
+  if (!case_sensitive)
+    {
+      collate_key = g_utf8_collate_key (str,len);
+      g_string_append (result,collate_key);
+      g_free (collate_key);
+      g_free (work_str);
+    }
+
   return g_string_free (result, FALSE);
 #else /* HAVE_CARBON */
   return carbon_collate_key_for_filename (str, len);
