diff --git a/gio/gdbusauth.c b/gio/gdbusauth.c
index a29f97e..4f77507 100644
--- a/gio/gdbusauth.c
+++ b/gio/gdbusauth.c
@@ -961,7 +961,6 @@ _g_dbus_auth_run_server (GDBusAuth              *auth,
   GDataInputStream *dis;
   GDataOutputStream *dos;
   GError *local_error;
-  guchar byte;
   gchar *line;
   gsize line_length;
   GDBusAuthMechanism *mech;
@@ -997,7 +996,7 @@ _g_dbus_auth_run_server (GDBusAuth              *auth,
 
   g_data_input_stream_set_newline_type (dis, G_DATA_STREAM_NEWLINE_TYPE_CR_LF);
 
-  /* first read the NUL-byte (TODO: read credentials if using a unix domain socket) */
+  /* first read the NUL-byte */
 #ifdef G_OS_UNIX
   if (G_IS_UNIX_CONNECTION (auth->priv->stream))
     {
@@ -1014,8 +1013,7 @@ _g_dbus_auth_run_server (GDBusAuth              *auth,
   else
     {
       local_error = NULL;
-      byte = g_data_input_stream_read_byte (dis, cancellable, &local_error);
-      byte = byte; /* To avoid -Wunused-but-set-variable */
+      (void)g_data_input_stream_read_byte (dis, cancellable, &local_error);
       if (local_error != NULL)
         {
           g_propagate_error (error, local_error);
@@ -1024,8 +1022,7 @@ _g_dbus_auth_run_server (GDBusAuth              *auth,
     }
 #else
   local_error = NULL;
-  byte = g_data_input_stream_read_byte (dis, cancellable, &local_error);
-  byte = byte; /* To avoid -Wunused-but-set-variable */
+  (void)g_data_input_stream_read_byte (dis, cancellable, &local_error);
   if (local_error != NULL)
     {
       g_propagate_error (error, local_error);
diff --git a/gio/gdbusauthmechanismsha1.c b/gio/gdbusauthmechanismsha1.c
index 0b9db7f..e133d2d 100644
--- a/gio/gdbusauthmechanismsha1.c
+++ b/gio/gdbusauthmechanismsha1.c
@@ -746,7 +746,6 @@ keyring_generate_entry (const gchar  *cookie_context,
               g_strfreev (tokens);
               goto out;
             }
-          line_when = line_when; /* To avoid -Wunused-but-set-variable */
 
 
           /* D-Bus spec says:
diff --git a/gio/gdbusmessage.c b/gio/gdbusmessage.c
index 766609e..8ab33c3 100644
--- a/gio/gdbusmessage.c
+++ b/gio/gdbusmessage.c
@@ -1438,7 +1438,9 @@ parse_value_from_blob (GMemoryBuffer       *buf,
 {
   GVariant *ret;
   GError *local_error;
+#ifdef DEBUG_SERIALIZER
   gboolean is_leaf;
+#endif /* DEBUG_SERIALIZER */
   const gchar *type_string;
 
   type_string = g_variant_type_peek_string (type);
@@ -1458,7 +1460,9 @@ parse_value_from_blob (GMemoryBuffer       *buf,
 
   ret = NULL;
 
+#ifdef DEBUG_SERIALIZER
   is_leaf = TRUE;
+#endif /* DEBUG_SERIALIZER */
   local_error = NULL;
   switch (type_string[0])
     {
@@ -1641,8 +1645,8 @@ parse_value_from_blob (GMemoryBuffer       *buf,
 
           array_len = g_memory_buffer_read_uint32 (buf);
 
-          is_leaf = FALSE;
 #ifdef DEBUG_SERIALIZER
+          is_leaf = FALSE;
           g_print (": array spans 0x%04x bytes\n", array_len);
 #endif /* DEBUG_SERIALIZER */
 
@@ -1749,8 +1753,8 @@ parse_value_from_blob (GMemoryBuffer       *buf,
 
           ensure_input_padding (buf, 8);
 
-          is_leaf = FALSE;
 #ifdef DEBUG_SERIALIZER
+          is_leaf = FALSE;
           g_print ("\n");
 #endif /* DEBUG_SERIALIZER */
 
@@ -1784,8 +1788,8 @@ parse_value_from_blob (GMemoryBuffer       *buf,
         {
           ensure_input_padding (buf, 8);
 
-          is_leaf = FALSE;
 #ifdef DEBUG_SERIALIZER
+          is_leaf = FALSE;
           g_print ("\n");
 #endif /* DEBUG_SERIALIZER */
 
@@ -1819,8 +1823,8 @@ parse_value_from_blob (GMemoryBuffer       *buf,
         }
       else if (g_variant_type_is_variant (type))
         {
-          is_leaf = FALSE;
 #ifdef DEBUG_SERIALIZER
+          is_leaf = FALSE;
           g_print ("\n");
 #endif /* DEBUG_SERIALIZER */
 
@@ -1892,8 +1896,6 @@ parse_value_from_blob (GMemoryBuffer       *buf,
           g_free (s);
         }
     }
-#else
-  is_leaf = is_leaf; /* To avoid -Wunused-but-set-variable */
 #endif /* DEBUG_SERIALIZER */
 
   /* sink the reference, if floating */
diff --git a/gio/gthreadedresolver.c b/gio/gthreadedresolver.c
index c02c593..718be2b 100644
--- a/gio/gthreadedresolver.c
+++ b/gio/gthreadedresolver.c
@@ -533,7 +533,6 @@ g_resolver_records_from_res_query (const gchar      *rrname,
   gchar namebuf[1024];
   guchar *end, *p;
   guint16 type, qclass, rdlength;
-  guint32 ttl;
   HEADER *header;
   GList *records;
   GVariant *record;
@@ -583,8 +582,7 @@ g_resolver_records_from_res_query (const gchar      *rrname,
       p += dn_expand (answer, end, p, namebuf, sizeof (namebuf));
       GETSHORT (type, p);
       GETSHORT (qclass, p);
-      GETLONG  (ttl, p);
-      ttl = ttl; /* To avoid -Wunused-but-set-variable */
+      p += 4; /* ignore the ttl (type=long) value */
       GETSHORT (rdlength, p);
 
       if (type != rrtype || qclass != C_IN)
diff --git a/gio/tests/httpd.c b/gio/tests/httpd.c
index 41bc6c8..9bca6c9 100644
--- a/gio/tests/httpd.c
+++ b/gio/tests/httpd.c
@@ -67,12 +67,19 @@ handler (GThreadedSocketService *service,
 
   version = NULL;
   tmp = strchr (escaped, ' ');
-  if (tmp != NULL)
+  if (tmp == NULL)
     {
-      *tmp = 0;
-      version = tmp + 1;
+      send_error (out, 400, "Bad Request");
+      goto out;
+    }
+  *tmp = 0;
+
+  version = tmp + 1;
+  if (!g_str_has_prefix (version, "HTTP/1."))
+    {
+      send_error(out, 505, "HTTP Version Not Supported");
+      goto out;
     }
-  version = version; /* To avoid -Wunused-but-set-variable */
 
   query = strchr (escaped, '?');
   if (query != NULL)
diff --git a/gio/gdbusauthmechanismsha1.c b/gio/gdbusauthmechanismsha1.c
index e133d2d..e646d24 100644
--- a/gio/gdbusauthmechanismsha1.c
+++ b/gio/gdbusauthmechanismsha1.c
@@ -387,7 +387,6 @@ keyring_lookup_entry (const gchar  *cookie_context,
       gchar **tokens;
       gchar *endp;
       gint line_id;
-      guint64 line_when;
 
       if (line[0] == '\0')
         continue;
@@ -420,8 +419,7 @@ keyring_lookup_entry (const gchar  *cookie_context,
           goto out;
         }
 
-      line_when = g_ascii_strtoll (tokens[1], &endp, 10);
-      line_when = line_when; /* To avoid -Wunused-but-set-variable */
+      (void)g_ascii_strtoll (tokens[1], &endp, 10); /* do not care what the timestamp is */
       if (*endp != '\0')
         {
           g_set_error (error,
@@ -488,7 +486,9 @@ keyring_acquire_lock (const gchar  *path,
   gchar *lock;
   gint ret;
   guint num_tries;
+#ifdef EEXISTS
   guint num_create_tries;
+#endif
 
   g_return_val_if_fail (path != NULL, FALSE);
   g_return_val_if_fail (error == NULL || *error == NULL, FALSE);
@@ -509,8 +509,8 @@ keyring_acquire_lock (const gchar  *path,
    *         real locking implementations are still flaky on network filesystems
    */
 
-  num_create_tries = 0;
 #ifdef EEXISTS
+  num_create_tries = 0;
  again:
 #endif
   num_tries = 0;
@@ -557,7 +557,6 @@ keyring_acquire_lock (const gchar  *path,
             goto again;
         }
 #endif
-      num_create_tries = num_create_tries; /* To avoid -Wunused-but-set-variable */
       g_set_error (error,
                    G_IO_ERROR,
                    g_io_error_from_errno (errno),
