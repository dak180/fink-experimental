diff -ruN httpd-2.4.10.orig/fink/a2enmod httpd-2.4.10/fink/a2enmod
--- httpd-2.4.10.orig/fink/a2enmod	1969-12-31 17:00:00.000000000 -0700
+++ httpd-2.4.10/fink/a2enmod	2015-04-25 11:48:38.000000000 -0600
@@ -0,0 +1,547 @@
+#!/usr/bin/perl -w
+#
+# a2enmod by Stefan Fritsch <sf@debian.org>
+# Licensed under Apache License 2.0
+#
+# The coding style is "perltidy -pbp"
+
+use strict;
+use Cwd 'realpath';
+use File::Spec;
+use File::Basename;
+use File::Path;
+use Getopt::Long;
+
+my $quiet;
+my $force;
+my $maintmode;
+my $purge;
+
+Getopt::Long::Configure('bundling');
+GetOptions(
+    'quiet|q'     => \$quiet,
+    'force|f'     => \$force,
+    'maintmode|m' => \$maintmode,
+    'purge|p'     => \$purge
+) or exit 2;
+
+my $basename = basename($0);
+$basename =~ /^a2(en|dis)(mod|site|conf)((?:-.+)?)$/
+    or die "$basename call name unknown\n";
+my $act        = $1;
+my $obj        = $2;
+my $dir_suffix = $3;
+
+my @essential_module_list = (qw/access_compat alias auth_basic authn_file/,
+    qw/authz_host authz_user autoindex deflate dir env filter logio/,
+    qw/mime negotiation setenvif unixd version watchdog/);
+my $env_file = $ENV{APACHE_ENVVARS}
+    || (
+    $ENV{APACHE_CONFDIR}
+    ? "$ENV{APACHE_CONFDIR}/envvars"
+    : "@FINKPREFIX@/etc/apache2$dir_suffix/envvars"
+    );
+$ENV{LANG} = 'C';
+read_env_file($env_file);
+
+$act .= 'able';
+my ( $name, $dir, $sffx, $reload );
+if ( $obj eq 'mod' ) {
+    $obj    = 'module';
+    $dir    = 'mods';
+    $sffx   = '.load';
+    $reload = 'restart';
+}
+elsif ( $obj eq 'conf' ) {
+    $obj    = 'conf';
+    $dir    = 'conf';
+    $sffx   = '.conf';
+    $reload = 'reload';
+}
+else {
+    $dir    = 'sites';
+    $sffx   = '.conf';
+    $reload = 'reload';
+}
+$name = ucfirst($obj);
+
+my $confdir = $ENV{APACHE_CONFDIR} || "@FINKPREFIX@/etc/apache2$dir_suffix";
+my $availdir = $ENV{ uc("APACHE_${dir}_AVAILABLE") }
+    || "$confdir/$dir-available";
+my $enabldir = $ENV{ uc("APACHE_${dir}_ENABLED") } || "$confdir/$dir-enabled";
+my $statedir = $ENV{ uc("APACHE_STATE_DIRECTORY") } || "@FINKPREFIX@/var/lib/apache2";
+
+$statedir .= "/$obj";
+
+my $choicedir = $act eq 'enable' ? $availdir : $enabldir;
+my $linkdir = File::Spec->abs2rel( $availdir, $enabldir );
+
+my $request_reload = 0;
+
+my $rc = 0;
+
+if ( !scalar @ARGV ) {
+    my @choices = myglob('*');
+    print "Your choices are: @choices\n";
+    print "Which ${obj}(s) do you want to $act (wildcards ok)?\n";
+    my $input = <>;
+    @ARGV = split /\s+/, $input;
+
+}
+
+my @objs;
+foreach my $arg (@ARGV) {
+    $arg =~ s/${sffx}$//;
+    my @glob = myglob($arg);
+    if ( !@glob ) {
+        error("No $obj found matching $arg!\n");
+        $rc = 1;
+    }
+    else {
+        push @objs, @glob;
+    }
+}
+
+foreach my $acton (@objs) {
+    doit($acton) or $rc = 1;
+}
+
+info(
+    "To activate the new configuration, you need to run:\n  apache2ctl restart\n"
+) if $request_reload;
+
+exit($rc);
+
+##############################################################################
+
+sub myglob {
+    my $arg = shift;
+
+    my @glob = map {
+        s{^$choicedir/}{};
+        s{$sffx$}{};
+        $_
+    } glob("$choicedir/$arg$sffx");
+
+    return @glob;
+}
+
+sub doit {
+    my $acton = shift;
+
+    my ( $conftgt, $conflink );
+    if ( $obj eq 'module' ) {
+        if ( $acton eq 'cgi' && threaded() ) {
+            print
+                "Your MPM seems to be threaded. Selecting cgid instead of cgi.\n";
+            $acton = 'cgid';
+        }
+
+        $conftgt = "$availdir/$acton.conf";
+        if ( -e $conftgt ) {
+            $conflink = "$enabldir/$acton.conf";
+        }
+    }
+
+    my $tgt  = "$availdir/$acton$sffx";
+    my $link = "$enabldir/$acton$sffx";
+
+    if ( !-e $tgt ) {
+        if ( -l $link && !-e $link ) {
+            if ( $act eq 'disable' ) {
+                info("removing dangling symlink $link\n");
+                unlink($link);
+
+                # force a .conf path. It may exist as dangling link, too
+                $conflink = "$enabldir/$acton.conf";
+
+                if ( -l $conflink && !-e $conflink ) {
+                    info("removing dangling symlink $conflink\n");
+                    unlink($conflink);
+                }
+
+                return 1;
+            }
+            else {
+                error("$link is a dangling symlink!\n");
+            }
+        }
+
+        if ( $purge ) {
+            switch_marker( $obj, $act, $acton );
+            # exit silently, we are purging anyway
+            return 1;
+        }
+
+        error("$name $acton does not exist!\n");
+        return 0;
+    }
+
+    # handle module dependencies
+    if ( $obj eq 'module' ) {
+        if ( $act eq 'enable' ) {
+            my @depends = get_deps("$availdir/$acton.load");
+            do_deps( $acton, @depends ) or return 0;
+
+            my @conflicts = get_deps( "$availdir/$acton.load", "Conflicts" );
+            check_conflicts( $acton, @conflicts ) or return 0;
+        }
+        else {
+            my @depending;
+            foreach my $d ( glob("$enabldir/*.load") ) {
+                my @deps = get_deps($d);
+                if ( is_in( $acton, @deps ) ) {
+                    $d =~ m,/([^/]+).load$,;
+                    push @depending, $1;
+                }
+            }
+            if ( scalar @depending ) {
+                if ($force) {
+                    do_deps( $acton, @depending ) or return 0;
+                }
+                else {
+                    error(
+                        "The following modules depend on $acton ",
+                        "and need to be disabled first: @depending\n"
+                    );
+                    return 0;
+                }
+            }
+        }
+    }
+    elsif ( $act eq 'enable' ) {
+        my @depends = get_deps("$availdir/$acton$sffx");
+        warn_deps( $acton, @depends ) or return 0;
+    }
+
+    if ( $act eq 'enable' ) {
+        my $check = check_link( $tgt, $link );
+        if ( $check eq 'ok' ) {
+            if ($conflink) {
+
+                # handle .conf file
+                my $confcheck = check_link( $conftgt, $conflink );
+                if ( $confcheck eq 'ok' ) {
+                    info("$name $acton already enabled\n");
+                    return 1;
+                }
+                elsif ( $confcheck eq 'missing' ) {
+                    print "Enabling config file $acton.conf.\n";
+                    add_link( $conftgt, $conflink ) or return 0;
+                }
+                else {
+                    error(
+                        "Config file $acton.conf not properly enabled: $confcheck\n"
+                    );
+                    return 0;
+                }
+            }
+            else {
+                info("$name $acton already enabled\n");
+                return 1;
+            }
+        }
+        elsif ( $check eq 'missing' ) {
+            if ($conflink) {
+
+                # handle .conf file
+                my $confcheck = check_link( $conftgt, $conflink );
+                if ( $confcheck eq 'missing' ) {
+                    add_link( $conftgt, $conflink ) or return 0;
+                }
+                elsif ( $confcheck ne 'ok' ) {
+                    error(
+                        "Config file $acton.conf not properly enabled: $confcheck\n"
+                    );
+                    return 0;
+                }
+            }
+
+            print "Enabling $obj $acton.\n";
+            if ( $acton eq 'ssl' ) {
+                info(     "See @FINKPREFIX@/share/doc/apache2/README on "
+                        . "how to configure SSL and create self-signed certificates.\n"
+                );
+            }
+            return add_link( $tgt, $link )
+                && switch_marker( $obj, $act, $acton );
+        }
+        else {
+            error("$name $acton not properly enabled: $check\n");
+            return 0;
+        }
+    }
+    else {
+        if ( -e $link || -l $link ) {
+            if ($obj eq 'module' && grep {$_ eq $acton} @essential_module_list) {
+                  $force || essential_module_handling($acton);
+            }
+            remove_link($link);
+            if ( $conflink && -e $conflink ) {
+                remove_link($conflink);
+            }
+            switch_marker( $obj, $act, $acton );
+            print "$name $acton disabled.\n";
+        }
+        elsif ( $conflink && -e $conflink ) {
+            print "Disabling stale config file $acton.conf.\n";
+            remove_link($conflink);
+        }
+        else {
+            info("$name $acton already disabled\n");
+            if ( $purge ) {
+                switch_marker( $obj, $act, $acton );
+            }
+            return 1;
+        }
+    }
+
+    return 1;
+}
+
+sub get_deps {
+    my $file = shift;
+    my $type = shift || "Depends";
+
+    my $fd;
+    if ( !open( $fd, '<', $file ) ) {
+        error("Can't open $file: $!");
+        return;
+    }
+    my $line;
+    while ( defined( $line = <$fd> ) ) {
+        chomp $line;
+        if ( $line =~ /^# $type:\s+(.*?)\s*$/ ) {
+            my $deps = $1;
+            return split( /[\n\s]+/, $deps );
+        }
+
+        # only check until the first non-empty non-comment line
+        last if ( $line !~ /^\s*(?:#.*)?$/ );
+    }
+    return;
+}
+
+sub do_deps {
+    my $acton = shift;
+    foreach my $d (@_) {
+        info("Considering dependency $d for $acton:\n");
+        if ( !doit($d) ) {
+            error("Could not $act dependency $d for $acton, aborting\n");
+            return 0;
+        }
+    }
+    return 1;
+}
+
+sub warn_deps {
+    my $acton = shift;
+    my $modsenabldir = $ENV{APACHE_MODS_ENABLED} || "$confdir/mods-enabled";
+    foreach my $d (@_) {
+        info("Checking dependency $d for $acton:\n");
+        if ( !-e "$modsenabldir/$d.load" ) {
+            warning(
+                "Module $d is not enabled, but $acton depends on it, aborting\n"
+            );
+            return 0;
+        }
+    }
+    return 1;
+}
+
+sub check_conflicts {
+    my $acton    = shift;
+    my $haderror = 0;
+    foreach my $d (@_) {
+        info("Considering conflict $d for $acton:\n");
+
+        my $tgt  = "$availdir/$d$sffx";
+        my $link = "$enabldir/$d$sffx";
+
+        my $confcheck = check_link( $tgt, $link );
+        if ( $confcheck eq 'ok' ) {
+            error(
+                "Module $d is enabled - cannot proceed due to conflicts. It needs to be disabled first!\n"
+            );
+
+            # Don't return immediately, there could be several conflicts
+            $haderror++;
+        }
+    }
+
+    if ($haderror) {
+        return 0;
+    }
+
+    return 1;
+}
+
+sub add_link {
+    my ( $tgt, $link ) = @_;
+
+    # create relative link
+    if ( !symlink( File::Spec->abs2rel( $tgt, dirname($link) ), $link ) ) {
+        die("Could not create $link: $!\n");
+    }
+    $request_reload = 1;
+    return 1;
+}
+
+sub check_link {
+    my ( $tgt, $link ) = @_;
+
+    if ( !-e $link ) {
+        if ( -l $link ) {
+
+            # points to nowhere
+            info("Removing dangling link $link");
+            unlink($link) or die "Could not remove $link\n";
+        }
+        return 'missing';
+    }
+
+    if ( -e $link && !-l $link ) {
+        return "$link is a real file, not touching it";
+    }
+    if ( realpath($link) ne realpath($tgt) ) {
+        return "$link exists but does not point to $tgt, not touching it";
+    }
+    return 'ok';
+}
+
+sub remove_link {
+    my ($link) = @_;
+
+    if ( -l $link ) {
+        unlink($link) or die "Could not remove $link: $!\n";
+    }
+    elsif ( -e $link ) {
+        error("$link is not a symbolic link, not deleting\n");
+        return 0;
+    }
+    $request_reload = 1;
+    return 1;
+}
+
+sub threaded {
+    my $result = "";
+    $result = qx{@FINKPREFIX@/sbin/apache2ctl -V | grep 'threaded'}
+        if -x '@FINKPREFIX@/sbin/apache2ctl';
+    if ( $? != 0 ) {
+
+        # config doesn't work
+        if ( -e "$enabldir/mpm_prefork.load" || -e "$enabldir/mpm_itk.load" )
+        {
+            return 0;
+        }
+        elsif (-e "$enabldir/mpm_worker.load"
+            || -e "$enabldir/mpm_event.load" )
+        {
+            return 1;
+        }
+        else {
+            error("Can't determine enabled MPM");
+
+            # do what user requested
+            return 0;
+        }
+    }
+    if ( $result =~ / no/ ) {
+        return 0;
+    }
+    elsif ( $result =~ / yes/ ) {
+        return 1;
+    }
+    else {
+        die("Can't parse output from apache2ctl -V:\n$result\n");
+    }
+}
+
+sub info {
+    print @_ if !$quiet;
+}
+
+sub error {
+    print STDERR 'ERROR: ', @_;
+}
+
+sub warning {
+    print STDERR 'WARNING: ', @_;
+}
+
+sub is_in {
+    my $needle = shift;
+    foreach my $e (@_) {
+        return 1 if $needle eq $e;
+    }
+    return 0;
+}
+
+sub read_env_file {
+    my $file = shift;
+
+    -r $file or return;
+    my @lines = qx{env - sh -c '. $file && env'};
+    if ($?) {
+        die "Could not read $file\n";
+    }
+
+    foreach my $l (@lines) {
+        chomp $l;
+        $l =~ /^(.*)?=(.*)$/ or die "Could not parse $file\n";
+        $ENV{$1} = $2;
+    }
+}
+
+sub switch_marker {
+    die('usage: switch_marker([module|site|conf], [enable|disable], $name)')
+        if @_ != 3;
+    my $which = shift;
+    my $what  = shift;
+    my $name  = shift;
+
+    my $mode = "admin";
+    $mode = "maint" if $maintmode;
+
+    #print("switch_marker $which $what $name\n");
+    # TODO: get rid of the magic string(s)
+    my $state_marker_dir = "$statedir/$what" . "d" . "_by_$mode";
+    my $state_marker     = "$state_marker_dir/$name";
+    if ( !-d $state_marker_dir ) {
+        File::Path::mkpath("$state_marker_dir")
+            || error(
+            "Failed to create marker directory: '$state_marker_dir'\n");
+    }
+
+    # XXX: swap find with perl alternative
+    my @markers = qx{find "$statedir" -type f -a -name "$name"};
+    chomp(@markers);
+    foreach (@markers) {
+        unless ( unlink $_ ) {
+            error("Failed to remove old marker '$_'!\n") && return 0;
+        }
+    }
+    unless ($purge) {
+        qx{touch "$state_marker"};
+        if ( $? != 0 ) {
+            error("Failed to create marker '$state_marker'!\n") && return 0;
+        }
+        return 1;
+    }
+}
+
+sub essential_module_handling {
+    my $module = shift;
+
+    print "WARNING: The following essential module will be disabled.\n";
+    print "This might result in unexpected behavior and should NOT be done\n";
+    print "unless you know exactly what you are doing!\n $module\n\n";
+    print "To continue type in the phrase 'Yes, do as I say!' or retry by passing '-f': ";
+    my $input = <STDIN>;
+    chomp($input);
+    if ($input ne 'Yes, do as I say!') {
+        print("Aborting\n");
+        exit(1)
+    }
+}
+# vim: syntax=perl sw=4 sts=4 sr et
diff -ruN httpd-2.4.10.orig/fink/a2query.in httpd-2.4.10/fink/a2query.in
--- httpd-2.4.10.orig/fink/a2query.in	1969-12-31 17:00:00.000000000 -0700
+++ httpd-2.4.10/fink/a2query.in	2015-04-24 10:48:28.000000000 -0600
@@ -0,0 +1,426 @@
+#! /usr/bin/perl
+
+# a2query - Apache2 helper to retrieve configuration informations
+# Copyright (C) 2012 Arno Töll <debian@toell.net>
+#
+# This program is licensed at your choice under the terms of the GNU General
+# Public License version 2+ or under the terms of the Apache Software License
+# 2.0.
+#
+# For GPL-2+:
+# This program is free software; you can redistribute it and/or
+# modify it under the terms of the GNU General Public License
+# as published by the Free Software Foundation; either version 2
+# of the License, or (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program; if not, write to the Free Software
+# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
+# USA.
+#
+# For ASF 2.0:
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+# http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+
+use feature "switch";
+use strict;
+use Getopt::Std;
+
+=head1 NAME
+
+a2query - retrieve runtime configuration from a local Apache 2 HTTP server
+
+=cut
+
+
+our $APACHE2 = "apache2ctl";
+our $API = "__API__";
+our $MODULE_DIR = "__MODULE_DIR__";
+our $SERVER_VERSION = "__SERVER_VERSION__";
+our $MODULE_DIR = "@FINKPREFIX@/lib/apache2/modules/";
+our $STATE_DIR = "@FINKPREFIX@/var/lib/apache2";
+our @STATES = ("maint", "admin");
+
+our $MPM = "invalid";
+our $CONFIG_DIR = "@FINKPREFIX@/etc/apache2";
+our $QUIET = 0;
+
+# time to introduce more _exit_ values
+our $E_OK = '0';
+our $E_FOUND = '0';
+our $E_NOTFOUND = '1';
+our $E_OFFBYADMIN = '32';
+our $E_OFFBYMAINT = '33';
+our @RETVALS = ( $E_OK, $E_FOUND, $E_OFFBYADMIN, $E_NOTFOUND, $E_OFFBYMAINT );
+
+our @MODULES = ();
+our @CONFS = ();
+our @SITES =();
+our @HELP = ();
+our %verbose_state = ( 'admin' => 'site administrator', 'maint' => 'maintainer script', 'unknown' => 'unknown' );
+
+=head1 SYNOPSIS
+
+B<a2query>  [S<-m> [I<MODULE>]] [S<-s> [I<SITE>]] [S<-c> [I<CONF>]] [S<-a>] [S<-v>]
+[S<-M>] [S<-d>] [S<-h>]
+
+=head1 DESCRIPTION
+
+B<a2query> is a program designed to retrieve configuration values from a locally
+available Apache 2 HTTP web server. It was designed to be as robust as possible
+by returning feasible values even if the Apache 2 syntax validator fails.
+
+This program is primarily meant to be used from maintainer scripts.
+
+=head1 OPTIONS
+
+=over 4
+
+=item S<-a>
+
+Returns the Apache 2 "Module Magic Version" (API version) number, the server was
+compiled with. The returned version does not contain any minor versions which
+are known to be compatible with the major version returned.
+
+=item S<-c> [I<CONF>]
+
+Checks whether the configuration I<CONF> is enabled. If no argument was given,
+all enabled configuration files are being returned. I<CONF> is compared by
+string comparison by ignoring a leading "mod_" prefix and possibly a '.conf' or
+'.load' suffix.
+
+=item S<-h>
+
+Displays a brief summary how the program can be called and exits.
+
+=item S<-m> [I<MODULE>]
+
+Checks whether the module I<MODULE> is enabled, The argument is interpreted in
+the same way, as for configuration files queried by the S<-c> switch.
+
+=item S<-M>
+
+Returns the currently enabled Apache 2 MPM (Multi Processing Module).
+
+=item S<-s> [I<SITE>]
+
+Checks whether the module I<SITE> is enabled, The argument is interpreted in
+the same way, as for configuration files queried by the S<-c> switch.
+
+
+=item S<-v>
+
+returns the currently installed Apache 2 HTTP server version
+
+=item S<-q>
+
+suppress any output. This is useful to invoke a2query from another script. This
+is useful if only the return code is of interest.
+
+=back
+
+=head1 EXIT CODES
+
+B<a2query> returns with a zero (S<0>) exit status if the requested operation was
+effectuated successfully and with a non-zero status otherwise. In case of an
+error it leaves with error code S<32> if a requested module, site or
+configuration was not found and S<33> if a module, site or configuration was
+disabled by a maintainer script. However, exit status S<1> is returned if the
+module was not found at all
+
+=head1 SEE ALSO
+
+L<apache2ctl>(8), L<apache2>(8), L<perl>(1)
+
+=head1 AUTHOR
+
+This manual and L<a2query> was written by Arno Toell <debian@toell.net>.
+
+=cut
+
+sub output
+{
+	print @_ unless $QUIET;
+}
+
+sub warning
+{
+	print STDERR @_ unless $QUIET;
+}
+
+sub fail
+{
+	die('usage: fail($reason, $retval)') if @_ != 2;
+	my $reason = shift;
+	my $retval = shift;
+	warning "$reason\n";
+	exit $retval;
+}
+
+sub load_defaults
+{
+	my @out = `$APACHE2 -V 2>/dev/null`;
+	return if $?;
+	for (my $line; $line <= $#out; $line++)
+	{
+		if ($out[$line] =~ m/(Server version|Server MPM|Magic Number):\s+(.*?)$/)
+		{
+			my ($pattern, $value) = ($1, $2);
+			if ($pattern =~ /version/)
+			{
+				$SERVER_VERSION = $value;
+				$SERVER_VERSION =~ s/[^\d\.]//g;
+			}
+			elsif($pattern =~ /MPM/)
+			{
+				$MPM = $value;
+			}
+			elsif($pattern =~ /Magic/)
+			{
+				$API = $value;
+				$API =~ s/\:\d+//;
+			}
+		}
+	}
+
+}
+
+sub load_modules
+{
+	my $conf_dir = $CONFIG_DIR . "/mods-enabled";
+	opendir(DIR, $conf_dir) || fail("$conf_dir: $!", 1);
+	while( readdir(DIR) )
+	{
+		my $file = $_;
+		next if $file !~ m/\.load$/;
+		$file =~ s/\.load//;
+		if ($file =~ /mpm_(\w+)/ && $file ne 'mpm_itk')
+		{
+			$MPM = $1 if $MPM eq 'invalid';
+			if(grep { $_ =~ m/^mpm_/ } @MODULES)
+			{
+				fail("There is more than one MPM loaded. Do not proceed due to undefined results", 1);
+			}
+		}
+		push @MODULES, $file;
+	}
+	closedir(DIR);
+}
+
+
+sub load_conf
+{
+	if ($#CONFS >= 0)
+	{
+		return;
+	}
+	my $conf_dir = $CONFIG_DIR . "/conf-enabled";
+	opendir(DIR, $conf_dir) || fail("$conf_dir: $!", 1);
+	while( readdir(DIR) )
+	{
+		my $file = $_;
+		next if $file !~ m/\.conf$/;
+		$file =~ s/\.conf$//;
+		push @CONFS, $file;
+	}
+	closedir(DIR);
+}
+
+
+sub load_sites
+{
+	if ($#SITES >= 0)
+	{
+		return;
+	}
+	my $conf_dir = $CONFIG_DIR . "/sites-enabled";
+	opendir(DIR, $conf_dir) || fail("$conf_dir: $!", 1);
+	while( readdir(DIR) )
+	{
+		my $file = $_;
+		next if $file !~ m/\.conf$/;
+		$file =~ s/\.conf$//;
+		push @SITES, $file;
+	}
+	closedir(DIR);
+}
+
+sub switch_history
+{
+	die('usage: switch_history([module|site|conf], [enabled|disabled], $name)') if @_ != 3;
+	my $which = shift;
+	my $what = shift;
+	my $name = shift;
+
+	$name =~ s/\.conf$//;
+
+	foreach my $state (@STATES)
+	{
+		my $state_token = "$STATE_DIR/$which/$what" . "_by_$state/" . $name;
+		if (-e $state_token)
+		{
+			return $state;
+		}
+	}
+	return 0;
+}
+
+
+sub query_state
+{
+	my $type    = shift;
+	my $pattern = shift;
+	my $listref = shift;
+
+	$pattern =~ s/^mod//;
+	$pattern =~ s/\.(conf|load)//;
+	my @candidates;
+
+	if ($pattern)
+	{
+		@candidates = grep { $_ eq $pattern } @{ $listref };
+	}
+	else
+	{
+		@candidates = @{ $listref }
+	}
+
+	my $matches = 0;
+	foreach my $module (@candidates)
+	{
+		my $state = switch_history($type, "enabled", $module);
+		if (!$state)
+		{
+			$state = "unknown";
+		}
+		output("$module (enabled by $verbose_state{$state})\n");
+		$matches++;
+	}
+	if (!$matches)
+	{
+		my $reason = "No $type matches $pattern";
+		my $retval = $E_NOTFOUND;
+		my $state = switch_history($type, "disabled", $pattern);
+		if ($state)
+		{
+			$reason .= " (disabled by $verbose_state{$state})";
+			if ($state eq 'maint')
+			{
+				$retval = $E_OFFBYMAINT;
+			}
+			if ($state eq 'admin')
+			{
+				$retval = $E_OFFBYADMIN;
+			}
+		}
+		fail($reason, $retval);
+	}
+}
+
+load_defaults();
+load_modules();
+
+my %opts;
+my $help = 1;
+getopts('m:s:c:havMdq', \%opts);
+#foreach my $key (keys %opts) { print("$key=$opts{$key}\n");}
+
+push @HELP, ["q", "suppress any output. Useful for invocation from scripts"];
+if (exists $opts{'q'})
+{
+	--$help;
+	$QUIET=1;
+}
+
+push @HELP, ["m [MODULE]", "checks whether the module MODULE is enabled, lists all enabled modules if no argument was given"];
+if (exists $opts{'m'})
+{
+	--$help;
+	query_state('module', $opts{'m'}, \@MODULES);
+}
+
+push @HELP, ["s [SITE]", "checks whether the site SITE is enabled, lists all sites if no argument was given"];
+if (exists $opts{'s'})
+{
+	--$help;
+	load_sites();
+	query_state('site', $opts{'s'}, \@SITES);
+}
+
+
+push @HELP, ["c [CONF]", "checks whether the configuration CONF is enabled, lists all configurations if no argument was given"];
+if (exists $opts{'c'})
+{
+	--$help;
+	load_conf();
+	query_state('conf', $opts{'c'}, \@CONFS);
+}
+
+
+push @HELP, ["a", "returns the current Apache 2 module magic version"];
+if (exists $opts{'a'})
+{
+	--$help;
+	output("$API\n");
+}
+
+
+push @HELP, ["v", "returns the current Apache 2 version"];
+if (exists $opts{'v'})
+{
+	--$help;
+	output("$SERVER_VERSION\n");
+}
+
+push @HELP, ["M", "returns the enabled Apache 2 MPM"];
+if (exists $opts{'M'})
+{
+	--$help;
+	output("$MPM\n");
+}
+
+push @HELP, ["d", "returns the Apache 2 module directory"];
+if (exists $opts{'d'})
+{
+	--$help;
+	output("$MODULE_DIR\n");
+}
+
+push @HELP, ["h", "display this help"];
+if (exists $opts{'h'} or $help == 1)
+{
+	my $usage = "$0 ";
+	map { $usage .= "-$_->[0] " } @HELP;
+	print("Usage: $usage\n");
+	my $switch_name;
+	my $description;
+	format STDOUT =
+@<<<<<<<<<<<<	^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
+"-$switch_name",        $description,
+~~	        ^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
+			$description,
+.
+	foreach my $switch (@HELP)
+	{
+		($switch_name, $description) = ($switch->[0], $switch->[1]);
+		write STDOUT;
+	}
+	exit $E_OK;
+}
+
+# vim: syntax=perl sw=8 sts=8 sr noet
diff -ruN httpd-2.4.10.orig/fink/apache2ctl httpd-2.4.10/fink/apache2ctl
--- httpd-2.4.10.orig/fink/apache2ctl	1969-12-31 17:00:00.000000000 -0700
+++ httpd-2.4.10/fink/apache2ctl	2013-08-07 21:14:10.000000000 -0600
@@ -0,0 +1,183 @@
+#!/bin/sh
+#
+# Licensed to the Apache Software Foundation (ASF) under one or more
+# contributor license agreements.  See the NOTICE file distributed with
+# this work for additional information regarding copyright ownership.
+# The ASF licenses this file to You under the Apache License, Version 2.0
+# (the "License"); you may not use this file except in compliance with
+# the License.  You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+#
+# Apache control script designed to allow an easy command line interface
+# to controlling Apache.  Written by Marc Slemko, 1997/08/23
+#
+# Heavily modified for Debian by Stefan Fritsch 2007-2010
+# 
+# The exit codes returned are:
+#   XXX this doc is no longer correct now that the interesting
+#   XXX functions are handled by httpd
+#	0 - operation completed successfully
+#	1 - 
+#	2 - usage error
+#	3 - httpd could not be started
+#	4 - httpd could not be stopped
+#	5 - httpd could not be started during a restart
+#	6 - httpd could not be restarted during a restart
+#	7 - httpd could not be restarted during a graceful restart
+#	8 - configuration syntax error
+#
+# When multiple arguments are given, only the error from the _last_
+# one is reported.  Run "apachectl help" for usage info
+#
+ARGV="$@"
+#
+# |||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
+# --------------------                              --------------------
+#
+# main configuration directory
+if test -z "$APACHE_CONFDIR" ; then
+	if test "${0##*apache2ctl-}" != "$0" ; then
+		APACHE_CONFDIR="@FINKPREFIX@/etc/apache2-${0##*apache2ctl-}"
+	else
+		APACHE_CONFDIR=@FINKPREFIX@/etc/apache2
+	fi
+fi
+# the path to the environment variable file
+test -z "$APACHE_ENVVARS" && APACHE_ENVVARS="$APACHE_CONFDIR/envvars"
+# pick up any necessary environment variables
+if test -f $APACHE_ENVVARS; then
+  . $APACHE_ENVVARS
+fi
+
+if test "$APACHE_CONFDIR" != @FINKPREFIX@/etc/apache2 ; then
+	APACHE_ARGUMENTS="-d $APACHE_CONFDIR $APACHE_ARGUMENTS"
+fi
+# the following APACHE_* variables should be set in @FINKPREFIX@/etc/apache2/envvars
+#
+# the path to your httpd binary, including options if necessary
+HTTPD=${APACHE_HTTPD:-@FINKPREFIX@/sbin/apache2}
+#
+# a command that outputs a formatted text version of the HTML at the
+# url given on the command line.  Designed for lynx, however other
+# programs may work.  
+LYNX="${APACHE_LYNX:-www-browser -dump}"
+#
+# the URL to your server's mod_status status page.  If you do not
+# have one, then status and fullstatus will not work.
+STATUSURL="${APACHE_STATUSURL:-http://localhost:80/server-status}"
+#
+# Set this variable to a command that increases the maximum
+# number of file descriptors allowed per child process. This is
+# critical for configurations that use many file descriptors,
+# such as mass vhosting, or a multithreaded server.
+ULIMIT_MAX_FILES="${APACHE_ULIMIT_MAX_FILES:-ulimit -n 8192}"
+# --------------------                              --------------------
+# ||||||||||||||||||||   END CONFIGURATION SECTION  ||||||||||||||||||||
+
+# Set the maximum number of file descriptors allowed per child process.
+if [ "x$ULIMIT_MAX_FILES" != "x" ] && [ `id -u` -eq 0 ] ; then
+    if ! $ULIMIT_MAX_FILES ; then
+        echo Setting ulimit failed. See README for more information. >&2
+    fi
+fi
+
+ERROR=0
+if [ "x$ARGV" = "x" ] || [ "x$ARGV" = "xusage" ] || [ "x$ARGV" = "xhelp" ] || [ "x$ARGV" = "x--help" ]; then 
+    echo "Usage: $0 start|stop|restart|graceful|graceful-stop|configtest|status|fullstatus|help" >&2
+    echo "       $0 <apache2 args>" >&2
+    echo "       $0 -h            (for help on <apache2 args>)" >&2
+    exit 1
+fi
+
+get_status () {
+    if ! $LYNX $STATUSURL ; then
+        echo "'$LYNX $STATUSURL'" failed. >&2
+        echo Maybe you need to install a package providing www-browser or you >&2
+        echo need to adjust the APACHE_LYNX variable in @FINKPREFIX@/etc/apache2/envvars >&2
+        exit 1
+    fi
+}
+
+mkdir_chown () {
+    local OWNER="$1"
+    local DIR="$2"
+    local STAT="$(LC_ALL=C stat -c %F:%U $DIR 2> /dev/null || true)"
+    if [ "$STAT" = "" ] ; then
+        local TMPNAME=$(gmktemp -d $DIR.XXXXXXXXXX) || exit 1
+        chmod 755 $TMPNAME || exit 1
+        chown $OWNER $TMPNAME || exit 1
+        if ! mv -T $TMPNAME $DIR 2> /dev/null; then
+            rmdir $TMPNAME
+            # check for race with other apachectl
+            if [ "$(LC_ALL=C stat -f %HT: $DIR 2>/dev/null)$(LC_ALL=C stat -f %u $DIR 2>/dev/null | /usr/bin/xargs /usr/bin/id -n -u 2>/dev/null)" != "Directory:$OWNER" ]
+            then
+                echo Cannot create $DIR with owner $OWNER.
+                echo Please fix manually. Aborting.
+                exit 1
+            fi
+        fi
+    elif [ "$STAT" != "directory:$OWNER" ] ; then
+        echo $DIR already exists but is not a directory owned by $OWNER.
+        echo Please fix manually. Aborting.
+        exit 1
+    fi
+}
+
+
+[ ! -d ${APACHE_RUN_DIR:-@FINKPREFIX@/var/run/apache2} ] && mkdir -p ${APACHE_RUN_DIR:-@FINKPREFIX@/var/run/apache2}
+[ ! -d ${APACHE_LOCK_DIR:-@FINKPREFIX@/var/lock/apache2} ] && mkdir_chown ${APACHE_RUN_USER:-www} ${APACHE_LOCK_DIR:-@FINKPREFIX@/var/lock/apache2}
+
+case $ARGV in
+start)
+    # ssl_scache shouldn't be here if we're just starting up.
+    # (this is bad if there are several apache2 instances running)
+    rm -f ${APACHE_RUN_DIR:-@FINKPREFIX@/var/run/apache2}/*ssl_scache*
+    $HTTPD ${APACHE_ARGUMENTS} -k $ARGV
+    ERROR=$?
+    ;;
+stop|graceful-stop)
+    $HTTPD ${APACHE_ARGUMENTS} -k $ARGV
+    ERROR=$?
+    ;;
+restart|graceful)
+    if $HTTPD ${APACHE_ARGUMENTS} -t 2> /dev/null ; then
+        $HTTPD ${APACHE_ARGUMENTS} -k $ARGV
+    else
+        $HTTPD ${APACHE_ARGUMENTS} -t
+    fi
+    ERROR=$?
+    ;;
+startssl|sslstart|start-SSL)
+    echo The startssl option is no longer supported.
+    echo Please edit httpd.conf to include the SSL configuration settings
+    echo and then use "apache2ctl start".
+    ERROR=2
+    ;;
+configtest)
+    $HTTPD ${APACHE_ARGUMENTS} -t
+    ERROR=$?
+    ;;
+status)
+    get_status | awk ' /process$/ { print; exit } { print } '
+    ;;
+fullstatus)
+    get_status
+    ;;
+*)
+    $HTTPD ${APACHE_ARGUMENTS} $ARGV
+    ERROR=$?
+esac
+
+if [ "$ERROR" != 0 ] ; then
+	echo Action \'"$@"\' failed.
+	echo The Apache error log may have more information.
+fi
+exit $ERROR
diff -ruN httpd-2.4.10.orig/fink/debhelper/apache2-maintscript-helper httpd-2.4.10/fink/debhelper/apache2-maintscript-helper
--- httpd-2.4.10.orig/fink/debhelper/apache2-maintscript-helper	1969-12-31 17:00:00.000000000 -0700
+++ httpd-2.4.10/fink/debhelper/apache2-maintscript-helper	2015-04-25 22:53:47.000000000 -0600
@@ -0,0 +1,497 @@
+# apache2-maintscript-helper - Apache2 helper function for maintainer scripts
+# Copyright (C) 2012 Arno Töll <debian@toell.net>
+#
+# Permission is hereby granted, free of charge, to any person obtaining a copy of
+# this software and associated documentation files (the "Software"), to deal in
+# the Software without restriction, including without limitation the rights to
+# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+# the Software, and to permit persons to whom the Software is furnished to do so,
+# subject to the following conditions:
+#
+# The above copyright notice and this permission notice shall be included in all
+# copies or substantial portions of the Software.
+#
+# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+
+
+#
+# VARIABLES
+#
+
+
+# global environment variables used by apache2-maintscript-helper:
+# * APACHE2_MAINTSCRIPT_DEBUG:
+#				set this to any non-zero value to get debug output
+# * APACHE2_MAINTSCRIPT_HELPER_QUIET:
+#				set this to any non-zero value to omit any output
+# * EXPORT_APACHE2_MAINTSCRIPT_HELPER:
+#				will be defined by apache2-maintscript-helper
+#				to avoid inclusion loops. Do not set this
+#				variable manually
+# * APACHE2_NEED_ACTION:
+#				will be defined if a function call wants to
+#				override the behavior of apache2_needs_action.
+#				Do not rely on this variable. It is considered
+#				an implementation detail.
+# * APACHE2_MAINTSCRIPT_NAME
+# * APACHE2_MAINTSCRIPT_PACKAGE
+# * APACHE2_MAINTSCRIPT_METHOD
+# * APACHE2_MAINTSCRIPT_ARGUMENT
+#				these variables contain information about the
+#				maintainer script which is calling the
+#				maintscript-helper. It contains arguments which
+#				dpkg supplies to maintainer scripts and similar
+#				information. These variables are an
+#				implementation detail and not to be changed.
+#
+#				You might want to set them manually only if you
+#				are calling apache2-maintscript-helper from
+#				some place which does not preserve the original
+#				script arguments for example when calling from
+#				a subfunction instead of the main function in
+#				your maintainer script
+
+#
+# INITIALIZATION
+#
+
+if [ -n "${EXPORT_APACHE2_MAINTSCRIPT_HELPER:-}" ] ; then
+	return
+else
+	EXPORT_APACHE2_MAINTSCRIPT_HELPER=1
+
+	if [ -n "${APACHE2_MAINTSCRIPT_DEBUG:-}" ] ; then
+		set -x
+	elif [ -e @FINKPREFIX@/etc/apache2/envvars ] ; then
+		APACHE2_MAINTSCRIPT_DEBUG=$(. @FINKPREFIX@/etc/apache2/envvars && echo ${APACHE2_MAINTSCRIPT_DEBUG})
+		if [ -n "${APACHE2_MAINTSCRIPT_DEBUG:-}" ] ; then
+			set -x
+		fi
+	fi
+
+	APACHE2_MAINTSCRIPT_DEFER=
+	if ! dpkg-query -f '${Status}' -W apache2|grep -q installed; then
+		echo "Package apache2 is not configured yet. Will defer actions by package $DPKG_MAINTSCRIPT_PACKAGE."
+		APACHE2_MAINTSCRIPT_DEFER=@FINKPREFIX@/var/lib/apache2/deferred_actions
+	fi
+
+	if [ -z "$1" ] ; then
+		echo "You must invoke apache2-maintscript-helper with an unmodified environment when sourcing it" >&2
+		return 1
+	fi
+
+	APACHE2_MAINTSCRIPT_NAME="$DPKG_MAINTSCRIPT_NAME"
+	[ "$APACHE2_MAINTSCRIPT_NAME" ] || APACHE2_MAINTSCRIPT_NAME="${0##*.}"
+
+	case "$APACHE2_MAINTSCRIPT_NAME" in
+		preinst|prerm|postrm|postinst)
+			# yay - recognized script
+		;;
+		*)
+			echo "apache2-maintscript-helper invoked from an unrecognized maintainer script: exiting" >&2
+			return 1
+		;;
+	esac
+
+	APACHE2_MAINTSCRIPT_PACKAGE="$DPKG_MAINTSCRIPT_PACKAGE"
+	if [ -z "$APACHE2_MAINTSCRIPT_PACKAGE" ]; then
+		APACHE2_MAINTSCRIPT_PACKAGE="${0##*/}"
+		APACHE2_MAINTSCRIPT_PACKAGE="${APACHE2_MAINTSCRIPT_PACKAGE%.*}"
+	fi
+
+	if [ -z "$APACHE2_MAINTSCRIPT_METHOD" ] ; then
+		APACHE2_MAINTSCRIPT_METHOD="$1"
+	fi
+
+	case "$APACHE2_MAINTSCRIPT_METHOD" in
+		install|upgrade|abort-upgrade|configure|abort-remove|abort-remove|abort-deconfigure|remove|failed-upgrade|purge|disappear|abort-install|triggered)
+			# yay - recognized script
+		;;
+		*)
+			echo "apache2-maintscript-helper invoked from a modified environment. Please hint required arguments manually" >&2
+			return 1
+		;;
+	esac
+
+
+
+	if [ -z "$APACHE2_MAINTSCRIPT_ARGUMENT" ] ; then
+		APACHE2_MAINTSCRIPT_ARGUMENT="${2:-}"
+	fi
+
+fi
+
+
+
+#
+# FUNCTIONS
+#
+
+
+#
+# Function apache2_msg
+#	print out a warning to both, the syslog and a local standard output.
+#	This function should generally be used to display messages related to
+#	the web server in maintainer scripts.
+# Parameters:
+#	priority
+#		The message priority. Recognized values are the same as defined
+#		by syslog(3), thus: one among debug, info, notice, warning,
+#		err, crit, alert, emerg.
+#		If no known priority is recognized, the priority is set to
+#		"warning".
+#	message
+#		The message as a string. It is printed out verbatim.
+# Behavior:
+#	No message is displayed if APACHE2_MAINTSCRIPT_HELPER_QUIET is defined
+# Returns:
+#	this function always returns 0
+# Since: 2.4.1-3
+apache2_msg()
+{
+	local PRIORITY="$1"
+	local MSG="$2"
+	[ -z "$APACHE2_MAINTSCRIPT_HELPER_QUIET" ] && echo "$MSG" >&2
+	[ -x /usr/bin/logger ] || return 0
+	case "$PRIORITY" in
+		debug|info|notice|warning|err|crit|alert|emerg)
+		;;
+		*)
+			PRIORITY="warning"
+		;;
+	esac
+	local LOGGER="/usr/bin/logger -p daemon.$PRIORITY -t $APACHE2_MAINTSCRIPT_PACKAGE "
+	$LOGGER "$MSG" || return 0
+}
+
+#
+# Function apache2_needs_action
+#	succeeds if the package invoking the maintscript helper
+#	needs any work. This function can be used as a conditional whether a
+#	certain function should be executed by means of the package state.
+#	Note, calling some other functions may change the outcome of this
+#	function, depending on the action required
+#Parameters:
+#	none
+# Returns:
+#	0 if an older version of the maintainer script invoking the helper is
+#	already installed
+#	1 otherwise
+# Since: 2.4.1-3
+apache2_needs_action()
+{
+	# Summary how the maintscript behaves:
+	# preinst:
+	#	Not sure why anyone would like to call this function in preinst. Die loud.
+	# prerm remove:
+	#	Basically the same as postrm. If a maintainer would like to
+	#	disable his module before removing his stuff, be it.
+	#	However, we have nothing useful to do if we're called in any
+	#	other way than "remove" in prerm.
+	# postinst configure
+	#	Probably the most important invokation. When invoked in configure we:
+	#	- enable the piece of configuration on fresh installs
+	#	- do nothing on upgrades UNLESS the configuration was removed automatically in the past
+	# postrm remove|purge
+	#	- disable the configuration, mark it as automatically disabled in remove
+	#	- disable the configuration, remove any trace we have on purge
+
+	case "$APACHE2_MAINTSCRIPT_NAME" in
+	preinst)
+		apache2_msg "info" "apache2_needs_action: The maintainer helper can not be called in preinst"
+		return 1
+		;;
+	prerm|postrm)
+		case "$APACHE2_MAINTSCRIPT_METHOD" in
+		remove|purge)
+			return 0
+			;;
+		*)
+			return 1
+			;;
+		esac
+		;;
+	postinst)
+		if [ "$APACHE2_MAINTSCRIPT_METHOD" = "configure" ] ; then
+			# act on fresh installs
+			[ -z "$APACHE2_MAINTSCRIPT_ARGUMENT" ] && return 0
+			# act if someone told us
+			[ -n "$APACHE2_NEED_ACTION" ] && return 0
+		fi
+		;;
+	esac
+
+	return 1
+}
+
+
+
+#
+# Function apache2_has_module
+#	checks whether a supplied module is enabled in the current Apache server
+#	configuration
+# Parameters:
+#	module - the module name which should be checked. Can be a regular
+#		string or a Perl compatible regular expression e.g. cgi(d|)
+# Returns:
+#	0 if the module(s) was/were found
+#	1 otherwise
+# Since: 2.4.1-1
+apache2_has_module()
+{
+	[ -x @FINKPREFIX@/sbin/a2query ] || return 1
+	local MODULE="$1"
+	if a2query -m "$MODULE" > /dev/null ; then
+		return 0
+	fi
+
+	return 1
+}
+
+#
+# Function apache2_switch_mpm
+#	switches the MPM enabled on the web server. This function switches the
+#	MPM unconditionally but does careful checks to make sure the web server
+#	is left back with a working MPM.
+#	It checks whether the supplied MPM exists and enables it on purpose.
+# Parameters:
+#	mpm - change the MPM to the supplied argument. It should be given
+#	without "mpm_" prefix, e.g. "worker", "prefork", and so on.
+# Returns:
+#	0 if the MPM could be changed
+#	1 otherwise
+# Since: 2.4.1-1
+apache2_switch_mpm()
+{
+	[ -x @FINKPREFIX@/sbin/a2query ] || return 1
+	[ -x @FINKPREFIX@/sbin/a2dismod ] || return 1
+	[ -x @FINKPREFIX@/sbin/a2enmod ] || return 1
+
+	local MPM="$1"
+	MPM="${MPM#mpm_}"
+
+	if [ -n "$APACHE2_MAINTSCRIPT_DEFER" ] ; then
+		echo "$APACHE2_MAINTSCRIPT_PACKAGE apache2_switch_mpm $*" >> $APACHE2_MAINTSCRIPT_DEFER
+		return 0
+	fi
+
+	if [ ! -e "@FINKPREFIX@/etc/apache2/mods-available/mpm_$MPM.load" ] ; then
+		apache2_msg "err" "apache2_switch_mpm: MPM $MPM not found"
+		return 1
+	fi
+
+	local CUR_MPM=$(a2query -M) || return 1
+
+	if [ $CUR_MPM != $MPM ] ; then
+		a2dismod -m -q "mpm_$CUR_MPM";
+		a2enmod -m -q "mpm_$MPM";
+		apache2_msg "info" "apache2_switch_mpm Switch to $MPM"
+	else
+		apache2_msg "info" "apache2_switch_mpm $MPM: No action required"
+		return 0
+	fi
+
+	if ! apache2_has_module "mpm_$MPM" ; then
+		# rollback
+		a2enmod -m -q "mpm_$CUR_MPM"
+		apache2_msg "warning" "apache2_switch_mpm Switch to $MPM failed. Rolling back to $CUR_MPM"
+		return 1
+	fi
+
+
+	APACHE2_NEED_ACTION=1
+	apache2_reload restart
+	return 0
+
+}
+
+#
+# Function apache2_invoke
+#	invokes an Apache 2 configuration helper to enable or disable a
+#	particular piece of configuration, a site or a module. It carefully
+#	checks whether the supplied configuration snippet exists and reloads the
+#	web server if the site administrator desires that by calling the
+#	apache2_reload function.
+# Parameters:
+#	command - The command to invoke. Recognized commands are "enconf",
+#		"enmod", "ensite", "disconf", "dismod", "dissite"
+#	arguments
+#		- A single argument (e.g. a module) which shall be
+#		  enabled or disabled respectively. Do not enable module
+#		  dependencies that way, instead use module dependencies as
+#		  documented in <@FINKPREFIX@/share/doc/apache2/PACKAGING>.
+#	rcd-action
+#		- An optional rc.d action to override the default which is to
+#		  reload the web server for sites and configurations but restart
+#		  it for modules. Recognized arguments are "restart" and "reload"
+# Returns
+#	0 if the changes could be activated
+#	1 otherwise
+# Since: 2.4.1-3
+# Changes: 2.4.2-2: Added the second, optional argument
+#          2.4.6-4: Allow apache2_invoke to disable configuration in preinst/postinst
+apache2_invoke()
+{
+	local CMD=$1
+	local CONF=$2
+	local RCD_ACTION=$3
+	local invoke_rcd=0
+	local check_switch=""
+	local invoke_string=""
+
+	[ -x "@FINKPREFIX@/sbin/a2$CMD" ] || return 1
+	[ -x "@FINKPREFIX@/sbin/a2query" ] || return 1
+
+	if [ -n "$APACHE2_MAINTSCRIPT_DEFER" ] ; then
+		echo "$APACHE2_MAINTSCRIPT_PACKAGE apache2_invoke $*" >> $APACHE2_MAINTSCRIPT_DEFER
+		return 0
+	fi
+
+	case "${RCD_ACTION:-}" in
+		""|reload|restart)
+			;;
+		*)
+			return 1
+			;;
+	esac
+
+	case "$CMD" in
+		*conf)
+			check_switch="-c"
+			invoke_string="configuration"
+			rcd_action="${RCD_ACTION:-reload}"
+			;;
+		*mod)
+			check_switch="-m"
+			invoke_string="module"
+			rcd_action="${RCD_ACTION:-restart}"
+			;;
+		*site)
+			check_switch="-s"
+			invoke_string="site"
+			rcd_action="${RCD_ACTION:-reload}"
+			;;
+		*)
+			;;
+	esac
+
+
+	case "$CMD" in
+		enconf|enmod|ensite)
+			local a2query_ret=0
+			a2query $check_switch "$CONF" > /dev/null 2>&1 || a2query_ret=$?
+			if [ "$a2query_ret" -eq 0 ] ; then
+				# configuration is already enabled
+				apache2_msg "info" "apache2_invoke $CONF: already enabled"
+				APACHE2_NEED_ACTION=1
+			elif [ "$a2query_ret" -eq 32	 ] ; then
+				# the maintainer disabled the module
+				apache2_msg "info" "apache2_invoke $CONF: no action - $invoke_string was disabled by maintainer"
+				return 0
+			else
+				# coming here either means:
+				# a) we have no clue about the module (e.g. for upgrades prior to maintscript-helper
+				# b) it's a fresh install
+				APACHE2_NEED_ACTION=1
+				a2$CMD -m -q "$CONF" > /dev/null 2>&1 || return 1
+				apache2_msg "info" "apache2_invoke: Enable $invoke_string $CONF"
+			fi
+			;;
+		disconf|dismod|dissite)
+			local a2query_ret=0
+			a2query $check_switch "$CONF" > /dev/null 2>&1 || a2query_ret=$?
+			if [ "$a2query_ret" -eq 0 ] ; then
+				if [ "$APACHE2_MAINTSCRIPT_NAME" = 'postrm' ] && [ "$APACHE2_MAINTSCRIPT_METHOD" = "purge" ] ; then
+					a2$CMD -p -f -q "$CONF" || return 1
+					apache2_msg "info" "apache2_invoke $APACHE2_MAINTSCRIPT_NAME: Purging $invoke_string $CONF"
+					APACHE2_NEED_ACTION=1
+				elif [ "$APACHE2_MAINTSCRIPT_NAME" = 'postrm' ] || [ "$APACHE2_MAINTSCRIPT_NAME" = 'prerm' ] ||
+				     [ "$APACHE2_MAINTSCRIPT_NAME" = 'postinst' ] || [ "$APACHE2_MAINTSCRIPT_NAME" = 'preinst' ] ; then
+					if [ "$APACHE2_MAINTSCRIPT_METHOD" = "remove" ] ; then
+						a2$CMD -m -f -q "$CONF" || return 1
+						apache2_msg "info" "apache2_invoke $APACHE2_MAINTSCRIPT_NAME: Disable $invoke_string $CONF"
+						APACHE2_NEED_ACTION=1
+					fi
+				else
+					apache2_msg "error" "apache2_invoke: $invoke_string $CONF not supported in $APACHE2_MAINTSCRIPT_NAME"
+					return 1
+				fi
+			elif [ "$a2query_ret" -eq 32 ] || [ "$a2query_ret" -eq 33 ] ; then
+				if [ "$APACHE2_MAINTSCRIPT_NAME" = 'postrm' ] && [ "$APACHE2_MAINTSCRIPT_METHOD" = "purge" ] ; then
+					apache2_msg "info" "apache2_invoke $APACHE2_MAINTSCRIPT_NAME: Purging state for $CONF"
+					# this will return RC=1
+					( a2$CMD -p -f -q "$CONF" > /dev/null 2>&1 )
+				else
+					apache2_msg "info" "apache2_invoke $CONF $APACHE2_MAINTSCRIPT_NAME: No action required"
+				fi
+			else
+				apache2_msg "info" "apache2_invoke $CONF $APACHE2_MAINTSCRIPT_NAME: No action required"
+			fi
+			;;
+		*)
+			return 1
+			;;
+	esac
+
+	if [ -n "${APACHE2_NEED_ACTION:-}" ] ; then
+		apache2_reload $rcd_action
+	fi
+
+}
+
+#
+# Function apache2_reload
+#	reloads the web server to activate a changed configuration. It does not
+#	actually reload the web server if the current configuration fails to
+#	parse.
+# Parameters:
+#	action - optional, can be 'reload' (default) or 'restart'
+# Returns:
+#	0 if the changes could be activated
+#	1 otherwise
+# Since: 2.4.1-1
+apache2_reload()
+{
+	if ! apache2_needs_action ; then
+		return 0
+	fi
+	if [ -n "$APACHE2_MAINTSCRIPT_DEFER" ] ; then
+		return 0
+	fi
+
+	local action
+	case "${1:-}" in
+	""|reload)
+		# For fink we don't have invoke.d so reload doesn't exist
+		action=restart
+		;;
+	restart)
+		action=restart
+		;;
+	*)
+		return 1
+		;;
+	esac
+
+	local tmpfile=$(gmktemp)
+	if apache2ctl configtest > $tmpfile 2>&1; then
+		apache2ctl $action || true
+	else
+		apache2_msg "err" "apache2_reload: Your configuration is broken. Not ${action}ing Apache 2"
+		grep -v -e "Action 'configtest' failed." \
+			-e "The Apache error log may have more information." \
+			$tmpfile |
+			while read LINE ; do
+				apache2_msg "err" "apache2_reload: $LINE"
+			done
+	fi
+	rm -f $tmpfile
+}
+
+# vim: syntax=sh sw=8 sts=8 sr noet
diff -ruN httpd-2.4.10.orig/fink/patches/fink_layout.patch httpd-2.4.10/fink/patches/fink_layout.patch
--- httpd-2.4.10.orig/fink/patches/fink_layout.patch	1969-12-31 17:00:00.000000000 -0700
+++ httpd-2.4.10/fink/patches/fink_layout.patch	2013-08-07 10:28:13.000000000 -0600
@@ -0,0 +1,36 @@
+--- httpd-2.4.6.orig/config.layout	2012-04-17 08:01:41.000000000 -0600
++++ httpd-2.4.6/config.layout	2013-08-07 10:27:49.000000000 -0600
+@@ -274,10 +274,10 @@
+   proxycachedir: ${datadir}/proxy
+ </Layout>
+ 
+-# Debian layout
+-<Layout Debian>
++# Fink layout
++<Layout Fink>
+     prefix:        
+-    exec_prefix:   ${prefix}/usr
++    exec_prefix:   ${prefix}
+     bindir:        ${exec_prefix}/bin
+     sbindir:       ${exec_prefix}/sbin
+     libdir:        ${exec_prefix}/lib
+@@ -286,16 +286,16 @@
+     sysconfdir:    ${prefix}/etc/apache2
+     datadir:       ${exec_prefix}/share/apache2
+     iconsdir:      ${datadir}/icons
+-    htdocsdir:     ${prefix}/usr/share/apache2/default-site/htdocs
++    htdocsdir:     ${prefix}/share/apache2/default-site/htdocs
+     manualdir:     ${htdocsdir}/manual
+-    cgidir:        ${prefix}/usr/lib/cgi-bin
++    cgidir:        ${prefix}/lib/cgi-bin
+     includedir:    ${exec_prefix}/include/apache2
+     localstatedir: ${prefix}/var/lock/apache2
+     runtimedir:    ${prefix}/var/run/apache2
+     logfiledir:    ${prefix}/var/log/apache2
+     proxycachedir: ${prefix}/var/cache/apache2/proxy
+     infodir:       ${exec_prefix}/share/info
+-    installbuilddir: ${prefix}/usr/share/apache2/build
++    installbuilddir: ${prefix}/share/apache2/build
+     errordir:      ${datadir}/error
+ </Layout>
+ 
diff -ruN httpd-2.4.10.orig/fink/secondary-daemonic-script httpd-2.4.10/fink/secondary-daemonic-script
--- httpd-2.4.10.orig/fink/secondary-daemonic-script	1969-12-31 17:00:00.000000000 -0700
+++ httpd-2.4.10/fink/secondary-daemonic-script	2013-08-08 08:49:40.000000000 -0600
@@ -0,0 +1,9 @@
+ <service>
+  <description>Apache2-XXX web server</description>
+  <message>Apache2-XXX web server</message>
+
+  <daemon name="apache2-XXX">
+    <executable background="yes">@FINKPREFIX@/sbin/apache2ctl-XXX</executable>
+    <parameters> -k start</parameters>
+  </daemon>
+ </service>
