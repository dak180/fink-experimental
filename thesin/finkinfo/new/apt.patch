diff -ruN apt-0.9.16.1.orig/fink/patches/darwin-fixes.patch apt-0.9.16.1/fink/patches/darwin-fixes.patch
--- apt-0.9.16.1.orig/fink/patches/darwin-fixes.patch	1969-12-31 17:00:00.000000000 -0700
+++ apt-0.9.16.1/fink/patches/darwin-fixes.patch	2014-03-24 11:40:42.000000000 -0600
@@ -0,0 +1,572 @@
+--- apt.orig/apt-inst/makefile
++++ apt/apt-inst/makefile
+@@ -18,7 +18,7 @@
+ MINOR=0
+ SLIBS=$(PTHREADLIB) -lapt-pkg
+ APT_DOMAIN:=libapt-inst$(MAJOR)
+-LIBRARYDEPENDS=$(LIB)/libapt-pkg.so
++LIBRARYDEPENDS=$(LIB)/libapt-pkg.dylib
+ 
+ # Source code for the contributed non-core things
+ SOURCE = contrib/extracttar.cc contrib/arfile.cc
+--- apt.orig/apt-pkg/aptconfiguration.cc
++++ apt/apt-pkg/aptconfiguration.cc
+@@ -193,7 +193,7 @@
+ 	// get the environment language codes: LC_MESSAGES (and later LANGUAGE)
+ 	// we extract both, a long and a short code and then we will
+ 	// check if we actually need both (rare) or if the short is enough
+-	string const envMsg = string(Locale == 0 ? std::setlocale(LC_MESSAGES, NULL) : *Locale);
++	string const envMsg = string(Locale == 0 ? setlocale(LC_MESSAGES, NULL) : *Locale);
+ 	size_t const lenShort = (envMsg.find('_') != string::npos) ? envMsg.find('_') : 2;
+ 	size_t const lenLong = (envMsg.find_first_of(".@") != string::npos) ? envMsg.find_first_of(".@") : (lenShort + 3);
+ 
+--- apt.orig/apt-pkg/contrib/macros.h
++++ apt/apt-pkg/contrib/macros.h
+@@ -110,7 +110,9 @@
+ #ifndef APT_10_CLEANER_HEADERS
+ #if APT_GCC_VERSION >= 0x0300
+ 	#define __must_check	__attribute__ ((warn_unused_result))
++#ifndef __APPLE__
+ 	#define __deprecated	__attribute__ ((deprecated))
++#endif
+ 	#define __attrib_const	__attribute__ ((__const__))
+ 	#define __like_printf(n)	__attribute__((format(printf, n, n + 1)))
+ #else
+--- apt.orig/apt-pkg/contrib/strutl.h
++++ apt/apt-pkg/contrib/strutl.h
+@@ -188,4 +188,292 @@
+ unsigned long RegexChoice(RxChoiceList *Rxs,const char **ListBegin,
+ 		      const char **ListEnd);
+ 
++#if defined(__APPLE__)
++inline char *strchrnul( const char *s, int c )
++{
++	for (; *s != c && *s != '\0'; ++s)
++		;
++	return (char *)s;
++}
++
++inline void *
++rawmemchr (const void *s, int c_in)
++{
++  /* On 32-bit hardware, choosing longword to be a 32-bit unsigned
++     long instead of a 64-bit uintmax_t tends to give better
++     performance.  On 64-bit hardware, unsigned long is generally 64
++     bits already.  Change this typedef to experiment with
++     performance.  */
++  typedef unsigned long int longword;
++
++  const unsigned char *char_ptr;
++  const longword *longword_ptr;
++  longword repeated_one;
++  longword repeated_c;
++  unsigned char c;
++
++  c = (unsigned char) c_in;
++
++  /* Handle the first few bytes by reading one byte at a time.
++     Do this until CHAR_PTR is aligned on a longword boundary.  */
++  for (char_ptr = (const unsigned char *) s;
++       (size_t) char_ptr % sizeof (longword) != 0;
++       ++char_ptr)
++    if (*char_ptr == c)
++      return (void *) char_ptr;
++
++  longword_ptr = (const longword *) char_ptr;
++
++  /* All these elucidatory comments refer to 4-byte longwords,
++     but the theory applies equally well to any size longwords.  */
++
++  /* Compute auxiliary longword values:
++     repeated_one is a value which has a 1 in every byte.
++     repeated_c has c in every byte.  */
++  repeated_one = 0x01010101;
++  repeated_c = c | (c << 8);
++  repeated_c |= repeated_c << 16;
++  if (0xffffffffU < (longword) -1)
++    {
++      repeated_one |= repeated_one << 31 << 1;
++      repeated_c |= repeated_c << 31 << 1;
++      if (8 < sizeof (longword))
++        {
++          size_t i;
++
++          for (i = 64; i < sizeof (longword) * 8; i *= 2)
++            {
++              repeated_one |= repeated_one << i;
++              repeated_c |= repeated_c << i;
++            }
++        }
++    }
++
++  /* Instead of the traditional loop which tests each byte, we will
++     test a longword at a time.  The tricky part is testing if *any of
++     the four* bytes in the longword in question are equal to NUL or
++     c.  We first use an xor with repeated_c.  This reduces the task
++     to testing whether *any of the four* bytes in longword1 is zero.
++
++     We compute tmp =
++       ((longword1 - repeated_one) & ~longword1) & (repeated_one << 7).
++     That is, we perform the following operations:
++       1. Subtract repeated_one.
++       2. & ~longword1.
++       3. & a mask consisting of 0x80 in every byte.
++     Consider what happens in each byte:
++       - If a byte of longword1 is zero, step 1 and 2 transform it into 0xff,
++         and step 3 transforms it into 0x80.  A carry can also be propagated
++         to more significant bytes.
++       - If a byte of longword1 is nonzero, let its lowest 1 bit be at
++         position k (0 <= k <= 7); so the lowest k bits are 0.  After step 1,
++         the byte ends in a single bit of value 0 and k bits of value 1.
++         After step 2, the result is just k bits of value 1: 2^k - 1.  After
++         step 3, the result is 0.  And no carry is produced.
++     So, if longword1 has only non-zero bytes, tmp is zero.
++     Whereas if longword1 has a zero byte, call j the position of the least
++     significant zero byte.  Then the result has a zero at positions 0, ...,
++     j-1 and a 0x80 at position j.  We cannot predict the result at the more
++     significant bytes (positions j+1..3), but it does not matter since we
++     already have a non-zero bit at position 8*j+7.
++
++     The test whether any byte in longword1 is zero is equivalent
++     to testing whether tmp is nonzero.
++
++     This test can read beyond the end of a string, depending on where
++     C_IN is encountered.  However, this is considered safe since the
++     initialization phase ensured that the read will be aligned,
++     therefore, the read will not cross page boundaries and will not
++     cause a fault.  */
++
++  while (1)
++    {
++      longword longword1 = *longword_ptr ^ repeated_c;
++
++      if ((((longword1 - repeated_one) & ~longword1)
++           & (repeated_one << 7)) != 0)
++        break;
++      longword_ptr++;
++    }
++
++  char_ptr = (const unsigned char *) longword_ptr;
++
++  /* At this point, we know that one of the sizeof (longword) bytes
++     starting at char_ptr is == c.  On little-endian machines, we
++     could determine the first such byte without any further memory
++     accesses, just by looking at the tmp result from the last loop
++     iteration.  But this does not work on big-endian machines.
++     Choose code that works in both cases.  */
++
++  char_ptr = (unsigned char *) longword_ptr;
++  while (*char_ptr != c)
++    char_ptr++;
++  return (void *) char_ptr;
++}
++
++#if defined _LIBC
++# include <memcopy.h>
++#else
++# include <config.h>
++# define reg_char char
++#endif
++
++#include <limits.h>
++
++#undef __memrchr
++#undef memrchr
++
++#ifndef weak_alias
++# define __memrchr memrchr
++#endif
++
++/* Search no more than N bytes of S for C.  */
++inline void *
++__memrchr (void const *s, int c_in, size_t n)
++{
++  const unsigned char *char_ptr;
++  const unsigned long int *longword_ptr;
++  unsigned long int longword, magic_bits, charmask;
++  unsigned reg_char c;
++  int i;
++
++  c = (unsigned char) c_in;
++
++  /* Handle the last few characters by reading one character at a time.
++     Do this until CHAR_PTR is aligned on a longword boundary.  */
++  for (char_ptr = (const unsigned char *) s + n;
++       n > 0 && (size_t) char_ptr % sizeof longword != 0;
++       --n)
++    if (*--char_ptr == c)
++      return (void *) char_ptr;
++
++  /* All these elucidatory comments refer to 4-byte longwords,
++     but the theory applies equally well to any size longwords.  */
++
++  longword_ptr = (const unsigned long int *) char_ptr;
++
++  /* Bits 31, 24, 16, and 8 of this number are zero.  Call these bits
++     the "holes."  Note that there is a hole just to the left of
++     each byte, with an extra at the end:
++
++     bits:  01111110 11111110 11111110 11111111
++     bytes: AAAAAAAA BBBBBBBB CCCCCCCC DDDDDDDD
++
++     The 1-bits make sure that carries propagate to the next 0-bit.
++     The 0-bits provide holes for carries to fall into.  */
++
++  /* Set MAGIC_BITS to be this pattern of 1 and 0 bits.
++     Set CHARMASK to be a longword, each of whose bytes is C.  */
++
++  magic_bits = 0xfefefefe;
++  charmask = c | (c << 8);
++  charmask |= charmask << 16;
++#if 0xffffffffU < ULONG_MAX
++  magic_bits |= magic_bits << 32;
++  charmask |= charmask << 32;
++  if (8 < sizeof longword)
++    for (i = 64; i < sizeof longword * 8; i *= 2)
++      {
++	magic_bits |= magic_bits << i;
++	charmask |= charmask << i;
++      }
++#endif
++  magic_bits = (ULONG_MAX >> 1) & (magic_bits | 1);
++
++  /* Instead of the traditional loop which tests each character,
++     we will test a longword at a time.  The tricky part is testing
++     if *any of the four* bytes in the longword in question are zero.  */
++  while (n >= sizeof longword)
++    {
++      /* We tentatively exit the loop if adding MAGIC_BITS to
++	 LONGWORD fails to change any of the hole bits of LONGWORD.
++
++	 1) Is this safe?  Will it catch all the zero bytes?
++	 Suppose there is a byte with all zeros.  Any carry bits
++	 propagating from its left will fall into the hole at its
++	 least significant bit and stop.  Since there will be no
++	 carry from its most significant bit, the LSB of the
++	 byte to the left will be unchanged, and the zero will be
++	 detected.
++
++	 2) Is this worthwhile?  Will it ignore everything except
++	 zero bytes?  Suppose every byte of LONGWORD has a bit set
++	 somewhere.  There will be a carry into bit 8.  If bit 8
++	 is set, this will carry into bit 16.  If bit 8 is clear,
++	 one of bits 9-15 must be set, so there will be a carry
++	 into bit 16.  Similarly, there will be a carry into bit
++	 24.  If one of bits 24-30 is set, there will be a carry
++	 into bit 31, so all of the hole bits will be changed.
++
++	 The one misfire occurs when bits 24-30 are clear and bit
++	 31 is set; in this case, the hole at bit 31 is not
++	 changed.  If we had access to the processor carry flag,
++	 we could close this loophole by putting the fourth hole
++	 at bit 32!
++
++	 So it ignores everything except 128's, when they're aligned
++	 properly.
++
++	 3) But wait!  Aren't we looking for C, not zero?
++	 Good point.  So what we do is XOR LONGWORD with a longword,
++	 each of whose bytes is C.  This turns each byte that is C
++	 into a zero.  */
++
++      longword = *--longword_ptr ^ charmask;
++
++      /* Add MAGIC_BITS to LONGWORD.  */
++      if ((((longword + magic_bits)
++
++	    /* Set those bits that were unchanged by the addition.  */
++	    ^ ~longword)
++
++	   /* Look at only the hole bits.  If any of the hole bits
++	      are unchanged, most likely one of the bytes was a
++	      zero.  */
++	   & ~magic_bits) != 0)
++	{
++	  /* Which of the bytes was C?  If none of them were, it was
++	     a misfire; continue the search.  */
++
++	  const unsigned char *cp = (const unsigned char *) longword_ptr;
++
++	  if (8 < sizeof longword)
++	    for (i = sizeof longword - 1; 8 <= i; i--)
++	      if (cp[i] == c)
++		return (void *) &cp[i];
++	  if (7 < sizeof longword && cp[7] == c)
++	    return (void *) &cp[7];
++	  if (6 < sizeof longword && cp[6] == c)
++	    return (void *) &cp[6];
++	  if (5 < sizeof longword && cp[5] == c)
++	    return (void *) &cp[5];
++	  if (4 < sizeof longword && cp[4] == c)
++	    return (void *) &cp[4];
++	  if (cp[3] == c)
++	    return (void *) &cp[3];
++	  if (cp[2] == c)
++	    return (void *) &cp[2];
++	  if (cp[1] == c)
++	    return (void *) &cp[1];
++	  if (cp[0] == c)
++	    return (void *) cp;
++	}
++
++      n -= sizeof longword;
++    }
++
++  char_ptr = (const unsigned char *) longword_ptr;
++
++  while (n-- > 0)
++    {
++      if (*--char_ptr == c)
++	return (void *) char_ptr;
++    }
++
++  return 0;
++}
++#ifdef weak_alias
++weak_alias (__memrchr, memrchr)
++#endif
++#endif // __APPLE__
+ #endif
+--- apt.orig/apt-pkg/install-progress.h
++++ apt/apt-pkg/install-progress.h
+@@ -5,6 +5,9 @@
+ #include <unistd.h>
+ #include <signal.h>
+ #include <vector>
++#ifdef __APPLE__
++  #define sighandler_t sig_t
++#endif
+ 
+ namespace APT {
+ namespace Progress {
+--- apt.orig/apt-pkg/deb/dpkgpm.cc
++++ apt/apt-pkg/deb/dpkgpm.cc
+@@ -27,7 +27,11 @@
+ #include <errno.h>
+ #include <fcntl.h>
+ #include <grp.h>
++#ifndef __APPLE__
+ #include <pty.h>
++#else
++#include <util.h>
++#endif
+ #include <pwd.h>
+ #include <signal.h>
+ #include <stddef.h>
+--- apt.orig/apt-pkg/srcrecords.cc
++++ apt/apt-pkg/srcrecords.cc
+@@ -30,7 +30,7 @@
+ // SrcRecords::pkgSrcRecords - Constructor				/*{{{*/
+ // ---------------------------------------------------------------------
+ /* Open all the source index files */
+-pkgSrcRecords::pkgSrcRecords(pkgSourceList &List) : d(NULL), Files(0), Current(0)
++pkgSrcRecords::pkgSrcRecords(pkgSourceList &List) : d(NULL), Files(0)
+ {
+    for (pkgSourceList::const_iterator I = List.begin(); I != List.end(); ++I)
+    {
+--- apt.orig/buildlib/environment.mak.in
++++ apt/buildlib/environment.mak.in
+@@ -17,7 +17,7 @@
+ NUM_PROCS = @NUM_PROCS@
+ 
+ # Linker stuff
+-PICFLAGS+= -fPIC -DPIC
++PICFLAGS+= -fno-common -fPIC -DPIC
+ LFLAGS+= @LDFLAGS@
+ LEFLAGS+= 
+ SOCKETLIBS:= @SOCKETLIBS@
+@@ -66,10 +66,12 @@
+ 
+ # Shared library things
+ HOST_OS = @host_os@
+-ifneq ($(words $(filter gnu% linux-gnu% kfreebsd-gnu% %-gnu,$(HOST_OS))),0)
+-   SONAME_MAGIC=-Wl,-soname -Wl,
+-   LFLAGS_SO=
+-else
+-   # Do not know how to create shared libraries here.
+-   ONLYSTATICLIBS = yes
+-endif
++#ifneq ($(words $(filter gnu% linux-gnu% kfreebsd-gnu% %-gnu,$(HOST_OS))),0)
++#   SONAME_MAGIC=-Wl,-soname -Wl,
++#   LFLAGS_SO=
++#else
++#   # Do not know how to create shared libraries here.
++#   ONLYSTATICLIBS = yes
++#endif
++SONAME_MAGIC=-install_name @FINKPREFIX@/lib/
++LFLAGS_SO=-dynamiclib
+--- apt.orig/buildlib/library.mak
++++ apt/buildlib/library.mak
+@@ -5,7 +5,7 @@
+ # Input
+ # $(SOURCE) - The source code to use
+ # $(HEADERS) - Exported header files and private header files
+-# $(LIBRARY) - The name of the library without lib or .so
++# $(LIBRARY) - The name of the library without lib or .dylib
+ # $(MAJOR) - The major version number of this library
+ # $(MINOR) - The minor version number of this library
+ # $(APT_DOMAIN) - The text domain for this library
+@@ -16,11 +16,11 @@
+ # See defaults.mak for information about LOCAL
+ 
+ # Some local definitions
+-LOCAL := lib$(LIBRARY).so.$(MAJOR).$(MINOR)
++LOCAL := lib$(LIBRARY)$(LIBEXT).$(MAJOR).$(MINOR).dylib
+ $(LOCAL)-OBJS := $(addprefix $(OBJ)/,$(addsuffix .opic,$(notdir $(basename $(SOURCE)))))
+ $(LOCAL)-DEP := $(addprefix $(DEP)/,$(addsuffix .opic.d,$(notdir $(basename $(SOURCE)))))
+ $(LOCAL)-HEADERS := $(addprefix $(INCLUDE)/,$(HEADERS))
+-$(LOCAL)-SONAME := lib$(LIBRARY).so.$(MAJOR)
++$(LOCAL)-SONAME := lib$(LIBRARY)$(LIBEXT).$(MAJOR).dylib
+ $(LOCAL)-SLIBS := $(SLIBS)
+ $(LOCAL)-LIBRARY := $(LIBRARY)
+ 
+@@ -29,7 +29,7 @@
+ 
+ # Install the command hooks
+ headers: $($(LOCAL)-HEADERS)
+-library: $(LIB)/lib$(LIBRARY).so $(LIB)/lib$(LIBRARY).so.$(MAJOR)
++library: $(LIB)/lib$(LIBRARY).dylib $(LIB)/lib$(LIBRARY)$(LIBEXT).$(MAJOR).dylib
+ clean: clean/$(LOCAL)
+ veryclean: veryclean/$(LOCAL)
+ 
+@@ -41,21 +41,23 @@
+ clean/$(LOCAL):
+ 	-rm -f $($(@F)-OBJS) $($(@F)-DEP)
+ veryclean/$(LOCAL): clean/$(LOCAL)
+-	-rm -f $($(@F)-HEADERS) $(LIB)/lib$($(@F)-LIBRARY)*.so*
++	-rm -f $($(@F)-HEADERS) $(LIB)/lib$($(@F)-LIBRARY)*.dylib
+ 
+ # Build rules for the two symlinks
+-.PHONY: $(LIB)/lib$(LIBRARY).so.$(MAJOR) $(LIB)/lib$(LIBRARY).so
+-$(LIB)/lib$(LIBRARY).so.$(MAJOR): $(LIB)/lib$(LIBRARY).so.$(MAJOR).$(MINOR)
++.PHONY: $(LIB)/lib$(LIBRARY)$(LIBEXT).$(MAJOR).dylib $(LIB)/lib$(LIBRARY).dylib
++$(LIB)/lib$(LIBRARY)$(LIBEXT).$(MAJOR).dylib: $(LIB)/lib$(LIBRARY)$(LIBEXT).$(MAJOR).$(MINOR).dylib
+ 	ln -sf $(<F) $@
+-$(LIB)/lib$(LIBRARY).so: $(LIB)/lib$(LIBRARY).so.$(MAJOR).$(MINOR)
++$(LIB)/lib$(LIBRARY).dylib: $(LIB)/lib$(LIBRARY)$(LIBEXT).$(MAJOR).$(MINOR).dylib
+ 	ln -sf $(<F) $@
+ 
+ # The binary build rule
+-$(LIB)/lib$(LIBRARY).so.$(MAJOR).$(MINOR): $($(LOCAL)-HEADERS) $($(LOCAL)-OBJS) $(LIBRARYDEPENDS)
+-	-rm -f $(LIB)/lib$($(@F)-LIBRARY)*.so* 2> /dev/null
++$(LIB)/lib$(LIBRARY)$(LIBEXT).$(MAJOR).$(MINOR).dylib: $($(LOCAL)-HEADERS) $($(LOCAL)-OBJS) $(LIBRARYDEPENDS)
++	-rm -f $(LIB)/lib$($(@F)-LIBRARY)*.dylib 2> /dev/null
+ 	echo Building shared library $@
+ 	$(CXX) $(CXXFLAGS) $(LDFLAGS) $(PICFLAGS) $(LFLAGS) $(LFLAGS_SO)\
+-	   -o $@ $(SONAME_MAGIC)$($(@F)-SONAME) -shared \
++	   -o $@ $(SONAME_MAGIC)$($(@F)-SONAME) \
++	   -compatibility_version $(MAJOR).$(MINOR) \
++	   -current_version $(MAJOR).$(MINOR) \
+ 	   $(filter %.opic,$^) \
+ 	   $($(@F)-SLIBS) 
+ 
+--- apt.orig/apt-pkg/contrib/sha2_internal.cc
++++ apt/apt-pkg/contrib/sha2_internal.cc
+@@ -33,7 +33,7 @@
+  */
+ #include <config.h>
+ 
+-#include <endian.h>
++#include <machine/endian.h>
+ #include <string.h>	/* memcpy()/memset() or bcopy()/bzero() */
+ #include <assert.h>	/* assert() */
+ #include "sha2_internal.h"
+--- apt.orig/apt-private/private-install.cc
++++ apt/apt-private/private-install.cc
+@@ -23,7 +23,11 @@
+ #include <errno.h>
+ #include <stdlib.h>
+ #include <string.h>
+-#include <sys/statfs.h>
++#ifndef __APPLE__
++ #include <sys/statfs.h>
++#else
++ #define statfs statvfs
++#endif
+ #include <sys/statvfs.h>
+ #include <algorithm>
+ #include <iostream>
+--- apt.orig/cmdline/apt-get.cc
++++ apt/cmdline/apt-get.cc
+@@ -78,7 +78,11 @@
+ #include <string.h>
+ #include <sys/ioctl.h>
+ #include <sys/stat.h>
+-#include <sys/statfs.h>
++#ifndef __APPLE__
++ #include <sys/statfs.h>
++#else
++ #define statfs statvfs
++#endif
+ #include <sys/statvfs.h>
+ #include <sys/wait.h>
+ #include <unistd.h>
+--- apt.orig/doc/manpage-style.xsl
++++ apt/doc/manpage-style.xsl
+@@ -2,7 +2,7 @@
+  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
+  version="1.0">
+ 
+-<xsl:import href="/usr/share/xml/docbook/stylesheet/nwalsh/manpages/docbook.xsl" />
++<xsl:import href="@FINKPREFIX@/share/xml/xsl/docbook-xsl/manpages/docbook.xsl" />
+ 
+ <xsl:param name="man.output.encoding" select="'UTF-8'" />
+ <!-- LANGUAGE -->
+--- apt.orig/test/libapt/run-tests
++++ apt/test/libapt/run-tests
+@@ -11,18 +11,10 @@
+ EXT="_libapt_test"
+ EXIT_CODE=0
+ 
+-# detect if output is on a terminal (colorful) or better not
+-if expr match "$(readlink -f /proc/$$/fd/1)" '/dev/pts/[0-9]\+' > /dev/null; then
+ 	COLHIGH='\033[1;35m'
+ 	COLRESET='\033[0m'
+ 	TESTOKAY='\033[1;32mOKAY\033[0m'
+ 	TESTFAIL='\033[1;31mFAILED\033[0m'
+-else
+-	COLHIGH=''
+-	COLRESET=''
+-	TESTOKAY='OK'
+-	TESTFAIL='###FAILED###'
+-fi
+ 
+ for testapp in $(ls ${LDPATH}/*$EXT)
+ do
+@@ -32,7 +24,7 @@
+ 
+ 	if [ $name = "GetListOfFilesInDir${EXT}" ]; then
+ 		# TODO: very-low: move env creation to the actual test-app
+-		tmppath=$(mktemp -d)
++		tmppath=$(/usr/bin/mktemp -d -t tmp)
+ 		touch "${tmppath}/anormalfile" \
+ 			"${tmppath}/01yet-anothernormalfile" \
+ 			"${tmppath}/anormalapt.conf" \
+@@ -63,7 +55,8 @@
+ 		ln -s "${tmppath}/anormalfile" "${tmppath}/linkedfile.list"
+ 		ln -s "${tmppath}/non-existing-file" "${tmppath}/brokenlink.list"
+ 	elif [ $name = "getLanguages${EXT}" ]; then
+-		tmppath=$(mktemp -d)
++		continue
++		tmppath=$(/usr/bin/mktemp -d -t tmp)
+ 		touch "${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-tr" \
+ 			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-pt" \
+ 			"${tmppath}/ftp.de.debian.org_debian_dists_sid_main_i18n_Translation-se~" \
+@@ -80,7 +73,7 @@
+ 	elif [ $name = "CompareVersion${EXT}" ]; then
+ 		tmppath="${DIR}/versions.lst"
+ 	elif [ $name = "CdromFindPackages${EXT}" ]; then
+-		tmppath=$(mktemp -d)
++		tmppath=$(/usr/bin/mktemp -d -t tmp)
+ 		mkdir -p "${tmppath}/.disk" "${tmppath}/pool" \
+ 			"${tmppath}/dists/stable/main/binary-i386" \
+ 			"${tmppath}/dists/stable/main/source" \
+@@ -119,7 +112,7 @@
+ 	fi
+ 
+ 	echo -n "Testing with ${NAME} "
+-	if MALLOC_PERTURB_=21 MALLOC_CHECK_=2 LD_LIBRARY_PATH=${LDPATH} ${testapp} ${tmppath} ; then
++	if MALLOC_PERTURB_=21 MALLOC_CHECK_=2 DYLD_LIBRARY_PATH=${LDPATH} ${testapp} ${tmppath} ; then
+ 		echo "$TESTOKAY"
+ 	else
+ 		echo "$TESTFAIL"
diff -ruN apt-0.9.16.1.orig/fink/patches/ignore-breakage.patch apt-0.9.16.1/fink/patches/ignore-breakage.patch
--- apt-0.9.16.1.orig/fink/patches/ignore-breakage.patch	1969-12-31 17:00:00.000000000 -0700
+++ apt-0.9.16.1/fink/patches/ignore-breakage.patch	2016-11-15 12:51:17.000000000 -0700
@@ -0,0 +1,149 @@
+diff -ruN apt-0.9.16.1.a/apt-private/private-cmndline.cc apt-0.9.16.1.b/apt-private/private-cmndline.cc
+--- apt-0.9.16.1.a/apt-private/private-cmndline.cc	2014-03-15 10:23:45.000000000 -0600
++++ apt-0.9.16.1.b/apt-private/private-cmndline.cc	2016-11-15 12:50:58.000000000 -0700
+@@ -183,6 +183,7 @@
+    addArg('t',"default-release","APT::Default-Release",CommandLine::HasArg);
+    addArg(0,"download","APT::Get::Download",0);
+    addArg(0,"fix-missing","APT::Get::Fix-Missing",0);
++   addArg(0,"ignore-breakage","APT::Get::Ignore-Breakage",0);
+    addArg(0,"ignore-hold","APT::Ignore-Hold",0);
+    addArg(0,"upgrade","APT::Get::upgrade",0);
+    addArg(0,"only-upgrade","APT::Get::Only-Upgrade",0);
+diff -ruN apt-0.9.16.1.a/apt-private/private-install.cc apt-0.9.16.1.b/apt-private/private-install.cc
+--- apt-0.9.16.1.a/apt-private/private-install.cc	2016-11-15 12:31:33.000000000 -0700
++++ apt-0.9.16.1.b/apt-private/private-install.cc	2016-11-15 12:41:15.000000000 -0700
+@@ -79,7 +79,8 @@
+    Stats(c1out,Cache);
+ 
+    // Sanity check
+-   if (Cache->BrokenCount() != 0)
++   if (Cache->BrokenCount() != 0
++       && _config->FindB("APT::Get::Ignore-Breakage",false) == false)
+    {
+       ShowBroken(c1out,Cache,false);
+       return _error->Error(_("Internal error, InstallPackages was called with broken packages!"));
+@@ -442,7 +443,7 @@
+ 
+    // we could have removed a new dependency of a garbage package,
+    // so check if a reverse depends is broken and if so install it again.
+-   if (tooMuch.empty() == false && (Cache->BrokenCount() != 0 || Cache->PolicyBrokenCount() != 0))
++   if (tooMuch.empty() == false && ((Cache->BrokenCount() != 0 && _config->FindB("APT::Get::Ignore-Breakage") == false) || Cache->PolicyBrokenCount() != 0))
+    {
+       bool Changed;
+       do {
+@@ -497,7 +498,8 @@
+    }
+ 
+    // Now see if we had destroyed anything (if we had done anything)
+-   if (Cache->BrokenCount() != 0)
++   if (Cache->BrokenCount() != 0
++       && _config->FindB("APT::Get::Ignore-Breakage",false) == false)
+    {
+       c1out << _("Hmm, seems like the AutoRemover destroyed something which really\n"
+ 	         "shouldn't happen. Please file a bug report against apt.") << std::endl;
+@@ -539,7 +541,8 @@
+ 
+    // Enter the special broken fixing mode if the user specified arguments
+    bool BrokenFix = false;
+-   if (Cache->BrokenCount() != 0)
++   if (Cache->BrokenCount() != 0
++       && _config->FindB("APT::Get::Ignore-Breakage",false) == false)
+       BrokenFix = true;
+ 
+    SPtr<pkgProblemResolver> Fix;
+@@ -611,7 +614,8 @@
+       /* If we are in the Broken fixing mode we do not attempt to fix the
+ 	 problems. This is if the user invoked install without -f and gave
+ 	 packages */
+-      if (BrokenFix == true && Cache->BrokenCount() != 0)
++      if (BrokenFix == true && Cache->BrokenCount() != 0
++          && _config->FindB("APT::Get::Ignore-Breakage") == false)
+       {
+ 	 c1out << _("You might want to run 'apt-get -f install' to correct these:") << std::endl;
+ 	 ShowBroken(c1out,Cache,false);
+@@ -625,7 +629,8 @@
+       }
+ 
+       // Now we check the state of the packages,
+-      if (Cache->BrokenCount() != 0)
++      if (Cache->BrokenCount() != 0
++          && _config->FindB("APT::Get::Ignore-Breakage",false) == false)
+       {
+ 	 c1out << 
+ 	    _("Some packages could not be installed. This may mean that you have\n" 
+diff -ruN apt-0.9.16.1.a/cmdline/apt-get.cc apt-0.9.16.1.b/cmdline/apt-get.cc
+--- apt-0.9.16.1.a/cmdline/apt-get.cc	2016-11-15 12:31:33.000000000 -0700
++++ apt-0.9.16.1.b/cmdline/apt-get.cc	2016-11-15 12:29:32.000000000 -0700
+@@ -1735,6 +1735,22 @@
+       return 0;
+    }
+ 
++   /* FINK LOCAL begin */
++   if (_config->FindB("APT::Get::Ignore-Breakage",false) == true) {
++     if (_config->FindB("APT::Get::Print-URIs",false) == false &&
++        _config->FindB("APT::Get::Download-Only",false) == false) {
++       _error->Error("--ignore-breakage can only be used with --print-uris or --download-only");
++       _error->DumpErrors();
++       return 100;
++     }
++     if (strcmp(CmdL.FileList[0],"install") != 0) {
++       _error->Error("--ignore-breakage can only be used with apt-get install");
++       _error->DumpErrors();
++       return 100;
++     }
++   }
++   /* FINK LOCAL end */
++
+    // see if we are in simulate mode
+    CheckSimulateMode(CmdL);
+ 
+diff -ruN apt-0.9.16.1.a/doc/apt-get.8.xml apt-0.9.16.1.b/doc/apt-get.8.xml
+--- apt-0.9.16.1.a/doc/apt-get.8.xml	2014-03-15 10:23:45.000000000 -0600
++++ apt-0.9.16.1.b/doc/apt-get.8.xml	2016-11-15 12:25:15.000000000 -0700
+@@ -287,6 +287,16 @@
+      Configuration Item: <literal>APT::Get::Fix-Broken</literal>.</para></listitem>
+      </varlistentry>
+ 
++     <varlistentry><term><option>--ignore-breakage</option></term>
++     <listitem><para>For mode <option>install</option>, ignore dependency problems. This option is
++     useful if you want to perform actions on just a particular package,
++     not its whole dependency tree. It must be used in conjunction with
++     <option>--download-only</option> or <option>--print-uris</option>.  Configuration Item: <literal>APT::Get::Ignore-Breakage</literal>.</para>
++     <para>Note: The <option>--ignore-breakage</option> option was added by The Fink Project
++     and hence is only available in the <option>apt-get</option> provided by Fink's
++     <option>apt</option> package.</para></listitem>
++     </varlistentry>
++
+      <varlistentry><term><option>-m</option></term><term><option>--ignore-missing</option></term>
+      <term><option>--fix-missing</option></term>
+      <listitem><para>Ignore missing packages; if packages cannot be retrieved or fail the    
+diff -ruN apt-0.9.16.1.a/fink/patches/virtuals.patch apt-0.9.16.1.b/fink/patches/virtuals.patch
+--- apt-0.9.16.1.a/fink/patches/virtuals.patch	2016-11-15 11:58:11.000000000 -0700
++++ apt-0.9.16.1.b/fink/patches/virtuals.patch	2014-03-27 09:36:57.000000000 -0600
+@@ -94,7 +94,7 @@
+  									/*}}}*/
+ --- apt.orig/apt-pkg/deb/dpkgpm.cc
+ +++ dpt/apt-pkg/deb/pkgpm.cc
+-@@ -587,7 +587,7 @@
++@@ -583,7 +583,7 @@
+     }
+     // "status" has the form: "status: pkg: state"
+     // with state in ["half-installed", "unpacked", "half-configured", 
+@@ -103,7 +103,7 @@
+     else if (prefix == "status")
+     {
+        pkgname = APT::String::Strip(list[1]);
+-@@ -984,6 +984,7 @@
++@@ -980,6 +980,7 @@
+  	 {"unpacked",N_("Preparing to configure %s") },
+  	 {"half-configured", N_("Configuring %s") },
+  	 { "installed", N_("Installed %s")},
+@@ -111,7 +111,7 @@
+  	 {NULL, NULL}
+        },
+        // Remove operation
+-@@ -1002,7 +1003,7 @@
++@@ -998,7 +999,7 @@
+     };
+  
+     // init the PackageOps map, go over the list of packages that
diff -ruN apt-0.9.16.1.orig/fink/patches/vendor.patch apt-0.9.16.1/fink/patches/vendor.patch
--- apt-0.9.16.1.orig/fink/patches/vendor.patch	1969-12-31 17:00:00.000000000 -0700
+++ apt-0.9.16.1/fink/patches/vendor.patch	2014-03-24 15:25:02.000000000 -0600
@@ -0,0 +1,38 @@
+--- apt.orig/vendor/fink/apt-vendor.ent
++++ apt/vendor/fink/apt-vendor.ent
+@@ -0,0 +1,7 @@
++<!-- details about the keys used by the distribution -->
++<!ENTITY keyring-distro "Fink">
++<!ENTITY keyring-package "<package>fink-archive-keyring</package>">
++<!ENTITY keyring-filename "<filename>@FINKPREFIX@/share/keyrings/debian-archive-keyring.gpg</filename>">
++<!ENTITY keyring-removed-filename "<filename>@FINKPREFIX@/share/keyrings/debian-archive-removed-keys.gpg</filename>">
++<!ENTITY keyring-master-filename "">
++<!ENTITY keyring-uri "">
+--- apt.orig/vendor/fink/sources.list.in
++++ apt/vendor/fink/sources.list.in
+@@ -0,0 +1,3 @@
++# See sources.list(5) manpage for more information
++# Remember that CD-ROMs, DVDs and such are managed through the apt-cdrom tool.
++deb http://bindist.finkproject.org/&osx-version; stable main
+--- apt.orig/vendor/getinfo
++++ apt/vendor/getinfo
+@@ -30,6 +30,9 @@
+ keyring-package|keyring-filename|keyring-master-filename|keyring-removed-filename|keyring-uri|current-codename)
+ 	exec $0 'vendor' "$@"
+ 	;;
++osx-version)
++	echo $(sw_vers -productVersion | cut -d"." -f1-2)
++	;;
+ vendor)
+ 	getfield "$2"
+ 	;;
+--- apt.orig/vendor/vendor.makefile
++++ apt/vendor/vendor.makefile
+@@ -13,6 +13,7 @@
+ 		-e 's#&debian-testing-codename;#$(shell ../getinfo debian-testing-codename)#g' \
+ 		-e 's#&ubuntu-codename;#$(shell ../getinfo ubuntu-codename)#g' \
+ 		-e 's#&current-codename;#$(shell ../getinfo current-codename)#g' \
++		-e 's#&osx-version;#$(shell ../getinfo osx-version)#g' \
+ 		$< > $@
+ 
+ clean: clean/sources.list
diff -ruN apt-0.9.16.1.orig/fink/patches/virtuals.patch apt-0.9.16.1/fink/patches/virtuals.patch
--- apt-0.9.16.1.orig/fink/patches/virtuals.patch	1969-12-31 17:00:00.000000000 -0700
+++ apt-0.9.16.1/fink/patches/virtuals.patch	2016-11-15 11:58:11.000000000 -0700
@@ -0,0 +1,122 @@
+--- apt.orig/apt-pkg/deb/deblistparser.cc
++++ apt/apt-pkg/deb/deblistparser.cc
+@@ -337,7 +337,7 @@
+    flag = ok, reinstreq, hold, hold-reinstreq
+    status = not-installed, unpacked, half-configured,
+             half-installed, config-files, post-inst-failed, 
+-            removal-failed, installed
++            removal-failed, installed, virtual
+    
+    Some of the above are obsolete (I think?) flag = hold-* and 
+    status = post-inst-failed, removal-failed at least.
+@@ -400,6 +400,7 @@
+                             {"unpacked",pkgCache::State::UnPacked},
+                             {"half-configured",pkgCache::State::HalfConfigured},
+                             {"installed",pkgCache::State::Installed},
++                            {"virtual",pkgCache::State::Installed},
+                             {"half-installed",pkgCache::State::HalfInstalled},
+                             {"config-files",pkgCache::State::ConfigFiles},
+                             {"triggers-awaited",pkgCache::State::TriggersAwaited},
+--- apt.orig/apt-pkg/deb/debsystem.cc
++++ apt/apt-pkg/deb/debsystem.cc
+@@ -40,7 +40,7 @@
+ 
+ class debSystemPrivate {
+ public:
+-   debSystemPrivate() : LockFD(-1), LockCount(0), StatusFile(0)
++   debSystemPrivate() : LockFD(-1), LockCount(0), StatusFile(0), VirtStatusFile(0)
+    {
+    }
+    // For locking support
+@@ -48,6 +48,7 @@
+    unsigned LockCount;
+    
+    debStatusIndex *StatusFile;
++   debStatusIndex *VirtStatusFile;
+ };
+ 
+ // System::debSystem - Constructor					/*{{{*/
+@@ -66,6 +67,7 @@
+ debSystem::~debSystem()
+ {
+    delete d->StatusFile;
++   delete d->VirtStatusFile;
+    delete d;
+ }
+ 									/*}}}*/
+@@ -188,11 +190,14 @@
+       be the only users of these */
+    Cnf.CndSet("Dir::State::extended_states", "extended_states");
+    Cnf.CndSet("Dir::State::status","/var/lib/dpkg/status");
++   Cnf.CndSet("Dir::State::virtstatus","/var/lib/dpkg/status-fink");
+    Cnf.CndSet("Dir::Bin::dpkg","/usr/bin/dpkg");
+ 
+    if (d->StatusFile) {
+      delete d->StatusFile;
++     delete d->VirtStatusFile;
+      d->StatusFile = 0;
++     d->VirtStatusFile = 0;
+    }
+ 
+    return true;
+@@ -232,7 +237,10 @@
+ {
+    if (d->StatusFile == 0)
+       d->StatusFile = new debStatusIndex(_config->FindFile("Dir::State::status"));
++   if (d->VirtStatusFile == 0)
++      d->VirtStatusFile = new debStatusIndex(_config->FindFile("Dir::State::virtstatus"));
+    List.push_back(d->StatusFile);
++   List.push_back(d->VirtStatusFile);
+    return true;
+ }
+ 									/*}}}*/
+@@ -242,7 +250,7 @@
+ bool debSystem::FindIndex(pkgCache::PkgFileIterator File,
+ 			  pkgIndexFile *&Found) const
+ {
+-   if (d->StatusFile == 0)
++   if (d->StatusFile == 0 && d->VirtStatusFile == 0)
+       return false;
+    if (d->StatusFile->FindInCache(*File.Cache()) == File)
+    {
+@@ -250,6 +258,12 @@
+       return true;
+    }
+    
++   if (d->VirtStatusFile->FindInCache(*File.Cache()) == File)
++   {
++      Found = d->VirtStatusFile;
++      return true;
++   }
++   
+    return false;
+ }
+ 									/*}}}*/
+--- apt.orig/apt-pkg/deb/dpkgpm.cc
++++ dpt/apt-pkg/deb/pkgpm.cc
+@@ -587,7 +587,7 @@
+    }
+    // "status" has the form: "status: pkg: state"
+    // with state in ["half-installed", "unpacked", "half-configured", 
+-   //                "installed", "config-files", "not-installed"]
++   //                "installed", "virtual", "config-files", "not-installed"]
+    else if (prefix == "status")
+    {
+       pkgname = APT::String::Strip(list[1]);
+@@ -984,6 +984,7 @@
+ 	 {"unpacked",N_("Preparing to configure %s") },
+ 	 {"half-configured", N_("Configuring %s") },
+ 	 { "installed", N_("Installed %s")},
++	 { "virtual", N_("Installed %s")},
+ 	 {NULL, NULL}
+       },
+       // Remove operation
+@@ -1002,7 +1003,7 @@
+    };
+ 
+    // init the PackageOps map, go over the list of packages that
+-   // that will be [installed|configured|removed|purged] and add
++   // that will be [installed|virtual|configured|removed|purged] and add
+    // them to the PackageOps map (the dpkg states it goes through)
+    // and the PackageOpsTranslations (human readable strings)
+    for (vector<Item>::const_iterator I = List.begin(); I != List.end(); ++I)
