diff -uNr gcc-4.9.1/gcc/collect2.c gcc-4.9.1.fink/gcc/collect2.c
--- gcc-4.9.1/gcc/collect2.c	2014-03-06 03:48:01.000000000 -0500
+++ gcc-4.9.1.fink/gcc/collect2.c	2014-08-26 15:49:59.000000000 -0400
@@ -848,6 +848,8 @@
       fork_execute ("ld", lto_ld_argv);
       post_ld_pass (false);
     }
+  else
+    post_ld_pass (true);
 }
 
 /* Main program.  */
diff -uNr gcc-4.9.1/gcc/config/darwin-c.c gcc-4.9.1.fink/gcc/config/darwin-c.c
--- gcc-4.9.1/gcc/config/darwin-c.c	2014-01-02 17:23:26.000000000 -0500
+++ gcc-4.9.1.fink/gcc/config/darwin-c.c	2014-08-26 15:49:59.000000000 -0400
@@ -571,21 +571,34 @@
 }
 
 /* Return the value of darwin_macosx_version_min suitable for the
-   __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ macro,
-   so '10.4.2' becomes 1040.  The lowest digit is always zero.
+   __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ macro, so '10.4.2'
+   becomes 1040 and '10.10.0' becomes 101000.  The lowest digit is
+   always zero, as is the second lowest for '10.10.x' and above.
    Print a warning if the version number can't be understood.  */
 static const char *
 version_as_macro (void)
 {
-  static char result[] = "1000";
+  static char result[7] = "1000";
+  int minorDigitIdx;
 
   if (strncmp (darwin_macosx_version_min, "10.", 3) != 0)
     goto fail;
   if (! ISDIGIT (darwin_macosx_version_min[3]))
     goto fail;
-  result[2] = darwin_macosx_version_min[3];
-  if (darwin_macosx_version_min[4] != '\0'
-      && darwin_macosx_version_min[4] != '.')
+
+  minorDigitIdx = 3;
+  result[2] = darwin_macosx_version_min[minorDigitIdx++];
+  if (ISDIGIT (darwin_macosx_version_min[minorDigitIdx]))
+  {
+    /* Starting with OS X 10.10, the macro ends '00' rather than '0',
+       i.e. 10.10.x becomes 101000 rather than 10100.  */
+    result[3] = darwin_macosx_version_min[minorDigitIdx++];
+    result[4] = '0';
+    result[5] = '0';
+    result[6] = '\0';
+  }
+  if (darwin_macosx_version_min[minorDigitIdx] != '\0'
+      && darwin_macosx_version_min[minorDigitIdx] != '.')
     goto fail;
 
   return result;
diff -uNr gcc-4.9.1/gcc/config/darwin-driver.c gcc-4.9.1.fink/gcc/config/darwin-driver.c
--- gcc-4.9.1/gcc/config/darwin-driver.c	2014-01-02 17:23:26.000000000 -0500
+++ gcc-4.9.1.fink/gcc/config/darwin-driver.c	2014-08-26 15:49:59.000000000 -0400
@@ -57,8 +57,6 @@
   version_p = osversion + 1;
   if (ISDIGIT (*version_p))
     major_vers = major_vers * 10 + (*version_p++ - '0');
-  if (major_vers > 4 + 9)
-    goto parse_failed;
   if (*version_p++ != '.')
     goto parse_failed;
   version_pend = strchr(version_p, '.');
diff -uNr gcc-4.9.1/gcc/config/darwin.h gcc-4.9.1.fink/gcc/config/darwin.h
--- gcc-4.9.1/gcc/config/darwin.h	2014-01-02 17:23:26.000000000 -0500
+++ gcc-4.9.1.fink/gcc/config/darwin.h	2014-08-26 15:49:59.000000000 -0400
@@ -910,9 +910,8 @@
   darwin_driver_init (&decoded_options_count, &decoded_options)
 #endif
 
-/* The Apple assembler and linker do not support constructor priorities.  */
-#undef SUPPORTS_INIT_PRIORITY
-#define SUPPORTS_INIT_PRIORITY 0
+/* While the Apple assembler and linker do not support constructor priorities,
+   intra-module priority support is available through sort_cdtor_records. */
 
 /* When building cross-compilers (and native crosses) we shall default to 
    providing an osx-version-min of this unless overridden by the User.  */
diff -uNr gcc-4.9.1/gcc/testsuite/g++.dg/special/conpr-3.C gcc-4.9.1.fink/gcc/testsuite/g++.dg/special/conpr-3.C
--- gcc-4.9.1/gcc/testsuite/g++.dg/special/conpr-3.C	2007-02-25 13:47:05.000000000 -0500
+++ gcc-4.9.1.fink/gcc/testsuite/g++.dg/special/conpr-3.C	2014-08-26 15:49:59.000000000 -0400
@@ -1,5 +1,6 @@
 /* { dg-do run { target init_priority } } */
 /* { dg-additional-sources "conpr-3a.cc conpr-3b.cc" } */
+/* { dg-shouldfail "No inter-module priority support" { *-apple-darwin* } } */
 
 #include <stdlib.h>
 
diff -uNr gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-1.c gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-1.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-1.c	2007-02-20 11:45:38.000000000 -0500
+++ gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-1.c	2014-08-26 15:49:59.000000000 -0400
@@ -2,7 +2,8 @@
 /* { dg-options "-mmacosx-version-min=10.1" } */
 /* { dg-do run { target *-*-darwin* } } */
 
-int main(void)
+int
+main ()
 {
 #if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ != 1010
   fail me;
diff -uNr gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-2.c gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-2.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-2.c	2007-02-20 11:45:38.000000000 -0500
+++ gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-2.c	2014-08-26 15:49:59.000000000 -0400
@@ -2,7 +2,8 @@
 /* { dg-options "-mmacosx-version-min=10.1 -mmacosx-version-min=10.3" } */
 /* { dg-do run { target *-*-darwin* } } */
 
-int main(void)
+int
+main ()
 {
 #if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ != 1030
   fail me;
diff -uNr gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-3.c gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-3.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-3.c	2007-06-07 14:56:51.000000000 -0400
+++ gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-3.c	2014-08-26 15:49:59.000000000 -0400
@@ -2,7 +2,8 @@
 /* { dg-options "-mmacosx-version-min=10.4.10" } */
 /* { dg-do compile { target *-*-darwin* } } */
 
-int main(void)
+int
+main ()
 {
 #if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ != 1040
   fail me;
diff -uNr gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-4.c gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-4.c
--- gcc-4.9.1/gcc/testsuite/gcc.dg/darwin-minversion-4.c	1969-12-31 19:00:00.000000000 -0500
+++ gcc-4.9.1.fink/gcc/testsuite/gcc.dg/darwin-minversion-4.c	2014-08-26 15:49:59.000000000 -0400
@@ -0,0 +1,12 @@
+/* Test that major versions greater than 9 work and have the additional 0.  */
+/* { dg-options "-mmacosx-version-min=10.10.0" } */
+/* { dg-do compile { target *-*-darwin* } } */
+
+int
+main ()
+{
+#if __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ != 101000
+  fail me;
+#endif
+  return 0;
+}
diff -uNr gcc-4.9.1/libjava/Makefile.am gcc-4.9.1.fink/libjava/Makefile.am
--- gcc-4.9.1/libjava/Makefile.am	2014-02-20 03:43:04.000000000 -0500
+++ gcc-4.9.1.fink/libjava/Makefile.am	2014-08-26 15:49:59.000000000 -0400
@@ -494,7 +494,7 @@
 libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(extra_ldflags) $(THREADLIBS) \
 	$(LIBLTDL) $(SYS_ZLIBS) $(LIBJAVA_LDFLAGS_NOUNDEF) \
 	-version-info `grep -v '^\#' $(srcdir)/libtool-version` \
-	$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS) $(LIBGCJ_LD_EXPORT_ALL)
+	$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS) $(LIBGCJ_LD_EXPORT_ALL) $(LDLIBICONV)
 libgcj_la_LIBADD = \
 	classpath/native/fdlibm/libfdlibm.la \
 	java/lang/Object.lo \
diff -uNr gcc-4.9.1/libjava/Makefile.in gcc-4.9.1.fink/libjava/Makefile.in
--- gcc-4.9.1/libjava/Makefile.in	2014-07-16 06:06:03.000000000 -0400
+++ gcc-4.9.1.fink/libjava/Makefile.in	2014-08-26 15:49:59.000000000 -0400
@@ -1080,7 +1080,7 @@
 libgcj_la_LDFLAGS = -rpath $(toolexeclibdir) $(THREADLDFLAGS) $(extra_ldflags) $(THREADLIBS) \
 	$(LIBLTDL) $(SYS_ZLIBS) $(LIBJAVA_LDFLAGS_NOUNDEF) \
 	-version-info `grep -v '^\#' $(srcdir)/libtool-version` \
-	$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS) $(LIBGCJ_LD_EXPORT_ALL)
+	$(LIBGCJ_LD_SYMBOLIC_FUNCTIONS) $(LIBGCJ_LD_EXPORT_ALL) $(LDLIBICONV)
 
 libgcj_la_LIBADD = \
 	classpath/native/fdlibm/libfdlibm.la \
diff -uNr gcc-4.9.1/libjava/configure gcc-4.9.1.fink/libjava/configure
--- gcc-4.9.1/libjava/configure	2014-07-16 06:06:03.000000000 -0400
+++ gcc-4.9.1.fink/libjava/configure	2014-08-26 15:49:59.000000000 -0400
@@ -1621,6 +1621,8 @@
                           default=yes
   --enable-java-maintainer-mode
                           allow rebuilding of .class and .h files
+  --enable-libjava-multilib
+                          build libjava as multilib
   --disable-dependency-tracking  speeds up one-time build
   --enable-dependency-tracking   do not reject slow dependency extractors
   --enable-maintainer-mode  enable make rules and dependencies not useful
@@ -3379,6 +3381,16 @@
 fi
 
 
+# Check whether --enable-libjava-multilib was given.
+if test "${enable_libjava_multilib+set}" = set; then
+  enableval=$enable_libjava_multilib;
+fi
+
+if test "$enable_libjava_multilib" = no; then
+  multilib=no
+  ac_configure_args="$ac_configure_args --disable-multilib"
+fi
+
 # It may not be safe to run linking tests in AC_PROG_CC/AC_PROG_CXX.
 
 
diff -uNr gcc-4.9.1/libjava/configure.ac gcc-4.9.1.fink/libjava/configure.ac
--- gcc-4.9.1/libjava/configure.ac	2014-02-20 03:43:04.000000000 -0500
+++ gcc-4.9.1.fink/libjava/configure.ac	2014-08-26 15:49:59.000000000 -0400
@@ -141,6 +141,13 @@
 	[allow rebuilding of .class and .h files]))
 AM_CONDITIONAL(JAVA_MAINTAINER_MODE, test "$enable_java_maintainer_mode" = yes)
 
+AC_ARG_ENABLE(libjava-multilib,
+	AS_HELP_STRING([--enable-libjava-multilib], [build libjava as multilib]))
+if test "$enable_libjava_multilib" = no; then
+  multilib=no
+  ac_configure_args="$ac_configure_args --disable-multilib"
+fi
+
 # It may not be safe to run linking tests in AC_PROG_CC/AC_PROG_CXX.
 GCC_NO_EXECUTABLES
 
diff -uNr gcc-4.9.1/libjava/libgcj.spec.in gcc-4.9.1.fink/libjava/libgcj.spec.in
--- gcc-4.9.1/libjava/libgcj.spec.in	2011-02-04 00:51:57.000000000 -0500
+++ gcc-4.9.1.fink/libjava/libgcj.spec.in	2014-08-26 15:49:59.000000000 -0400
@@ -7,6 +7,6 @@
 *startfile: @THREADSTARTFILESPEC@ %(startfileorig)
 
 %rename lib liborig
-*lib: @LD_START_STATIC_SPEC@ @LIBGCJ_SPEC@ @LD_FINISH_STATIC_SPEC@ @LIBMATHSPEC@ @LDLIBICONV@ @GCSPEC@ @THREADSPEC@ @ZLIBSPEC@ @SYSTEMSPEC@ %(libgcc) @LIBSTDCXXSPEC@ %(liborig)
+*lib: @LD_START_STATIC_SPEC@ @LIBGCJ_SPEC@ @LD_FINISH_STATIC_SPEC@ @LIBMATHSPEC@ @GCSPEC@ @THREADSPEC@ @ZLIBSPEC@ @SYSTEMSPEC@ %(libgcc) @LIBSTDCXXSPEC@ %(liborig)
 
 *jc1: @HASH_SYNC_SPEC@ @DIVIDESPEC@ @CHECKREFSPEC@ @JC1GCSPEC@ @EXCEPTIONSPEC@ @BACKTRACESPEC@ @IEEESPEC@ @ATOMICSPEC@ @LIBGCJ_BC_SPEC@ -fkeep-inline-functions
diff -uNr gcc-4.9.1/libquadmath/configure gcc-4.9.1.fink/libquadmath/configure
--- gcc-4.9.1/libquadmath/configure	2014-07-16 06:06:03.000000000 -0400
+++ gcc-4.9.1.fink/libquadmath/configure	2014-08-26 15:49:59.000000000 -0400
@@ -3395,7 +3395,7 @@
 eval ac_try_echo="\"\$as_me:${as_lineno-$LINENO}: $ac_try_echo\""
 $as_echo "$ac_try_echo"; } >&5
   (eval "$ac_try") 2>&5
-  ac_status=$?
+  ac_status=0
   $as_echo "$as_me:${as_lineno-$LINENO}: \$? = $ac_status" >&5
   test $ac_status = 0; }; }; then
     cross_compiling=no
diff -uNr gcc-4.9.1/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc gcc-4.9.1.fink/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc
--- gcc-4.9.1/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc	2013-12-19 07:54:11.000000000 -0500
+++ gcc-4.9.1.fink/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.cc	2014-08-26 15:49:59.000000000 -0400
@@ -835,7 +835,8 @@
 
 COMPILER_CHECK(sizeof(__sanitizer_dirent) <= sizeof(dirent));
 CHECK_SIZE_AND_OFFSET(dirent, d_ino);
-#if SANITIZER_MAC
+#if SANITIZER_MAC && ( !defined(__DARWIN_64_BIT_INO_T) || __DARWIN_64_BIT_INO_T)
+// The 'd_seekoff' field is only present on OS X for 64-bit builds
 CHECK_SIZE_AND_OFFSET(dirent, d_seekoff);
 #else
 CHECK_SIZE_AND_OFFSET(dirent, d_off);
diff -uNr gcc-4.9.1/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h gcc-4.9.1.fink/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h
--- gcc-4.9.1/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h	2013-12-06 06:48:24.000000000 -0500
+++ gcc-4.9.1.fink/libsanitizer/sanitizer_common/sanitizer_platform_limits_posix.h	2014-08-26 15:49:59.000000000 -0400
@@ -275,12 +275,21 @@
 #endif
 
 #if SANITIZER_MAC
+# if ! defined(__DARWIN_64_BIT_INO_T) || __DARWIN_64_BIT_INO_T
   struct __sanitizer_dirent {
     unsigned long long d_ino;
     unsigned long long d_seekoff;
     unsigned short d_reclen;
     // more fields that we don't care about
   };
+# else
+  struct __sanitizer_dirent {
+    unsigned int d_ino;
+    // No d_seekoff for 32-bit
+    unsigned short d_reclen;
+    // more fields that we don't care about
+  };
+# endif
 #elif SANITIZER_ANDROID || defined(__x86_64__)
   struct __sanitizer_dirent {
     unsigned long long d_ino;
