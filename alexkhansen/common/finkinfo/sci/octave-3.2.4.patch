diff -Nurd octave-3.2.4.orig/src/Makefile.in octave-3.2.4/src/Makefile.in
--- octave-3.2.4.orig/src/Makefile.in	2009-06-03 08:32:49.000000000 -0400
+++ octave-3.2.4/src/Makefile.in	2011-08-30 18:51:07.000000000 -0400
@@ -67,7 +67,7 @@
 	cellfun.cc chol.cc ccolamd.cc colamd.cc colloc.cc \
 	conv2.cc convhulln.cc daspk.cc dasrt.cc dassl.cc det.cc \
 	dispatch.cc dlmread.cc dmperm.cc eig.cc eigs.cc fft.cc \
-	fft2.cc fftn.cc fftw.cc filter.cc find.cc fltk_backend.cc \
+	fft2.cc fftn.cc fftw.cc filter.cc find.cc  \
 	gammainc.cc gcd.cc getgrent.cc getpwent.cc getrusage.cc \
 	givens.cc hess.cc hex2num.cc inv.cc kron.cc lookup.cc \
 	lsode.cc lu.cc luinc.cc matrix_type.cc max.cc md5sum.cc \
@@ -327,9 +327,6 @@
 $(DLD_PICOBJ): \
 	ALL_CXXFLAGS := $(filter-out $(DLL_CXXDEFS), $(ALL_CXXFLAGS))
 
-fltk_backend.o pic/fltk_backend.o: \
-	ALL_CXXFLAGS := $(filter-out $(DLL_CXXDEFS), $(ALL_CXXFLAGS) $(GRAPHICS_CFLAGS))
-
 XERBLA = ../libcruft/blas-xtra/xerbla.o
 ifdef FPICFLAG
   PIC_XERBLA = ../libcruft/blas-xtra/pic/xerbla.o
@@ -669,7 +666,6 @@
 regexp.oct: OCT_LINK_DEPS += $(REGEX_LIBS)
 urlwrite.oct: OCT_LINK_DEPS += $(CURL_LIBS)
 __glpk__.oct: OCT_LINK_DEPS += $(GLPK_LIBS)
-fltk_backend.oct: OCT_LINK_DEPS += $(GRAPHICS_LIBS) $(FT2_LIBS)
 
 check: all
 .PHONY: check
diff -Nurd octave-3.2.4/src/DLD-FUNCTIONS/__magick_read__.cc octave-3.2.4.patched/src/DLD-FUNCTIONS/__magick_read__.cc
--- octave-3.2.4/src/DLD-FUNCTIONS/__magick_read__.cc	2009-08-25 04:26:01.000000000 -0400
+++ octave-3.2.4.patched/src/DLD-FUNCTIONS/__magick_read__.cc	2011-09-20 11:28:51.000000000 -0400
@@ -61,6 +61,8 @@
 
   Array<int> idx (dim_vector (4));
 
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
   Magick::ImageType type = imvec[0].type ();
 
   unsigned int mapsize = imvec[0].colorMapSize ();
@@ -212,6 +214,8 @@
 
   Array<int> idx (dim_vector (4));
 
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
   Magick::ImageType type = imvec[0].type ();
 
   switch (type)
@@ -357,6 +361,9 @@
   octave_value_list output;
 
 #ifdef HAVE_MAGICK
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
+  std::vector<Magick::Image> imvec;
 
   if (args.length () > 2 || args.length () < 1 || ! args(0).is_string ()
       || nargout > 3)
@@ -375,8 +382,6 @@
       frameidx(0) = 1;
     }
 
-  std::vector<Magick::Image> imvec;
-
   try
     {
       // Read a file into vector of image objects
@@ -463,6 +468,8 @@
               const Octave_map& options,
               bool)
 {
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
   int nframes = static_cast<int>(imvec.size ());
   bool something_set = 0;
 
@@ -502,6 +509,9 @@
 static void
 encode_bool_image (std::vector<Magick::Image>& imvec, const octave_value& img)
 {
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
+
   unsigned int nframes = 1;
   boolNDArray m = img.bool_array_value ();
 
@@ -545,6 +555,8 @@
                    const octave_value& img,
                    bool has_map)
 {
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
   unsigned int bitdepth = 0;
   T m;
 
@@ -659,6 +671,9 @@
   unsigned int mapsize = cmap.dim1 ();
   int nframes = static_cast<int>(imvec.size ());
 
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
+
   for (int fnum = 0; fnum < nframes; fnum++)
     {
       imvec[fnum].colorMapSize (mapsize);
@@ -699,6 +714,9 @@
              const octave_value& map = octave_value (),
              const octave_value& params = octave_value ())
 {
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
+
   std::vector<Magick::Image> imvec;
 
   bool has_map = map.is_defined ();
@@ -819,6 +837,9 @@
 
 static octave_value
 magick_to_octave_value (const Magick::EndianType magick)
+
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
 {
   switch (magick)
     {
@@ -836,6 +857,8 @@
 static octave_value
 magick_to_octave_value (const Magick::ResolutionType magick)
 {
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
   switch (magick)
     {
       case Magick::PixelsPerInchResolution:
@@ -852,6 +875,8 @@
 static octave_value
 magick_to_octave_value (const Magick::ImageType magick)
 {
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
   switch (magick)
     {
       case Magick::BilevelType:
@@ -897,6 +922,8 @@
   octave_value_list output;
 
 #ifdef HAVE_MAGICK
+  // Initialize GraphicsMagick
+  InitializeMagick(*argv);
 
   if (args.length () < 1 || ! args (0).is_string ())
     {
