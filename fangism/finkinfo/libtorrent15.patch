--- libtorrent-0.12.9-orig/rak/allocators.h	2011-06-21 22:37:15.000000000 -0700
+++ libtorrent-0.12.9/rak/allocators.h	2011-06-21 22:42:44.000000000 -0700
@@ -77,8 +77,15 @@
 
   static pointer alloc_size(size_type size) {
     pointer ptr = NULL;
+#ifdef	HAVE_POSIX_MEMALIGN
     int __UNUSED result = posix_memalign((void**)&ptr, LT_SMP_CACHE_BYTES, size);
 
+#elif	defined(__APPLE__)
+	// apple-darwin's malloc is already Altivec-aligned (16B)
+	ptr = static_cast<pointer>(malloc(size));
+#else
+#error	"Missing equivalent of posix_memalign()."
+#endif
     return ptr;
   }
 
--- libtorrent-0.12.9-orig/src/torrent/common.h	2011-06-21 23:12:25.000000000 -0700
+++ libtorrent-0.12.9/src/torrent/common.h	2011-06-21 23:33:19.000000000 -0700
@@ -37,6 +37,24 @@
 #ifndef LIBTORRENT_COMMON_H
 #define LIBTORRENT_COMMON_H
 
+#if (__GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 2))
+#if defined(__APPLE__)
+#define	USE_DARWIN_ATOMICS
+#endif
+#endif
+
+#ifdef	USE_DARWIN_ATOMICS
+#include <libkern/OSAtomic.h>
+#define	__sync_add_and_fetch(x, y)	OSAtomicAdd32Barrier(y, x)
+#define	__sync_sub_and_fetch(x, y)	OSAtomicAdd32Barrier(-(y), x)
+#define	__sync_and_and_fetch(x, y)	OSAtomicAnd32Barrier(y, x)
+#define	__sync_or_and_fetch(x, y)	OSAtomicOr32Barrier(y, x)
+#define	__sync_lock_test_and_set(x, y)	OSAtomicTestAndSetBarrier(y, x)
+#define	__sync_bool_compare_and_swap(x, y, z)	OSAtomicCompareAndSwap32Barrier(y, z, x)
+#define	__sync_fetch_and_or(x, y)	( __sync_or_and_fetch(x, y), *x )
+#define	__sync_fetch_and_and(x, y)	( __sync_and_and_fetch(x, y), *x )
+#endif
+
 #include <inttypes.h>
 #include <cstddef.h>
 
--- libtorrent-0.12.9-orig/src/torrent/utils/thread_base.h	2011-06-21 23:12:25.000000000 -0700
+++ libtorrent-0.12.9/src/torrent/utils/thread_base.h	2011-06-21 23:33:19.000000000 -0700
@@ -102,7 +102,6 @@
   virtual const char* name() const = 0;
 
   Poll*               poll()            { return m_poll; }
-  signal_type*        signal_bitfield() { return &m_signal_bitfield; }
   pthread_t           pthread()         { return m_thread; }
 
   virtual void        init_thread() = 0;
@@ -150,6 +150,8 @@

   slot_void           m_slot_do_work;
   slot_timer          m_slot_next_timeout;
+public:
+  signal_type*        signal_bitfield() { return &m_signal_bitfield; }
 };
 
 inline void
--- libtorrent-0.12.9-orig/src/net/socket_set.h	2011-06-26 21:28:11.000000000 -0700
+++ libtorrent-0.12.9/src/net/socket_set.h	2011-06-26 21:28:56.000000000 -0700
@@ -53,12 +53,12 @@
 
 // Propably should rename to EventSet...
 
-class SocketSet : private std::vector<Event*, rak::cacheline_allocator<> > {
+class SocketSet : private std::vector<Event*, rak::cacheline_allocator<Event*> > {
 public:
   typedef uint32_t    size_type;
 
-  typedef std::vector<Event*, rak::cacheline_allocator<> > base_type;
-  typedef std::vector<size_type, rak::cacheline_allocator<> > Table;
+  typedef std::vector<Event*, rak::cacheline_allocator<Event*> > base_type;
+  typedef std::vector<size_type, rak::cacheline_allocator<size_type> > Table;
 
   static const size_type npos = static_cast<size_type>(-1);
 
--- libtorrent-0.12.9-orig/src/torrent/utils/extents.h	2011-07-16 17:26:37.000000000 -0700
+++ libtorrent-0.12.9/src/torrent/utils/extents.h	2011-07-17 00:28:48.000000000 -0700
@@ -39,6 +39,19 @@
 
 #include <tr1/array>
 
+#if (__GNUC__ == 4 && __GNUC_MINOR__ < 1 && __GNUC_PATCHLEVEL__ < 2)
+// apple-gcc-4.0.1 missing definition of std::tr1::array::assign
+namespace std {
+namespace tr1 {
+template<typename _Tp, size_t _Nm>
+void
+array<_Tp,_Nm>::assign(const value_type& v) {
+	std::fill_n(this->begin(), this->size(), v);
+}
+}	// end namespace tr1
+}	// end namespace std
+#endif
+
 namespace torrent {
 
 template <typename Key, typename Tp, unsigned int TableSize, unsigned int TableBits>
--- libtorrent-0.13.0-orig/src/torrent/utils/log.cc	2011-12-10 17:05:09.000000000 -0800
+++ libtorrent-0.13.0/src/torrent/utils/log.cc	2011-12-10 17:05:16.000000000 -0800
@@ -232,7 +232,7 @@
 log_cleanup() {
   pthread_mutex_lock(&log_mutex);
 
-  log_groups.assign(log_group());
+  std::fill(log_groups.begin(), log_groups.end(), log_group());
   log_outputs.clear();
   log_children.clear();
 
--- libtorrent-0.13.2-orig/src/torrent/utils/signal_bitfield.cc	2012-07-31 17:33:38.000000000 -0700
+++ libtorrent-0.13.2/src/torrent/utils/signal_bitfield.cc	2012-07-31 17:38:56.000000000 -0700
@@ -52,7 +52,7 @@
     throw internal_error("signal_bitfield::add_signal(...): Cannot add empty slot.");
 
   unsigned int index = m_size;
-  __sync_add_and_fetch(&m_size, 1);
+  __sync_add_and_fetch((int32_t*)(&m_size), 1);
 
   m_slots[index] = slot;
   return index;
@@ -62,7 +62,7 @@
 signal_bitfield::work() {
   bitfield_type bitfield;
 
-  while (!__sync_bool_compare_and_swap(&m_bitfield, (bitfield = m_bitfield), 0))
+  while (!__sync_bool_compare_and_swap((int32_t*)(&m_bitfield), (bitfield = m_bitfield), 0))
     ; // Do nothing.
 
   unsigned int i = 0;
--- libtorrent-0.13.2-orig/src/torrent/utils/thread_base.cc	2012-07-31 17:46:01.000000000 -0700
+++ libtorrent-0.13.2/src/torrent/utils/thread_base.cc	2012-08-01 13:00:55.000000000 -0700
@@ -69,7 +69,7 @@
 
 void
 thread_base::stop_thread() {
-  __sync_fetch_and_or(&m_flags, flag_do_shutdown);
+  __sync_fetch_and_or((uint32_t*)&m_flags, flag_do_shutdown);
   interrupt();
 }
 
@@ -88,7 +88,7 @@
 
 void
 thread_base::interrupt() {
-  __sync_fetch_and_or(&m_flags, flag_no_timeout);
+  __sync_fetch_and_or((uint32_t*)&m_flags, flag_no_timeout);
 
   while (is_polling() && has_no_timeout()) {
     pthread_kill(m_thread, SIGUSR1);
@@ -115,7 +115,7 @@
       thread->call_events();
       thread->signal_bitfield()->work();
 
-      __sync_fetch_and_or(&thread->m_flags, flag_polling);
+      __sync_fetch_and_or((uint32_t*)&thread->m_flags, flag_polling);
 
       // Call again after setting flag_polling to ensure we process
       // any events set while it was working.
@@ -143,7 +143,7 @@
         poll_flags = torrent::Poll::poll_worker_thread;
 
       thread->m_poll->do_poll(next_timeout, poll_flags);
-      __sync_fetch_and_and(&thread->m_flags, ~(flag_polling | flag_no_timeout));
+      __sync_fetch_and_and((uint32_t*)&thread->m_flags, ~(flag_polling | flag_no_timeout));
     }
 
   } catch (torrent::shutdown_exception& e) {
--- libtorrent-0.13.2-orig/src/thread_disk.cc	2012-08-01 13:03:26.000000000 -0700
+++ libtorrent-0.13.2/src/thread_disk.cc	2012-08-01 13:03:45.000000000 -0700
@@ -64,7 +64,7 @@
     if ((m_flags & flag_did_shutdown))
       throw internal_error("Already trigged shutdown.");
 
-    __sync_or_and_fetch(&m_flags, flag_did_shutdown);
+    __sync_or_and_fetch((uint32_t*)&m_flags, flag_did_shutdown);
     throw shutdown_exception();
   }
 
