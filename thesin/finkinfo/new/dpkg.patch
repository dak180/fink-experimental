diff -ruN dpkg-1.17.6.orig/fink/buildflags.conf dpkg-1.17.6/fink/buildflags.conf
--- dpkg-1.17.6.orig/fink/buildflags.conf	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/buildflags.conf	2013-06-22 20:26:06.000000000 -0600
@@ -0,0 +1,30 @@
+# defaults
+APPEND CFLAGS -g -O2
+APPEND CXXFLAGS -g -O2
+APPEND FFLAGS -g -O2
+
+# debian stackprotector
+APPEND CFLAGS -fstack-protector         
+APPEND CXXFLAGS -fstack-protector         
+
+# debian pie
+APPEND CFLAGS -fPIE
+APPEND CXXFLAGS -fPIE
+APPEND LDFLAGS -fPIE -Wl,-pie
+
+# debian relro
+APPEND LDFLAGS -Wl,-read_only_stubs
+
+# debian bindnow
+APPEND LDFLAGS -Wl,-bind_at_load
+
+# debian fortify
+APPEND CPPFLAGS -D_FORTIFY_SOURCE=2
+
+# debian format
+PREPEND CFLAGS -Wformat -Werror=format-security
+PREPEND CXXFLAGS -Wformat -Werror=format-security
+
+# fink defaults
+PREPEND CPPFLAGS -I@FINKPREFIX@/include
+PREPEND LDFLAGS -L@FINKPREFIX@/lib
diff -ruN dpkg-1.17.6.orig/fink/dpkg.cron.daily dpkg-1.17.6/fink/dpkg.cron.daily
--- dpkg-1.17.6.orig/fink/dpkg.cron.daily	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/dpkg.cron.daily	2013-09-10 09:13:20.000000000 -0600
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+# Backup the 7 last versions of dpkg's status file
+if cd @FINKPREFIX@/var/backups ; then
+    if ! cmp -s dpkg.status.0 @FINKPREIFX@/var/lib/dpkg/status ; then
+            cp -p @FINKPREFIX@/var/lib/dpkg/status dpkg.status
+            savelog -c 7 dpkg.status >/dev/null
+    fi
+fi
+
diff -ruN dpkg-1.17.6.orig/fink/md5sum dpkg-1.17.6/fink/md5sum
--- dpkg-1.17.6.orig/fink/md5sum	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/md5sum	2013-05-28 08:30:00.000000000 -0600
@@ -0,0 +1,322 @@
+#!/usr/bin/perl
+use strict;
+use warnings;
+
+## md5sum wrapper for Mac md5 tool ##
+# This wrapper should be installed in bin/md5sum. Since dpkg 1.10, md5sum was
+# removed, this script is intended to replace it for fink systems.
+#
+# Written by Sjors Gielen, licensed under the same license as dpkg, the
+# GNU General Public License version 2.
+
+my $md5_bin = "/sbin/md5";
+my $binary_mode = "";
+my $check_mode = 0;
+my $quiet = 0;
+my $warn  = 0;
+my $return = 0;
+my @files;
+
+read_args(@ARGV);
+
+if( @files == 0 )
+{
+  push @files, "-";
+}
+
+if( $check_mode )
+{
+  # `md5` doesn't have a check mode, so we have to implement it ourselves
+  run_check_mode( @files );
+  exit $return;
+}
+
+if( $quiet || $warn )
+{
+  print STDERR <<"NOCHECKMODE";
+$0: the --status, --warn and -w options are meaningful only when verifying checksums
+Try `md5sum --help' for more information.
+NOCHECKMODE
+  exit $return;
+}
+
+my $stdin_done = 0;
+for my $file( @files )
+{
+  if( $file eq "-" and $stdin_done )
+  {
+    # second - is empty, so md5sum is of the empty string
+    print "d41d8cd98f00b204e9800998ecf8427e  $binary_mode-\n";
+    next;
+  }
+
+  my $checksum = checksum_for( $file );
+  if( !$checksum ) {
+    # error was already printed
+    next;
+  }
+
+  # the old md5sum, nor md5, understand binary mode, so...
+  print "$checksum  $binary_mode$file\n";
+
+  if( $file eq "-" )
+  {
+    $stdin_done = 1;
+  }
+}
+
+exit;
+
+sub help_and_exit()
+{
+  print <<"HELP";
+Usage: $0 [OPTION] [FILE]...
+Print or check MD5 (128-bit) checksums.
+With no FILE, or when FILE is -, read standard input.
+This md5sum is a wrapper around Mac's md5. If you can use md5 instead, please
+do, since this script is likely to be removed at some point.
+
+  -b, --binary            no difference on Mac platforms
+  -c, --check             read MD5 sums from the FILEs and check them
+  -t, --text              no difference on Mac platforms
+
+The following two options are useful only when verifying checksums:
+      --status            don't output anything, status code shows success
+  -w, --warn              warn about improperly formatted checksum lines
+
+      --help     display this help and exit
+      --version  output version information and exit
+
+The sums are computed as described in RFC 1321.  When checking, the input
+should be a former output of this program.  The default mode is to print
+a line with checksum, a character indicating type (`*' for binary, ` ' for
+text), and name for each FILE.
+
+Report bugs to <http://fink.sourceforge.net>.
+HELP
+  exit;
+}
+
+sub version_and_exit
+{
+  print <<"VERSION";
+md5sum (Fink md5sum) 1.0
+Copyright (C) 2010 Sjors Gielen
+This wrapper should be installed in bin/md5sum. Since dpkg 1.10, md5sum was
+removed, this script is intended to replace it for fink systems.
+License from dpkg: GNU GPL version 2.
+This is free software: you are free to change and redistribute it.
+There is NO WARRENTY, to the extent permitted by law.
+
+Written by Sjors Gielen.
+VERSION
+  exit;
+}
+
+sub read_args
+{
+  my $no_opts = 0;
+  for(@_)
+  {
+    if( !$no_opts and /^--(.*)$/ )
+    {
+      my $opt = $1;
+      if( $opt eq "help" )
+      {
+        help_and_exit();
+      }
+      elsif( $opt eq "version" )
+      {
+        version_and_exit();
+      }
+      elsif( $opt eq "text" )
+      {
+        # ignore
+      }
+      elsif( $opt eq "binary" )
+      {
+        $binary_mode = "*";
+      }
+      elsif( $opt eq "check" )
+      {
+        $check_mode = 1;
+      }
+      elsif( $opt eq "status" )
+      {
+        $quiet = 1;
+      }
+      elsif( $opt eq "warn" )
+      {
+        $warn = 1;
+      }
+      elsif( $opt eq "" )
+      {
+        $no_opts = 1;
+      }
+      else
+      {
+        print STDERR <<"HELPMSG";
+$0: unrecognised option `--$opt'
+Try `$0 --help' for more information.
+HELPMSG
+        exit;
+      }
+    }
+    elsif( !$no_opts and /^-(.+)$/ )
+    {
+      my @opts = split //, $1;
+      for(@opts) {
+        if( $_ eq "t" )
+        {
+          # ignore
+        }
+        elsif( $_ eq "b" )
+        {
+          $binary_mode = "*";
+        }
+        elsif( $_ eq "c" )
+        {
+          $check_mode = 1;
+        }
+        elsif( $_ eq "w" )
+        {
+          $warn = 1;
+        }
+        elsif( $_ eq "" )
+        {
+          # - here is just STDIN
+          push @files, '-';
+        }
+        else
+        {
+          print STDERR <<"ERRORMSG";
+$0: invalid option -- $_
+Try `md5sum --help' for more information.
+ERRORMSG
+          exit;
+        }
+      }
+    }
+    else
+    {
+      push @files, $_;
+    }
+  }
+}
+
+sub checksum_for
+{
+  my ($file) = @_;
+  my $sum;
+  if( $file eq "-" )
+  {
+    # read from stdin
+    $sum = `$md5_bin -p`;
+    1 while(chomp $sum);
+    # take only the last line, that's the checksum
+    $sum = (split /\n/, $sum)[-1];
+    return $sum;
+  }
+
+  # try to open the file to get the system error ourselves
+  eval {
+    open my $f, $file or die "$!\n";
+    close $f;
+  };
+  if( $@ ) {
+    print STDERR "$0: $file: $@";
+    $return = 1;
+    return "";
+  }
+
+  $sum = `$md5_bin -q "$file"`;
+  1 while(chomp $sum);
+  return $sum;
+}
+
+sub run_check_mode
+{
+  my @files = @_;
+  my $read_stdin = 0;
+  my $f;
+
+  for my $md5file( @files )
+  {
+    eval { open $f, $md5file or die $! };
+    if( $@ )
+    {
+      print STDERR "$0: $md5file: $@\n";
+      next;
+    }
+
+    my $lines = 0;
+    my $actual_lines = 0;
+    my $valid = 0;
+    my $errors = 0;
+    while(<$f>) {
+      my $line = $_;
+      $actual_lines++;
+
+      # check this line
+      my ($sum, $file) = $line =~ /^([0-9a-fA-F]{32}) (?: |\*)(.+)$/;
+      if( !defined($sum) || !defined($file)) {
+        if( $warn && $line !~ /^#/ )
+        {
+          warn "$0: $md5file: $actual_lines: improperly formatted MD5 checksum line\n";
+        }
+        next;
+      }
+
+      $lines++;
+      my $checksum = checksum_for($file);
+      if( !$checksum )
+      {
+        if( !$quiet )
+        {
+          print "$file: FAILED open or read\n";
+        }
+        $errors++;
+      }
+      elsif( lc($checksum) eq lc($sum) )
+      {
+        if( !$quiet )
+        {
+          print "$file: OK\n";
+        }
+        $valid++;
+      }
+      else
+      {
+        $return = 1;
+        if( !$quiet )
+        {
+          print "$file: FAILED\n";
+        }
+      }
+    }
+
+    close $f;
+    if( $lines == 0 )
+    {
+      warn "$0: $md5file: no properly formatted MD5 checksum lines found\n";
+      $return = 1;
+    }
+    if( $errors > 0 )
+    {
+      my $s = $lines == 1 ? "" : "s";
+      if( !$quiet )
+      {
+        warn "$0: WARNING: $errors of $lines listed file$s could not be read\n";
+      }
+    }
+    if( $valid < ($lines-$errors) )
+    {
+      my $checksums = $lines - $errors;
+      my $nomatch = $checksums - $valid;
+      if( !$quiet )
+      {
+        warn "$0: WARNING: $nomatch of $checksums computed checksums did NOT match\n";
+      }
+    }
+  }
+}
diff -ruN dpkg-1.17.6.orig/fink/origins dpkg-1.17.6/fink/origins
--- dpkg-1.17.6.orig/fink/origins	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/origins	2012-07-02 16:14:45.000000000 -0600
@@ -0,0 +1,3 @@
+Vendor: Fink
+Vendor-URL: http://fink.sourceforge.net/
+Bugs: http://fink.sourceforge.net/
diff -ruN dpkg-1.17.6.orig/fink/patches/add-BOD.patch dpkg-1.17.6/fink/patches/add-BOD.patch
--- dpkg-1.17.6.orig/fink/patches/add-BOD.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/add-BOD.patch	2014-03-25 11:37:48.000000000 -0600
@@ -0,0 +1,10 @@
+--- dpkg.orig/dpkg-deb/build.c
++++ dpkg/dpkg-deb/build.c
+@@ -341,6 +341,7 @@
+   "Installer-Menu-Item",
+   "Homepage",
+   "Tag",
++  "BuildDependsOnly",
+   NULL
+ };
+ 
diff -ruN dpkg-1.17.6.orig/fink/patches/add-install-info.patch dpkg-1.17.6/fink/patches/add-install-info.patch
--- dpkg-1.17.6.orig/fink/patches/add-install-info.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/add-install-info.patch	2014-03-25 11:38:29.000000000 -0600
@@ -0,0 +1,186 @@
+--- dpkg.orig/utils/Makefile.am
++++ dpkg/utils/Makefile.am
+@@ -41,6 +41,16 @@
+ 	$(SSD_LIBS)
+ endif
+ 
++sbin_PROGRAMS += dpkg-install-info
++
++# Automake has its own install-info rule, gah
++dpkg_install_info_SOURCES = install-info.c
++
++dpkg_install_info_LDADD = \
++	../lib/compat/libcompat.a
++
++transform = s/dpkg-install-info/install-info/; $(program_transform_name)
++
+ install-data-local:
+ if BUILD_UPDATE_ALTERNATIVES
+ 	$(MKDIR_P) $(DESTDIR)$(sysconfdir)/alternatives
+@@ -50,6 +60,7 @@
+ 
+ uninstall-local:
+ 	rm -f $(DESTDIR)$(sysconfdir)/alternatives/README
++	rm -f $(DESTDIR)$(sbindir)/install-info
+ 
+ TEST_ENV_VARS = DPKG_DATADIR=$(top_srcdir)
+ 
+--- dpkg.orig/utils/Makefile.in
++++ dpkg/utils/Makefile.in
+@@ -78,7 +78,6 @@
+ install_sh_PROGRAM = $(install_sh) -c
+ install_sh_SCRIPT = $(install_sh) -c
+ INSTALL_HEADER = $(INSTALL_DATA)
+-transform = $(program_transform_name)
+ NORMAL_INSTALL = :
+ PRE_INSTALL = :
+ POST_INSTALL = :
+@@ -89,7 +88,7 @@
+ host_triplet = @host@
+ bin_PROGRAMS = $(am__EXEEXT_1)
+ @BUILD_UPDATE_ALTERNATIVES_TRUE@am__append_1 = update-alternatives
+-sbin_PROGRAMS = $(am__EXEEXT_2)
++sbin_PROGRAMS = $(am__EXEEXT_2) dpkg-install-info$(EXEEXT)
+ @BUILD_START_STOP_DAEMON_TRUE@am__append_2 = start-stop-daemon
+ DIST_COMMON = $(top_srcdir)/Makecheck.am $(srcdir)/Makefile.in \
+ 	$(srcdir)/Makefile.am $(top_srcdir)/build-aux/depcomp
+@@ -120,6 +119,9 @@
+ @BUILD_START_STOP_DAEMON_TRUE@am__EXEEXT_2 =  \
+ @BUILD_START_STOP_DAEMON_TRUE@	start-stop-daemon$(EXEEXT)
+ PROGRAMS = $(bin_PROGRAMS) $(sbin_PROGRAMS)
++am_dpkg_install_info_OBJECTS = install-info.$(OBJEXT)
++dpkg_install_info_OBJECTS = $(am_dpkg_install_info_OBJECTS)
++dpkg_install_info_DEPENDENCIES = ../lib/compat/libcompat.a
+ am__start_stop_daemon_SOURCES_DIST = start-stop-daemon.c
+ @BUILD_START_STOP_DAEMON_TRUE@am_start_stop_daemon_OBJECTS =  \
+ @BUILD_START_STOP_DAEMON_TRUE@	start-stop-daemon.$(OBJEXT)
+@@ -160,8 +162,10 @@
+ am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)
+ am__v_CCLD_0 = @echo "  CCLD    " $@;
+ am__v_CCLD_1 = 
+-SOURCES = $(start_stop_daemon_SOURCES) $(update_alternatives_SOURCES)
+-DIST_SOURCES = $(am__start_stop_daemon_SOURCES_DIST) \
++SOURCES = $(dpkg_install_info_SOURCES) $(start_stop_daemon_SOURCES) \
++	$(update_alternatives_SOURCES)
++DIST_SOURCES = $(dpkg_install_info_SOURCES) \
++	$(am__start_stop_daemon_SOURCES_DIST) \
+ 	$(update_alternatives_SOURCES)
+ am__can_run_installinfo = \
+   case $$AM_UPDATE_INFO_DIR in \
+@@ -188,6 +192,7 @@
+ ETAGS = etags
+ CTAGS = ctags
+ DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
++transform = s/dpkg-install-info/install-info/; $(program_transform_name)
+ ACLOCAL = @ACLOCAL@
+ AMTAR = @AMTAR@
+ AM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@
+@@ -361,6 +366,12 @@
+ @BUILD_START_STOP_DAEMON_TRUE@	../lib/compat/libcompat.a \
+ @BUILD_START_STOP_DAEMON_TRUE@	$(SSD_LIBS)
+ 
++
++# Automake has its own install-info rule, gah
++dpkg_install_info_SOURCES = install-info.c
++dpkg_install_info_LDADD = \
++	../lib/compat/libcompat.a
++
+ TEST_ENV_VARS = DPKG_DATADIR=$(top_srcdir)
+ test_tmpdir = t.tmp
+ test_cases = \
+@@ -486,6 +497,10 @@
+ clean-sbinPROGRAMS:
+ 	-test -z "$(sbin_PROGRAMS)" || rm -f $(sbin_PROGRAMS)
+ 
++dpkg-install-info$(EXEEXT): $(dpkg_install_info_OBJECTS) $(dpkg_install_info_DEPENDENCIES) $(EXTRA_dpkg_install_info_DEPENDENCIES) 
++	@rm -f dpkg-install-info$(EXEEXT)
++	$(AM_V_CCLD)$(LINK) $(dpkg_install_info_OBJECTS) $(dpkg_install_info_LDADD) $(LIBS)
++
+ start-stop-daemon$(EXEEXT): $(start_stop_daemon_OBJECTS) $(start_stop_daemon_DEPENDENCIES) $(EXTRA_start_stop_daemon_DEPENDENCIES) 
+ 	@rm -f start-stop-daemon$(EXEEXT)
+ 	$(AM_V_CCLD)$(LINK) $(start_stop_daemon_OBJECTS) $(start_stop_daemon_LDADD) $(LIBS)
+@@ -500,6 +515,7 @@
+ distclean-compile:
+ 	-rm -f *.tab.c
+ 
++@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/install-info.Po@am__quote@
+ @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/start-stop-daemon.Po@am__quote@
+ @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/update-alternatives.Po@am__quote@
+ 
+@@ -734,6 +750,7 @@
+ 
+ uninstall-local:
+ 	rm -f $(DESTDIR)$(sysconfdir)/alternatives/README
++	rm -f $(DESTDIR)$(sbindir)/install-info
+ 
+ TEST_VERBOSE ?= 0
+ 
+--- dpkg.orig/utils/install-info.c
++++ dpkg/utils/install-info.c
+@@ -0,0 +1,66 @@
++/*
++ * install-info.c - transitional ginstall-info wrapper
++ *
++ * Copyright © 2009 Raphaël Hertzog <hertzog@debian.org>
++ *
++ * This is free software; you can redistribute it and/or modify
++ * it under the terms of the GNU General Public License as published by
++ * the Free Software Foundation; either version 2 of the License, or
++ * (at your option) any later version.
++ *
++ * This is distributed in the hope that it will be useful,
++ * but WITHOUT ANY WARRANTY; without even the implied warranty of
++ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++ * GNU General Public License for more details.
++ *
++ * You should have received a copy of the GNU General Public License
++ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
++ */
++
++#include <config.h>
++#include <compat.h>
++
++#include <errno.h>
++#include <string.h>
++#include <unistd.h>
++#include <stdlib.h>
++#include <stdio.h>
++
++#define SELF "@FINKPREFIX@/sbin/install-info"
++#define WRAPPED "@FINKPREFIX@/bin/install-info"
++
++#define warn(...) fprintf(stderr, "install-info: warning: " __VA_ARGS__)
++#define error(...) fprintf(stderr, "install-info: error: " __VA_ARGS__)
++
++int
++main(int argc, char **argv)
++{
++    if (strcmp(argv[0], SELF) == 0) {
++	warn("don't call programs like install-info with an absolute path,\n");
++	warn("%s provided by dpkg is deprecated and will go away soon;\n",
++	     SELF);
++	warn("its replacement lives in @FINKPREFIX@/bin/.\n");
++    }
++
++	execv(WRAPPED, argv);
++	if (errno == ENOENT) {
++	    if (getenv("DPKG_RUNNING_VERSION") != NULL) {
++		const char *pkg;
++
++		pkg = getenv("DPKG_MAINTSCRIPT_PACKAGE");
++
++		warn("maintainer scripts should not call install-info anymore,\n");
++		warn("this is handled now by a dpkg trigger provided by the\n");
++		warn("install-info package; package %s should be updated.\n",
++		     pkg);
++	    } else {
++		warn("nothing done since %s doesn't exist,\n", WRAPPED);
++		warn("you might want to install an info-browser package.\n");
++	    }
++	} else {
++	    error("can't execute %s: %s\n", WRAPPED, strerror(errno));
++	    return 1;
++	}
++
++    return 0;
++}
diff -ruN dpkg-1.17.6.orig/fink/patches/bsdutils.patch dpkg-1.17.6/fink/patches/bsdutils.patch
--- dpkg-1.17.6.orig/fink/patches/bsdutils.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/bsdutils.patch	2014-03-25 11:37:40.000000000 -0600
@@ -0,0 +1,24 @@
+--- dpkg.orig/scripts/dpkg-genchanges.pl
++++ dpkg/scripts/dpkg-genchanges.pl
+@@ -466,8 +466,8 @@
+ $fields->{'Format'} = $substvars->get('Format');
+ 
+ if (!defined($fields->{'Date'})) {
+-    chomp(my $date822 = `date -R`);
+-    subprocerr('date -R') if $?;
++    chomp(my $date822 = `date +"%%a, %%d %%b %%Y %%H:%%M:%%S %%z"`);
++    subprocerr('date +"%%a, %%d %%b %%Y %%H:%%M:%%S %%z"') if $?;
+     $fields->{'Date'}= $date822;
+ }
+ 
+--- dpkg.orig/scripts/dpkg-gencontrol.pl
++++ dpkg/scripts/dpkg-gencontrol.pl
+@@ -340,7 +340,7 @@
+     if (!$c) {
+         chdir("$packagebuilddir")
+             or syserr(_g("chdir for du to \`%s'"), $packagebuilddir);
+-        exec('du', '-k', '-s', '--apparent-size', '.')
++        exec('du', '-k', '-s', '.')
+             or syserr(_g('unable to execute %s'), 'du');
+     }
+     my $duo = '';
diff -ruN dpkg-1.17.6.orig/fink/patches/build-fix.patch dpkg-1.17.6/fink/patches/build-fix.patch
--- dpkg-1.17.6.orig/fink/patches/build-fix.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/build-fix.patch	2014-03-25 11:40:56.000000000 -0600
@@ -0,0 +1,102 @@
+--- dpkg.orig/dselect/Makefile.am
++++ dpkg/dselect/Makefile.am
+@@ -8,7 +8,7 @@
+ AM_CPPFLAGS = \
+ 	-DLOCALEDIR=\"$(localedir)\" \
+ 	-DADMINDIR=\"$(admindir)\" -DLIBDIR=\"$(pkglibdir)\" \
+-	-DLOCALLIBDIR=\"/usr/local/lib/dpkg\" \
++	-DLOCALLIBDIR=\"@FINKPREFIX@/lib/dpkg\" \
+ 	-idirafter $(top_srcdir)/lib/compat \
+ 	-iquote $(builddir) \
+ 	-I$(top_builddir) \
+--- dpkg.orig/dselect/Makefile.in
++++ dpkg/dselect/Makefile.in
+@@ -374,7 +374,7 @@
+ AM_CPPFLAGS = \
+ 	-DLOCALEDIR=\"$(localedir)\" \
+ 	-DADMINDIR=\"$(admindir)\" -DLIBDIR=\"$(pkglibdir)\" \
+-	-DLOCALLIBDIR=\"/usr/local/lib/dpkg\" \
++	-DLOCALLIBDIR=\"@FINKPREFIX@/local/lib/dpkg\" \
+ 	-idirafter $(top_srcdir)/lib/compat \
+ 	-iquote $(builddir) \
+ 	-I$(top_builddir) \
+--- dpkg.orig/lib/dpkg/subproc.c
++++ dpkg/lib/dpkg/subproc.c
+@@ -104,7 +104,9 @@
+ 	void (*out)(const char *fmt, ...) DPKG_ATTR_PRINTF(1);
+ 	int n;
+ 
+-	if (flags & PROCWARN)
++    /* FINK LOCAL: Tar status 1 is a warning. */
++	if ((flags & PROCWARN) || (n == 1 && strncmp(desc, "tar", 3) == 0))
++    /* FINK LOCAL */
+ 		out = warning;
+ 	else
+ 		out = ohshit;
+--- dpkg.orig/src/filesdb.c
++++ dpkg/src/filesdb.c
+@@ -34,6 +34,9 @@
+ #include <assert.h>
+ #include <errno.h>
+ #include <string.h>
++#if defined(__APPLE__) && defined(__MACH__)
++	#include <ctype.h>
++#endif
+ #include <pwd.h>
+ #include <grp.h>
+ #include <fcntl.h>
+@@ -577,7 +580,7 @@
+ 
+ static int hash(const char *name) {
+   int v= 0;
+-  while (*name) { v *= 1787; v += *name; name++; }
++  while (*name) { v *= 1787; v += tolower(*name); name++; }
+   return v;
+ }
+ 
+@@ -593,7 +596,7 @@
+   while (*pointerp) {
+     /* XXX: Why is the assert needed? It's checking already added entries. */
+     assert((*pointerp)->name[0] == '/');
+-    if (strcmp((*pointerp)->name + 1, name) == 0)
++    if (strcasecmp((*pointerp)->name + 1, name) == 0)
+       break;
+     pointerp= &(*pointerp)->next;
+   }
+--- dpkg.orig/src/help.c
++++ dpkg/src/help.c
+@@ -40,6 +40,19 @@
+ #include "filesdb.h"
+ #include "main.h"
+ 
++/* FINK LOCAL start */
++// SystemB setenv() crashes when value == 0, but this occasionally happens
++// in dpkg.
++int _setenv(const char *name, const char *value, int overwrite) {
++  if(name == 0 || value == 0) {
++    return 0;
++  }
++  return setenv(name, value, overwrite);
++}
++#undef setenv
++#define setenv _setenv
++/* FINK LOCAL end */
++
+ const char *const statusstrings[]= {
+   [stat_notinstalled]    = N_("not installed"),
+   [stat_configfiles]     = N_("not installed but configs remain"),
+@@ -116,6 +129,14 @@
+     const char *path, *path_end;
+     size_t path_len;
+ 
++    /* FINK LOCAL start */
++    if (strncmp(prog[0],"/",1)==0 && stat(*prog, &stab) == 0)
++    {
++      // prog is an absolute path which exists, accept it
++      break;
++    }
++    /* FINK LOCAL end */
++
+     for (path = path_list; path; path = path_end ? path_end + 1 : NULL) {
+       path_end = strchr(path, ':');
+       path_len = path_end ? (size_t)(path_end - path) : strlen(path);
diff -ruN dpkg-1.17.6.orig/fink/patches/c++filt-defaults.patch dpkg-1.17.6/fink/patches/c++filt-defaults.patch
--- dpkg-1.17.6.orig/fink/patches/c++filt-defaults.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/c++filt-defaults.patch	2014-03-25 11:45:03.000000000 -0600
@@ -0,0 +1,11 @@
+--- dpkg.orig/scripts/Dpkg/Shlibs/Cppfilt.pm
++++ dpkg/scripts/Dpkg/Shlibs/Cppfilt.pm
+@@ -44,7 +44,7 @@
+     } else {
+ 	$filt = { from => undef, to => undef,
+ 	            last_symbol => '', last_result => '' };
+-	$filt->{pid} = spawn(exec => [ 'c++filt', "--format=$type" ],
++	$filt->{pid} = spawn(exec => [ 'c++filt', "--no-strip-underscore", "--format=$type" ],
+ 	                     from_pipe => \$filt->{from},
+ 	                     to_pipe => \$filt->{to});
+ 	syserr(_g('unable to execute %s'), 'c++filt')
diff -ruN dpkg-1.17.6.orig/fink/patches/coreutils.patch dpkg-1.17.6/fink/patches/coreutils.patch
--- dpkg-1.17.6.orig/fink/patches/coreutils.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/coreutils.patch	2014-03-25 11:41:25.000000000 -0600
@@ -0,0 +1,21 @@
+--- dpkg.orig/scripts/Dpkg/Checksums.pm
++++ dpkg/scripts/Dpkg/Checksums.pm
+@@ -51,15 +51,15 @@
+ 
+ my $CHECKSUMS = {
+     md5 => {
+-	program => [ 'md5sum' ],
++	program => [ 'gmd5sum' ],
+ 	regex => qr/[0-9a-f]{32}/,
+     },
+     sha1 => {
+-	program => [ 'sha1sum' ],
++	program => [ 'gsha1sum' ],
+ 	regex => qr/[0-9a-f]{40}/,
+     },
+     sha256 => {
+-	program => [ 'sha256sum' ],
++	program => [ 'gsha256sum' ],
+ 	regex => qr/[0-9a-f]{64}/,
+     },
+ };
diff -ruN dpkg-1.17.6.orig/fink/patches/extra-env.patch dpkg-1.17.6/fink/patches/extra-env.patch
--- dpkg-1.17.6.orig/fink/patches/extra-env.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/extra-env.patch	2014-03-25 15:29:55.000000000 -0600
@@ -0,0 +1,196 @@
+--- dpkg.orig/config.h.in
++++ dpkg/config.h.in
+@@ -24,6 +24,9 @@
+ /* default dpkg-deb build compressor */
+ #undef DPKG_DEB_DEFAULT_COMPRESSOR
+ 
++/* Define if we are including an env script for maintainer script ENV */
++#undef DPKG_MAINT_ENV_SCRIPT
++
+ /* Define to 1 if translation of program messages to the user's native
+    language is requested. */
+ #undef ENABLE_NLS
+--- dpkg.orig/configure
++++ dpkg/configure
+@@ -819,6 +819,7 @@
+ enable_dselect
+ enable_start_stop_daemon
+ enable_update_alternatives
++with_dpkg_env_script
+ with_pkgconfdir
+ with_admindir
+ with_logdir
+@@ -1508,6 +1509,8 @@
+   --without-libiconv-prefix     don't search for libiconv in includedir and libdir
+   --with-libintl-prefix[=DIR]  search for libintl in DIR/include and DIR/lib
+   --without-libintl-prefix     don't search for libintl in includedir and libdir
++  --with-dpkg-env-script=PATH/TO/SCRIPT
++                          script to include in the maintainer environment
+   --with-pkgconfdir=DIR   dpkg configuration directory [SYSCONFDIR/dpkg]
+   --with-admindir=DIR     dpkg database directory [LOCALSTATEDIR/lib/dpkg]
+   --with-logdir=DIR       system logging directory [LOCALSTATEDIR/log]
+@@ -7047,6 +7050,36 @@
+ $as_echo "$build_update_alternatives" >&6; }
+ 
+ 
++# Check if we want to run a script to set extra env vars
++
++  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for maintainer environment script" >&5
++$as_echo_n "checking for maintainer environment script... " >&6; }
++
++# Check whether --with-dpkg-env-script was given.
++if test "${with_dpkg_env_script+set}" = set; then :
++  withval=$with_dpkg_env_script; with_dpkg_env_script=$withval
++else
++  with_dpkg_env_script=no
++fi
++
++  if test "x$with_dpkg_env_script" != "xno"; then :
++
++
++cat >>confdefs.h <<_ACEOF
++#define DPKG_MAINT_ENV_SCRIPT "$with_dpkg_env_script"
++_ACEOF
++
++
++else
++
++    $as_echo "#define DPKG_MAINT_ENV_SCRIPT 0" >>confdefs.h
++
++
++fi
++  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $with_dpkg_env_script" >&5
++$as_echo "$with_dpkg_env_script" >&6; }
++
++
+ # Allow alternate directories
+ 
+   pkgconfdir="${sysconfdir}/${PACKAGE_NAME}"
+--- dpkg.orig/configure.ac
++++ dpkg/configure.ac 
+@@ -23,6 +23,9 @@
+ DPKG_BUILD_PROG([start-stop-daemon])
+ DPKG_BUILD_PROG([update-alternatives])
+ 
++# Check if we want to run a script to set extra env vars
++DPKG_ENV_SCRIPT([no])
++
+ # Allow alternate directories
+ DPKG_WITH_DIR([pkgconfdir], [${sysconfdir}/${PACKAGE_NAME}],
+               [dpkg configuration directory [SYSCONFDIR/dpkg]])
+--- dpkg.orig/m4/dpkg-build.m4
++++ dpkg/m4/dpkg-build.m4
+@@ -52,6 +52,23 @@
+   AC_MSG_NOTICE([using default dpkg-deb compressor = $with_dpkg_deb_compressor])
+ ]) # DPKG_DEB_COMPRESSOR
+ 
++# DPKG_ENV_SCRIPT(SCRIPT)
++# -------------------
++# Add script to the maintainer script env.
++AC_DEFUN([DPKG_ENV_SCRIPT], [
++  AC_MSG_CHECKING([for maintainer environment script])
++  AC_ARG_WITH([dpkg-env-script],
++    [AS_HELP_STRING([--with-dpkg-env-script=PATH/TO/SCRIPT],
++                   [script to include in the maintainer environment])],
++    [with_dpkg_env_script=$withval], [with_dpkg_env_script=$1])
++  AS_IF([test "x$with_dpkg_env_script" != "xno"], [
++    AC_DEFINE_UNQUOTED([DPKG_MAINT_ENV_SCRIPT], ["$with_dpkg_env_script"], [Define to value if not no.])
++  ], [
++    AC_DEFINE([DPKG_MAINT_ENV_SCRIPT], [0])
++  ])
++  AC_MSG_RESULT([$with_dpkg_env_script])
++]) # DPKG_ENV_SCRIPT
++
+ # DPKG_DIST_CHECK(COND, ERROR)
+ # ---------------
+ # Check if the condition is fulfilled when preparing a distribution tarball.
+--- dpkg.orig/src/main.h
++++ dpkg/src/main.h
+@@ -237,6 +237,9 @@
+                          const char *scriptname, const char *desc,
+                          const char *cidir, char *cidirrest,
+                          const char *ifok, const char *iffallback);
++#ifdef DPKG_MAINT_ENV_SCRIPT
++int execute_env_script();
++#endif
+ 
+ /* Callers wanting to run the postinst use these two as they want to postpone
+  * trigger incorporation until after updating the package status. The effect
+--- dpkg.orig/src/script.c
++++ dpkg/src/script.c
+@@ -217,6 +217,11 @@
+ 		    setenv("DPKG_RUNNING_VERSION", PACKAGE_VERSION, 1))
+ 			ohshite(_("unable to setenv for maintainer script"));
+ 
++#ifdef DPKG_MAINT_ENV_SCRIPT
++		if (execute_env_script())
++			ohshite(_("unable to set extra env for maintainer script"));
++#endif
++
+ 		cmd->filename = cmd->argv[0] = maintscript_pre_exec(cmd);
+ 
+ 		if (maintscript_set_exec_context(cmd, "dpkg_script_t") < 0)
+@@ -403,3 +408,63 @@
+ 
+ 	return 1;
+ }
++
++#ifdef DPKG_MAINT_ENV_SCRIPT
++// Need limits.h for POSIX_ARG_MAX
++#include <limits.h>
++
++int execute_env_script(void);
++
++int
++execute_env_script() {
++	debug(dbg_scripts, "Injecting env script (%s)", DPKG_MAINT_ENV_SCRIPT);
++
++	struct stat sb;
++	// is this the right max len?
++	char buf[_POSIX_ARG_MAX];
++
++	if (!stat(DPKG_MAINT_ENV_SCRIPT, &sb)) {
++		char cmd_full[sizeof(DPKG_MAINT_ENV_SCRIPT) + 16];
++		sprintf(cmd_full, ". %s; /usr/bin/env", DPKG_MAINT_ENV_SCRIPT);
++
++		FILE *cmd_stream;
++
++		cmd_stream = popen(cmd_full, "r");
++		if (cmd_stream) {
++			debug(dbg_veryverbose, " -> reading %s env results...", DPKG_MAINT_ENV_SCRIPT);
++			while (fgets(buf, _POSIX_ARG_MAX, cmd_stream)) {
++				if (!strcmp(buf+strlen(buf)-1, "\n")) {
++					// chomp trailing newline
++					buf[strlen(buf)-1]=0;
++				}
++				// putenv owns actual passed char*
++				debug(dbg_veryverbose, " -> adding to ENV '%s'", strdup(buf));
++				putenv(strdup(buf));
++			}
++			pclose(cmd_stream);
++
++			return 0;
++		} else {
++			debug(dbg_scripts, "popen(%s) failed.", DPKG_MAINT_ENV_SCRIPT);
++		}
++	} else {
++		debug(dbg_scripts, "%s not found.", DPKG_MAINT_ENV_SCRIPT);
++	}
++
++	debug(dbg_scripts, "fallback: just prepend fink to PATH");
++	{
++		char *path;
++
++		path = getenv("PATH");
++		if (path) {
++			sprintf(buf, "PATH=%s:%s:%s", "@FINKPREFIX@/bin", "@FINKPREFIX@/sbin", path);
++			putenv(strdup(buf));
++
++			return 0;
++		}
++		debug(dbg_scripts, "could not read PATH from ENV!");
++	}
++
++	return 1;
++}
++#endif
diff -ruN dpkg-1.17.6.orig/fink/patches/extra-statusfile.patch dpkg-1.17.6/fink/patches/extra-statusfile.patch
--- dpkg-1.17.6.orig/fink/patches/extra-statusfile.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/extra-statusfile.patch	2015-05-30 12:58:44.000000000 -0600
@@ -0,0 +1,445 @@
+--- dpkg.orig/config.h.in
++++ dpkg/config.h.in
+@@ -27,6 +27,9 @@
+ /* Define if we are including an env script for maintainer script ENV */
+ #undef DPKG_MAINT_ENV_SCRIPT
+
++/* Define if we are including an alt status file */
++#undef FINKVIRTUALS
++
+ /* Define to 1 if translation of program messages to the user's native
+    language is requested. */
+ #undef ENABLE_NLS
+--- dpkg.orig/configure
++++ dpkg/configure
+@@ -820,6 +820,7 @@
+ enable_start_stop_daemon
+ enable_update_alternatives
+ with_dpkg_env_script
++with_finkvirtual
+ with_pkgconfdir
+ with_admindir
+ with_logdir
+@@ -1511,6 +1512,8 @@
+   --without-libintl-prefix     don't search for libintl in includedir and libdir
+   --with-dpkg-env-script=PATH/TO/SCRIPT
+                           script to include in the maintainer environment
++  --with-finkvirtuals=PATH/TO/SCRIPT
++                          full path and script name to f-v-p
+   --with-pkgconfdir=DIR   dpkg configuration directory [SYSCONFDIR/dpkg]
+   --with-admindir=DIR     dpkg database directory [LOCALSTATEDIR/lib/dpkg]
+   --with-logdir=DIR       system logging directory [LOCALSTATEDIR/log]
+@@ -7080,6 +7083,36 @@
+ $as_echo "$with_dpkg_env_script" >&6; }
+
+
++# Check if we want an fink-virtuals
++
++  { $as_echo "$as_me:${as_lineno-$LINENO}: checking for f-v-p" >&5
++$as_echo_n "checking for f-v-p... " >&6; }
++
++# Check whether --with-finkvirtuals was given.
++if test "${with_finkvirtuals+set}" = set; then :
++  withval=$with_finkvirtuals; with_finkvirtuals=$withval
++else
++  with_finkvirtuals=no
++fi
++
++  if test "x$with_finkvirtuals" != "xno"; then :
++
++
++cat >>confdefs.h <<_ACEOF
++#define FINKVIRTUALS "$with_finkvirtuals"
++_ACEOF
++
++
++else
++
++    $as_echo "#define FINKVIRTUALS 0" >>confdefs.h
++
++
++fi
++  { $as_echo "$as_me:${as_lineno-$LINENO}: result: $with_finkvirtuals" >&5
++$as_echo "$with_finkvirtuals" >&6; }
++
++
+ # Allow alternate directories
+ 
+   pkgconfdir="${sysconfdir}/${PACKAGE_NAME}"
+--- dpkg.orig/configure.ac
++++ dpkg/configure.ac 
+@@ -26,6 +26,9 @@
+ # Check if we want to run a script to set extra env vars
+ DPKG_ENV_SCRIPT([no])
+
++# Check if we want an alternative statusfile
++FINKVIRTUALS([no])
++
+ # Allow alternate directories
+ DPKG_WITH_DIR([pkgconfdir], [${sysconfdir}/${PACKAGE_NAME}],
+               [dpkg configuration directory [SYSCONFDIR/dpkg]])
+--- dpkg.orig/m4/dpkg-build.m4
++++ dpkg/m4/dpkg-build.m4
+@@ -69,6 +69,23 @@
+   AC_MSG_RESULT([$with_dpkg_env_script])
+ ]) # DPKG_ENV_SCRIPT
+
++# FINKVIRTUALS(FILE)
++# -------------------
++# Second status file to parse and add to the Pkg DB
++AC_DEFUN([FINKVIRTUALS], [
++  AC_MSG_CHECKING([for f-v-p])
++  AC_ARG_WITH([finkvirtuals],
++    [AS_HELP_STRING([--with-finkvirtuals=PATH/TO/SCRIPT],
++                   [full path and script name to f-v-p])],
++    [with_finkvirtuals=$withval], [with_finkvirtuals=$1])
++  AS_IF([test "x$with_finkvirutals" != "xno"], [
++    AC_DEFINE_UNQUOTED([FINKVIRTUALS], ["$with_finkvirtuals"], [Define to value if not no.])
++  ], [
++    AC_DEFINE([FINKVIRTUALS], [0])
++  ])
++  AC_MSG_RESULT([$with_finkvirtuals])
++]) # FINKVIRTUALS
++
+ # DPKG_DIST_CHECK(COND, ERROR)
+ # ---------------
+ # Check if the condition is fulfilled when preparing a distribution tarball.
+--- dpkg.orig/lib/dpkg/dbmodify.c
++++ dpkg/lib/dpkg/dbmodify.c
+@@ -44,6 +44,8 @@
+ #include <dpkg/dpkg-db.h>
+ #include <dpkg/file.h>
+ #include <dpkg/dir.h>
++#include <dpkg/subproc.h>
++#include <dpkg/command.h>
+ #include <dpkg/triglib.h>
+ 
+ static bool db_initialized;
+@@ -51,6 +53,11 @@
+ static enum modstatdb_rw cstatus=-1, cflags=0;
+ static char *lockfile;
+ static char *statusfile, *availablefile;
++#ifdef FINKVIRTUALS
++#define FINKSTATUSFILE "status-fink"
++void run_fvp(void);
++static char *extrastatusfile;
++#endif
+ static char *importanttmpfile=NULL;
+ static FILE *importanttmp;
+ static int nextupdate;
+@@ -79,6 +86,10 @@
+   int cdn, i;
+ 
+   parsedb(statusfile, pdb_parse_status, NULL);
++#ifdef FINKVIRTUALS
++  run_fvp();
++  parsedb(extrastatusfile, pdb_parse_status, NULL);
++#endif
+ 
+   *updatefnrest = '\0';
+   updateslength= -1;
+@@ -138,6 +149,9 @@
+ } fnis[] = {
+   {   LOCKFILE,                   &lockfile           },
+   {   STATUSFILE,                 &statusfile         },
++#ifdef FINKVIRTUALS
++  {   FINKSTATUSFILE,             &extrastatusfile    },
++#endif
+   {   AVAILFILE,                  &availablefile      },
+   {   UPDATESDIR,                 &updatesdir         },
+   {   UPDATESDIR IMPORTANTTMP,    &importanttmpfile   },
+@@ -437,3 +451,28 @@
+     modstatdb_note(pkg);
+ }
+ 
++#ifdef FINKVIRTUALS
++void
++run_fvp(void)
++{
++  pid_t pid;
++
++  pid = subproc_fork();
++  if (pid == 0) {
++    struct command cmd;
++    const char *fvp;
++    size_t finkstatusfile_len = strlen(ADMINDIR) + strlen(FINKSTATUSFILE) + 2;
++    char *finkstatusfile = m_malloc(finkstatusfile_len);
++
++    fvp = FINKVIRTUALS;
++    snprintf(finkstatusfile, finkstatusfile_len, "%s/%s", ADMINDIR, FINKSTATUSFILE);
++
++    command_init(&cmd, fvp, _("getting fink virtuals"));
++    command_add_arg(&cmd, fvp);
++    command_add_arg(&cmd, "-o");
++    command_add_arg(&cmd, finkstatusfile);
++    command_exec(&cmd);
++  }
++  subproc_wait(pid, _("getting fink virtuals"));
++}
++#endif
+--- dpkg.orig/lib/dpkg/dpkg-db.h
++++ dpkg/lib/dpkg/dpkg-db.h
+@@ -175,7 +175,8 @@
+     stat_halfconfigured,
+     stat_triggersawaited,
+     stat_triggerspending,
+-    stat_installed
++    stat_installed,
++    stat_virtual
+   } status;
+   enum pkgpriority {
+     pri_required,
+--- dpkg.orig/lib/dpkg/parsehelp.c
++++ dpkg/lib/dpkg/parsehelp.c
+@@ -108,6 +108,7 @@
+   NAMEVALUE_DEF("triggers-awaited", stat_triggersawaited),
+   NAMEVALUE_DEF("triggers-pending", stat_triggerspending),
+   NAMEVALUE_DEF("installed",        stat_installed),
++  NAMEVALUE_DEF("virtual",          stat_virtual),
+   { .name = NULL }
+ };
+ 
+--- dpkg.orig/lib/dpkg/pkg.c
++++ dpkg/lib/dpkg/pkg.c
+@@ -189,7 +189,8 @@
+ 	if (pkgbin == &pkg->installed &&
+ 	    (pkg->want != want_unknown ||
+ 	     pkg->eflag != eflag_ok ||
+-	     pkg->status != stat_notinstalled ||
++	     (pkg->status != stat_notinstalled &&
++	      pkg->status != stat_virtual) ||
+ 	     dpkg_version_is_informative(&pkg->configversion)))
+ 		return true;
+ 
+--- dpkg.orig/lib/dpkg/pkg-show.c
++++ dpkg/lib/dpkg/pkg-show.c
+@@ -158,7 +158,7 @@
+ int
+ pkg_abbrev_status(const struct pkginfo *pkg)
+ {
+-	return "ncHUFWti"[pkg->status];
++	return "ncHUFWtiv"[pkg->status];
+ }
+ 
+ int
+--- dpkg.orig/lib/dpkg/dump.c
++++ dpkg/lib/dpkg/dump.c
+@@ -90,6 +90,7 @@
+   if (!dpkg_version_is_informative(&pkg->configversion))
+     return;
+   if (pkg->status == stat_installed ||
++      pkg->status == stat_virtual ||
+       pkg->status == stat_notinstalled ||
+       pkg->status == stat_triggerspending)
+     return;
+@@ -271,6 +272,7 @@
+     assert(PEND);
+     assert(!AW);
+     break;
++  case stat_virtual:
+   case stat_installed:
+     assert(!PEND);
+     assert(!AW);
+@@ -491,7 +493,7 @@
+   while ((pkg = pkg_db_iter_next_pkg(it)) != NULL) {
+     pkgbin = (flags & wdb_dump_available) ? &pkg->available : &pkg->installed;
+     /* Don't dump records which have no useful content. */
+-    if (!pkg_is_informative(pkg, pkgbin))
++    if (!pkg_is_informative(pkg, pkgbin) || pkg->status == stat_virtual)
+       continue;
+     varbufrecord(&vb, pkg, pkgbin);
+     varbuf_add_char(&vb, '\n');
+--- dpkg.orig/lib/dpkg/parse.c
++++ dpkg/lib/dpkg/parse.c
+@@ -227,11 +227,11 @@
+    * ‘not-installed’ (in which case there is no Config-Version). */
+   if (!(ps->flags & pdb_recordavailable)) {
+     if (pkg->configversion.version) {
+-      if (pkg->status == stat_installed || pkg->status == stat_notinstalled)
++      if (pkg->status == stat_installed || pkg->status == stat_virtual || pkg->status == stat_notinstalled)
+         parse_error(ps,
+                     _("Config-Version for package with inappropriate Status"));
+     } else {
+-      if (pkg->status == stat_installed)
++      if (pkg->status == stat_installed || pkg->status == stat_virtual)
+         pkg->configversion = pkgbin->version;
+     }
+   }
+--- dpkg.orig/dselect/pkgcmds.cc
++++ dpkg/dselect/pkgcmds.cc
+@@ -152,7 +152,8 @@
+ 
+   if (wantvalue == pkginfo::want_install) return 1;
+   if (wantvalue != pkginfo::want_hold) return 0;
+-  if (pkg->status == pkginfo::stat_installed) return 1;
++  if (pkg->status == pkginfo::stat_installed ||
++      pkg->status == pkginfo::stat_virtual) return 1;
+   if (pkg->status == pkginfo::stat_notinstalled ||
+       pkg->status == pkginfo::stat_configfiles) return 0;
+   return -1;
+--- dpkg.orig/dselect/pkgdepcon.cc
++++ dpkg/dselect/pkgdepcon.cc
+@@ -38,6 +38,7 @@
+       pkg->clientdata->selected == pkginfo::want_install &&
+       pkg_is_informative(pkg, &pkg->available) &&
+       (!(pkg->status == pkginfo::stat_installed ||
++         pkg->status == pkginfo::stat_virtual ||
+          pkg->status == pkginfo::stat_triggersawaited ||
+          pkg->status == pkginfo::stat_triggerspending) ||
+        dpkg_version_compare(&pkg->available.version,
+@@ -443,6 +444,7 @@
+       return true;
+     if (fixbyupgrade && !*fixbyupgrade &&
+         (!(provider->up->up->status == pkginfo::stat_installed ||
++           provider->up->up->status == pkginfo::stat_virtual ||
+            provider->up->up->status == pkginfo::stat_triggerspending ||
+            provider->up->up->status == pkginfo::stat_triggersawaited) ||
+          dpkg_version_compare(&provider->up->up->available.version,
+--- dpkg.orig/dselect/pkglist.cc
++++ dpkg/dselect/pkglist.cc
+@@ -203,6 +203,7 @@
+           table[index]->ssavail= ssa_notinst_seen;
+         }
+         break;
++      case pkginfo::stat_virtual:
+       case pkginfo::stat_installed:
+         veri= &table[index]->pkg->installed.version;
+         vera= &table[index]->pkg->available.version;
+@@ -244,6 +245,7 @@
+       case pkginfo::stat_configfiles:
+         table[index]->ssstate= sss_configfiles;
+         break;
++      case pkginfo::stat_virtual:
+       case pkginfo::stat_installed:
+         table[index]->ssstate= sss_installed;
+         break;
+@@ -403,6 +405,7 @@
+         state->original == pkginfo::want_unknown) {
+       state->suggested=
+         pkg->status == pkginfo::stat_installed ||
++          pkg->status == pkginfo::stat_virtual ||
+           pkg->priority <= pkginfo::pri_standard /* FIXME: configurable */
+             ? pkginfo::want_install : pkginfo::want_purge;
+       state->spriority= sp_inherit;
+--- dpkg.orig/src/archives.c
++++ dpkg/arc/archives.c
+@@ -1444,6 +1444,7 @@
+              pkg_name(fixbyrm, pnaw_nonambig),
+              pkgbin_name(pkg, &pkg->available, pnaw_nonambig));
+       if (!(fixbyrm->status == stat_installed ||
++            fixbyrm->status == stat_virtual ||
+             fixbyrm->status == stat_triggerspending ||
+             fixbyrm->status == stat_triggersawaited)) {
+         notice(_("%s is not properly installed; ignoring any dependencies on it"),
+--- dpkg.orib/src/depcon.c
++++ dpkg/src/depcon.c
+@@ -331,6 +331,7 @@
+   case itb_normal:
+     /* Only installed packages can be make dependency problems. */
+     switch (dep->up->status) {
++    case stat_virtual:
+     case stat_installed:
+     case stat_triggerspending:
+     case stat_triggersawaited:
+@@ -389,6 +390,7 @@
+         case itb_normal:
+         case itb_preinstall:
+           switch (pkg_pos->status) {
++          case stat_virtual:
+           case stat_installed:
+           case stat_triggerspending:
+             if (versionsatisfied(&pkg_pos->installed, possi)) {
+@@ -490,6 +492,7 @@
+             break;
+           case itb_normal: case itb_preinstall:
+             if (provider->up->up->status == stat_installed ||
++                provider->up->up->status == stat_virtual ||
+                 provider->up->up->status == stat_triggerspending)
+               return true;
+             if (provider->up->up->status == stat_triggersawaited)
+@@ -568,6 +571,7 @@
+           case stat_halfconfigured:
+             if (dep->type == dep_breaks)
+               break; /* No problem. */
++          case stat_virtual:
+           case stat_installed:
+           case stat_triggerspending:
+           case stat_triggersawaited:
+@@ -642,6 +646,7 @@
+           case stat_halfconfigured:
+             if (dep->type == dep_breaks)
+               break; /* No problem. */
++          case stat_virtual:
+           case stat_installed:
+           case stat_triggerspending:
+           case stat_triggersawaited:
+--- dpkg.orig/src/enquiry.c
++++ dpkg/src/enquiry.c
+@@ -230,7 +230,7 @@
+     return false;
+ 
+   switch (pkg->status) {
+-  case stat_unpacked: case stat_installed: case stat_halfconfigured:
++  case stat_unpacked: case stat_virtual: case stat_installed: case stat_halfconfigured:
+   case stat_triggerspending:
+   case stat_triggersawaited:
+     return false;
+--- dpkg.orig/src/filesdb.c
++++ dpkg/src/filesdb.c
+@@ -238,6 +238,7 @@
+               pkg_name(pkg, pnaw_nonambig));
+     onerr_abort--;
+     if (pkg->status != stat_configfiles &&
++        pkg->status != stat_virtual &&
+         dpkg_version_is_informative(&pkg->configversion)) {
+       warning(_("files list file for package '%.250s' missing; assuming "
+                 "package has no files currently installed"),
+--- dpkg.orig/src/help.c
++++ dpkg/src/help.c.new
+@@ -61,7 +61,8 @@
+   [stat_halfconfigured]  = N_("broken due to postinst failure"),
+   [stat_triggersawaited] = N_("awaiting trigger processing by another package"),
+   [stat_triggerspending] = N_("triggered"),
+-  [stat_installed]       = N_("installed")
++  [stat_installed]       = N_("installed"),
++  [stat_virtual]         = N_("installed")
+ };
+ 
+ struct filenamenode *
+--- dpkg.orig/src/packages.c
++++ dpkg/src/packages.c
+@@ -223,7 +223,7 @@
+       }
+     }
+ 
+-    assert(pkg->status <= stat_installed);
++    assert(pkg->status <= stat_virtual);
+ 
+     if (setjmp(ejbuf)) {
+       /* Give up on it from the point of view of other packages, i.e. reset
+@@ -359,6 +359,7 @@
+   case stat_halfconfigured:
+   case stat_triggersawaited:
+   case stat_triggerspending:
++  case stat_virtual:
+   case stat_installed:
+     if (checkversion && !versionsatisfied(&possdependee->installed,checkversion)) {
+       varbuf_printf(oemsgs, _("  Version of %s on system is %s.\n"),
+@@ -373,6 +374,7 @@
+       return thisf;
+     }
+     if (possdependee->status == stat_installed ||
++        possdependee->status == stat_virtual ||
+         possdependee->status == stat_triggerspending) {
+       debug(dbg_depcondetail,"      is installed, ok and found");
+       return found_ok;
+--- dpkg.orig/src/t/100_dpkg_divert.t
++++ dpkg/src/t/100_dpkg_divert.t
+@@ -44,6 +44,7 @@
+     system("rm -rf $tmpdir && mkdir -p $testdir");
+     system("mkdir -p $admindir/updates");
+     system("rm -f $admindir/status && touch $admindir/status");
++    system("rm -f $admindir/status-fink && touch $admindir/status-fink");
+     system("rm -rf $admindir/info && mkdir -p $admindir/info");
+ }
+ 
diff -ruN dpkg-1.17.6.orig/fink/patches/fink-as-vendor.patch dpkg-1.17.6/fink/patches/fink-as-vendor.patch
--- dpkg-1.17.6.orig/fink/patches/fink-as-vendor.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/fink-as-vendor.patch	2014-03-25 11:47:45.000000000 -0600
@@ -0,0 +1,101 @@
+--- dpkg.orig/scripts/Dpkg/Vendor/Fink.pm
++++ dpkg/scripts/Dpkg/Vendor/Fink.pm
+@@ -0,0 +1,98 @@
++# Copyright © 2009-2011 Raphaël Hertzog <hertzog@debian.org>
++#
++# Hardening build flags handling derived from work of:
++# Copyright © 2009-2011 Kees Cook <kees@debian.org>
++# Copyright © 2007-2008 Canonical, Ltd.
++#
++# This program is free software; you can redistribute it and/or modify
++# it under the terms of the GNU General Public License as published by
++# the Free Software Foundation; either version 2 of the License, or
++# (at your option) any later version.
++#
++# This program is distributed in the hope that it will be useful,
++# but WITHOUT ANY WARRANTY; without even the implied warranty of
++# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
++# GNU General Public License for more details.
++#
++# You should have received a copy of the GNU General Public License
++# along with this program.  If not, see <http://www.gnu.org/licenses/>.
++
++package Dpkg::Vendor::Fink;
++
++use strict;
++use warnings;
++
++our $VERSION = "0.01";
++
++use base qw(Dpkg::Vendor::Default);
++
++use Dpkg::Gettext;
++use Dpkg::ErrorHandling;
++use Dpkg::Control::Types;
++use Dpkg::Vendor::Ubuntu;
++use Dpkg::BuildOptions;
++use Dpkg::Arch qw(get_host_arch debarch_to_debtriplet);
++
++=encoding utf8
++
++=head1 NAME
++
++Dpkg::Vendor::Fink - Fink vendor object
++
++=head1 DESCRIPTION
++
++This vendor object customize the behaviour of dpkg scripts
++for Fink specific actions.
++
++=cut
++
++sub run_hook {
++    my ($self, $hook, @params) = @_;
++
++    if ($hook eq "before-source-build") {
++        my $srcpkg = shift @params;
++    } elsif ($hook eq "keyrings") {
++        return ();
++    } elsif ($hook eq "register-custom-fields") {
++        return ();
++    } elsif ($hook eq "post-process-changelog-entry") {
++        my $fields = shift @params;
++    } elsif ($hook eq "extend-patch-header") {
++	my ($textref, $ch_info) = @params;
++    } elsif ($hook eq "update-buildflags") {
++	$self->add_hardening_flags(@params);
++    } else {
++        return $self->SUPER::run_hook($hook, @params);
++    }
++}
++
++sub add_hardening_flags {
++    my ($self, $flags) = @_;
++    my $arch = get_host_arch();
++    my ($abi, $os, $cpu) = debarch_to_debtriplet($arch);
++
++    unless (defined $abi and defined $os and defined $cpu) {
++        warning(_g("unknown host architecture '%s'"), $arch);
++        ($abi, $os, $cpu) = ("", "", "");
++    }
++
++    # start by removing the Dpkg defaults "-g -O2"
++    $flags->strip("CFLAGS", "-g");
++    $flags->strip("CXXFLAGS", "-g");
++    $flags->strip("FFLAGS", "-g");
++    $flags->strip("CFLAGS", "-O2");
++    $flags->strip("CXXFLAGS", "-O2");
++    $flags->strip("FFLAGS", "-O2");
++
++    $flags->append("CPPFLAGS", "-I@FINKPREFIX@/include");
++    $flags->append("LDFLAGS", "-L@FINKPREFIX@/lib");
++
++    # for building 64bit libraries, we change LDFLAGS:
++    #if (exists $self->{_type_hash}->{"-64bit"}) {
++    #    if ($self->{_type_hash}->{"-64bit"} eq "-64bit") {
++    #        $defaults{"LDFLAGS"} = "-L\%p/\%lib -L\%p/lib";
++    #    }
++    #}
++}
++
++1;
diff -ruN dpkg-1.17.6.orig/fink/patches/fink-bld_no_fakeroot.patch dpkg-1.17.6/fink/patches/fink-bld_no_fakeroot.patch
--- dpkg-1.17.6.orig/fink/patches/fink-bld_no_fakeroot.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/fink-bld_no_fakeroot.patch	2014-03-25 11:48:18.000000000 -0600
@@ -0,0 +1,19 @@
+--- dpkg.orig/scripts/dpkg-buildpackage.pl
++++ dpkg/scripts/dpkg-buildpackage.pl
+@@ -319,12 +319,15 @@
+ 
+ if ($< == 0) {
+     warning(_g('using a gain-root-command while being root')) if (@rootcommand);
++} elsif (getpwuid($<) eq "fink-bld") {
++    warning(_g('removing the gain-root-command while being fink-bld')) if (@rootcommand);
++    pop  @rootcommand if (@rootcommand);
+ } else {
+     push @rootcommand, 'fakeroot' unless @rootcommand;
+ }
+ 
+ if (@rootcommand and not find_command($rootcommand[0])) {
+-    if ($rootcommand[0] eq 'fakeroot' and $< != 0) {
++    if ($rootcommand[0] eq 'fakeroot' and $< != 0 and getpwuid($<) ne "fink-bld") {
+         error(_g("fakeroot not found, either install the fakeroot\n" .
+                  'package, specify a command with the -r option, ' .
+                  'or run this as root'));
diff -ruN dpkg-1.17.6.orig/fink/patches/full-path-calls.patch dpkg-1.17.6/fink/patches/full-path-calls.patch
--- dpkg-1.17.6.orig/fink/patches/full-path-calls.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/full-path-calls.patch	2014-03-25 11:50:16.000000000 -0600
@@ -0,0 +1,36 @@
+--- dpkg.orig/dselect/dselect.h
++++ dpkg/dselect/dselect.h
+@@ -33,7 +33,7 @@
+ 
+ #include "dselect-curses.h"
+ 
+-#define DSELECT		"dselect"
++#define DSELECT		"@FINKPREFIX@/bin/dselect"
+ 
+ #define TOTAL_LIST_WIDTH 180
+ #define MAX_DISPLAY_INFO 120
+--- dpkg.orig/lib/dpkg/dpkg.h
++++ dpkg/lib/dpkg/dpkg.h
+@@ -99,14 +99,14 @@
+ #define MD5HASHLEN           32
+ #define MAXTRIGDIRECTIVE     256
+ 
+-#define BACKEND		"dpkg-deb"
+-#define SPLITTER	"dpkg-split"
+-#define DPKGQUERY	"dpkg-query"
+-#define DPKGDIVERT	"dpkg-divert"
+-#define DPKGSTAT	"dpkg-statoverride"
+-#define DPKGTRIGGER	"dpkg-trigger"
+-#define DPKG		"dpkg"
+-#define DEBSIGVERIFY	"/usr/bin/debsig-verify"
++#define BACKEND		"@FINKPREFIX@/bin/dpkg-deb"
++#define SPLITTER	"@FINKPREFIX@/bin/dpkg-split"
++#define DPKGQUERY	"@FINKPREFIX@/bin/dpkg-query"
++#define DPKGDIVERT	"@FINKPREFIX@/bin/dpkg-divert"
++#define DPKGSTAT	"@FINKPREFIX@/bin/dpkg-statoverride"
++#define DPKGTRIGGER	"@FINKPREFIX@/bin/dpkg-trigger"
++#define DPKG		"@FINKPREFIX@/bin/dpkg"
++#define DEBSIGVERIFY	"@FINKPREFIX@/bin/debsig-verify"
+ 
+ #define TAR		"tar"
+ #define RM		"rm"
diff -ruN dpkg-1.17.6.orig/fink/patches/gzip-rsyncable-fix.patch dpkg-1.17.6/fink/patches/gzip-rsyncable-fix.patch
--- dpkg-1.17.6.orig/fink/patches/gzip-rsyncable-fix.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/gzip-rsyncable-fix.patch	2014-03-25 11:51:17.000000000 -0600
@@ -0,0 +1,12 @@
+--- dpkg.orig/scripts/Dpkg/Compression.pm
++++ dpkg/scripts/Dpkg/Compression.pm
+@@ -50,7 +50,8 @@
+ my $COMP = {
+     gzip => {
+ 	file_ext => 'gz',
+-	comp_prog => [ 'gzip', '--no-name', '--rsyncable' ],
++	# Fink doesn't have rsyncable bzip2/gzip yet
++	comp_prog => [ 'gzip', '--no-name' ],
+ 	decomp_prog => [ 'gunzip' ],
+ 	default_level => 9,
+     },
diff -ruN dpkg-1.17.6.orig/fink/patches/location-fixes.patch dpkg-1.17.6/fink/patches/location-fixes.patch
--- dpkg-1.17.6.orig/fink/patches/location-fixes.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/location-fixes.patch	2014-03-25 11:54:19.000000000 -0600
@@ -0,0 +1,101 @@
+--- dpkg.orig/dpkg-split/queue.c
++++ dpkg/dpkg-split/queue.c
+@@ -46,7 +46,7 @@
+ #include "dpkg-split.h"
+ 
+ /*
+- * The queue, by default located in /var/lib/dpkg/parts/, is a plain
++ * The queue, by default located in @FINKPREFIX@/var/lib/dpkg/parts/, is a plain
+  * directory with one file per part.
+  *
+  * Each part is named “<md5sum>.<maxpartlen>.<thispartn>.<maxpartn>”,
+diff -ruN dpkg-1.16.4.3.orig/scripts/Dpkg/Changelog/Parse.pm dpkg-1.16.4.3/scripts/Dpkg/Changelog/Parse.pm
+--- dpkg-1.16.4.3.orig/scripts/Dpkg/Changelog/Parse.pm	2012-06-09 08:32:08.000000000 -0600
++++ dpkg-1.16.4.3/scripts/Dpkg/Changelog/Parse.pm	2012-07-02 16:14:45.000000000 -0600
+@@ -56,7 +56,7 @@
+ 
+ The parsing itself is done by an external program (searched in the
+ following list of directories: $opt{libdir},
+-F</usr/local/lib/dpkg/parsechangelog>, F</usr/lib/dpkg/parsechangelog>) That
++F<@FINKPREFIX@/lib/dpkg/parsechangelog>) That
+ program is named according to the format that it's able to parse. By
+ default it's either "debian" or the format name lookep up in the 40 last
+ lines of the changelog itself (extracted with this perl regular expression
+@@ -76,9 +76,8 @@
+ 
+ sub changelog_parse {
+     my (%options) = @_;
+-    my @parserpath = ('/usr/local/lib/dpkg/parsechangelog',
+-                      "$Dpkg::LIBDIR/parsechangelog",
+-                      '/usr/lib/dpkg/parsechangelog');
++    my @parserpath = ("$Dpkg::LIBDIR/parsechangelog",
++                      '@FINKPREFIX@/lib/dpkg/parsechangelog');
+     my $format = 'debian';
+     my $force = 0;
+ 
+diff -ruN dpkg-1.16.4.3.orig/scripts/Dpkg/Shlibs.pm dpkg-1.16.4.3/scripts/Dpkg/Shlibs.pm
+--- dpkg-1.16.4.3.orig/scripts/Dpkg/Shlibs.pm	2012-06-13 23:12:34.000000000 -0600
++++ dpkg-1.16.4.3/scripts/Dpkg/Shlibs.pm	2012-07-02 16:14:45.000000000 -0600
+@@ -36,7 +36,8 @@
+                   gnutriplet_to_multiarch debarch_to_multiarch);
+ 
+ use constant DEFAULT_LIBRARY_PATH =>
+-    qw(/lib /usr/lib /lib32 /usr/lib32 /lib64 /usr/lib64
++    qw(@FINKPREFIX@/lib @FINKPREFIX@/lib32 @FINKPREFIX@/lib64
++       /lib /usr/lib /lib32 /usr/lib32 /lib64 /usr/lib64
+        /emul/ia32-linux/lib /emul/ia32-linux/usr/lib);
+ 
+ # Adjust set of directories to consider when we're in a situation of a
+--- dpkg.orig/dselect/methods/Dselect/Ftp.pm
++++ dpkg/dselect/methods/Dselect/Ftp.pm
+@@ -79,12 +79,12 @@
+ }
+ 
+ sub view_mirrors {
+-  if (-f '/usr/lib/dpkg/methods/ftp/README.mirrors.txt') {
+-    system('pager', '/usr/lib/dpkg/methods/ftp/README.mirrors.txt');
+-  } elsif (-f '/usr/lib/dpkg/methods/ftp/README.mirrors.txt.gz') {
+-    system('gzip -dc /usr/lib/dpkg/methods/ftp/README.mirrors.txt.gz | pager');
++  if (-f '@FINKPREFIX@/lib/dpkg/methods/ftp/README.mirrors.txt') {
++    system('pager', '@FINKPREFIX@/lib/dpkg/methods/ftp/README.mirrors.txt');
++  } elsif (-f '@FINKPREFIX@/lib/dpkg/methods/ftp/README.mirrors.txt.gz') {
++    system('gzip -dc @FINKPREFIX@/lib/dpkg/methods/ftp/README.mirrors.txt.gz | pager');
+   } else {
+-    print "/usr/lib/dpkg/methods/ftp/README.mirrors.txt(.gz): file not found.\n";
++    print "@FINKPREFIX@/lib/dpkg/methods/ftp/README.mirrors.txt(.gz): file not found.\n";
+   }
+ }
+ 
+--- dpkg.orig/dselect/methods/disk/setup
++++ dpkg/dselect/methods/disk/setup
+@@ -19,7 +19,7 @@
+ option=$3
+ 
+ cd "$vardir/methods/disk"
+-tp=/var/run/ddm$$
++tp=@FINKPREFIX@/var/run/ddm$$
+ 
+ iarch=`dpkg --admindir $vardir --print-architecture`
+ 
+--- dpkg.orig/dselect/methods/ftp/setup
++++ dpkg/dselect/methods/ftp/setup
+@@ -75,7 +75,7 @@
+ You must supply an ftp site, use of passive mode, username, password,
+ path to the debian directory,list of distributions you are interested
+ in and place to download the binary package files to (relative to
+-/var/lib/dpkg/methods/ftp). You can add as much sites as you like. Later
++@FINKPREFIX@/var/lib/dpkg/methods/ftp). You can add as much sites as you like. Later
+ entries will always override older ones.
+ 
+ Supply "?" as a password to be asked each time you connect.
+--- dpkg.orig/dselect/methods/multicd/install
++++ dpkg/dselect/methods/multicd/install
+@@ -175,7 +175,7 @@
+ Perhaps you downloaded it with an unexpected name, or something.
+ In any case, you must find the file(s) and then either place it with
+ the correct filename(s) (as listed in the Packages.cd file or in
+-/var/lib/dpkg/available) and rerun the installation, or upgrade the
++@FINKPREFIX@/var/lib/dpkg/available) and rerun the installation, or upgrade the
+ package by using `dpkg --install --auto-deconfigure'\'' by hand.
+ 
+ ";
diff -ruN dpkg-1.17.6.orig/fink/patches/protect-system-dirs.patch dpkg-1.17.6/fink/patches/protect-system-dirs.patch
--- dpkg-1.17.6.orig/fink/patches/protect-system-dirs.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/protect-system-dirs.patch	2014-03-25 11:54:57.000000000 -0600
@@ -0,0 +1,28 @@
+--- dpkg.orig/src/help.c
++++ dpkg/src/help.c
+@@ -271,6 +271,25 @@
+   debug(dbg_veryverbose, "dir_is_used_by_others '%s' (except %s)", file->name,
+         pkg ? pkg_name(pkg, pnaw_always) : "<none>");
+ 
++  /* FINK LOCAL begin */
++
++  /*
++   * Darwin has symlinks /etc -> /private/etc and /var -> /private/var
++   * instead of actual /etc and /var dirs. If dpkg removes the last
++   * pkg that it has record of having installed a file in one of those
++   * top-level dirs, it will try to remove the dir (since it thinks
++   * it's an empty dir) and it will succeed (since it's just unlinking
++   * a symlink, not trying to remove a dir that is not actually
++   * empty). That's Bad. Here we make sure these top-level dirs are
++   * never thought to be empty.
++   */
++  if( !strcmp(file->name,"/etc") || !strcmp(file->name,"/tmp") || !strcmp(file->name,"/var") ) {
++    debug(dbg_veryverbose, "dir_is_used_by_others precious!");
++    return true;
++  }
++
++  /* FINK LOCAL end */
++
+   iter = filepackages_iter_new(file);
+   while ((other_pkg = filepackages_iter_next(iter))) {
+     debug(dbg_veryverbose, "dir_is_used_by_others considering %s ...",
diff -ruN dpkg-1.17.6.orig/fink/patches/so-to-dylib.patch dpkg-1.17.6/fink/patches/so-to-dylib.patch
--- dpkg-1.17.6.orig/fink/patches/so-to-dylib.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/so-to-dylib.patch	2014-03-25 11:56:56.000000000 -0600
@@ -0,0 +1,263 @@
+--- dpkg.orig/scripts/Dpkg/Shlibs/Objdump.pm
++++ dpkg/scripts/Dpkg/Shlibs/Objdump.pm
+@@ -28,9 +28,15 @@
+ 
+ # Decide which objdump to call
+ our $OBJDUMP = 'objdump';
++our $OTOOL = "otool";
++our $NM = "nm";
+ if (get_build_arch() ne get_host_arch()) {
+     my $od = debarch_to_gnutriplet(get_host_arch()) . '-objdump';
+     $OBJDUMP = $od if find_command($od);
++    my $otool = debarch_to_gnutriplet(get_host_arch()) . "-otool";
++    $OTOOL = $otool if find_command($otool);
++    my $nm = debarch_to_gnutriplet(get_host_arch()) . "-nm";
++    $NM = $nm if find_command($nm);
+ }
+ 
+ 
+@@ -93,9 +99,9 @@
+ 	    return $format{$file};
+ 	} else {
+ 	    my ($output, %opts, $pid, $res);
+-	    if ($objdump ne 'objdump') {
++	    #if ($objdump ne 'objdump') {
+ 		$opts{error_to_file} = '/dev/null';
+-	    }
++	    #}
+ 	    $pid = spawn(exec => [ $objdump, '-a', '--', $file ],
+ 			 env => { LC_ALL => 'C' },
+ 			 to_pipe => \$output, %opts);
+@@ -104,7 +110,8 @@
+ 		if (/^\s*\S+:\s*file\s+format\s+(\S+)\s*$/) {
+ 		    $format{$file} = $1;
+ 		    $res = $format{$file};
+-		    last;
++		    # This might now be the only format, lets always take last
++		    #last;
+ 		}
+ 	    }
+ 	    close($output);
+@@ -129,7 +136,30 @@
+     return $result;
+ }
+ 
++sub is_mach_o {
++    my ($file) = @_;
++    open(FILE, "<", $file) || syserr(_g("cannot read %s"), $file);
++    my ($header, $result) = ("", 0);
++    if (read(FILE, $header, 4) == 4) {
++       # isLittleEndian
++        # 32 bit Mach-O
++        $result = 1 if ($header =~ /^\xce\xfa\xed\xfe$/);
++        # 64 bit Mach-O
++        $result = 1 if ($header =~ /^\xcf\xfa\xed\xfe$/);
++       # Fat
++        # 32 bit Mach-O
++        $result = 1 if ($header =~ /^\xfe\xed\xfa\xce$/);
++        # 64 bit Mach-O
++        $result = 1 if ($header =~ /^\xfe\xed\xfa\xcf$/);
++
++       # Mach-O Universal object files
++        $result = 1 if ($header =~ /^\xca\xfe\xba\xbe$/);
++    }
++    close(FILE);
++    return $result;
++}
++
+ package Dpkg::Shlibs::Objdump::Object;
+ 
+ use Dpkg::Gettext;
+ use Dpkg::ErrorHandling;
+@@ -170,21 +200,118 @@
+ 
+ sub analyze {
+     my ($self, $file) = @_;
++    my $ret = 'none';
+ 
+     $file ||= $self->{file};
+     return unless $file;
+ 
++    use IPC::Open3;
++
+     $self->reset;
+     $self->{file} = $file;
+ 
+     local $ENV{LC_ALL} = 'C';
+-    open(my $objdump, '-|', $OBJDUMP, '-w', '-f', '-p', '-T', '-R', $file)
+-        or syserr(_g('cannot fork for %s'), $OBJDUMP);
+-    my $ret = $self->parse_objdump_output($objdump);
+-    close($objdump);
++    if (Dpkg::Shlibs::Objdump::is_elf($file)) {
++       open3(my $objdumpin, my $objdump, my $objdumperr, $OBJDUMP, "-w", "-f", "-p", "-T", "-R", $file)
++           || syserr(_g("cannot fork for %s"), $OBJDUMP);
++       $ret = $self->parse_objdump_output($objdump);
++       close($objdump);
++    } elsif (Dpkg::Shlibs::Objdump::is_mach_o($file)) {
++       # no RPATH, HASH or GNU_HASH in macho
++       $self->{RPATH} = [ '/' ];
++
++       open3(my $objdumpin, my $objdump, my $objdumperr, $OBJDUMP, "-f", "-p", $file)
++           || syserr(_g("cannot fork for %s"), $OBJDUMP);
++       $ret = $self->parse_objdump_output($objdump);
++       close($objdump);
++
++       # get SONAME (dylib doesn't really use rpath but SONAME has a path)
++       open(my $install_name, "-|", $OTOOL, "-X", "-D", $file)
++           || syserr(_g("cannot fork for %s"), $OTOOL);
++       $self->parse_macho_soname($install_name);
++       close($install_name);
++
++        # Get list of linked libs
++        open(my $needed_names, "-|", $OTOOL, "-L", "-X", $file)
++            || syserr(_g("cannot fork for %s"), $OTOOL);
++        $self->parse_macho_needed($needed_names);
++        close($needed_names);
++
++       # Get list of symbols
++       open(my $dynsymbols, "-|", $NM, "-g", $file)
++           || syserr(_g("cannot fork for %s"), $NM);
++       $self->parse_macho_dynamic_symbol($dynsymbols);
++       close($dynsymbols);
++    }
+     return $ret;
+ }
+ 
++sub parse_macho_dynamic_symbol {
++    my ($self, $fh) = @_;
++    while (defined($_ = <$fh>)) {
++       chomp;
++
++       # no version in mach o
++       my $ver = '';
++
++       if (/^([0-9a-f]{16}) ([T|D|U]) (\S+)$/) {
++           my ($flags, $sect, $name) = ($1, $2, $3);
++           my $symbol = {
++               name => $name,
++               version => defined($ver) ? $ver : '',
++               section => $sect,
++               dynamic => "D",
++               #debug => substr($flags, 5, 1) eq "d",
++               type => $sect,
++               #weak => substr($flags, 1, 1) eq "w",
++               #local => substr($flags, 0, 1) eq "l",
++               #global => substr($flags, 0, 1) eq "g",
++               #visibility => defined($vis) ? $vis : '',
++               hidden => '',
++               defined => $sect ne 'U'
++           };
++           $self->add_dynamic_symbol($symbol);
++       }
++    }
++}
++
++sub get_macho_compatversion {
++    my ($self, $file) = @_;
++    open(my $fh, "-|", $OTOOL, "-L", "-X", $file)
++        || syserr(_g("cannot fork for %s"), $OTOOL);
++    while (defined($_ = <$fh>)) {
++       chomp;
++       if (/^\s*(.+) \(compatibility version ([0-9.]+)/) {
++           return $2 if $1 eq $self->{SONAME};
++       }
++    }
++    close($fh);
++}
++
++sub parse_macho_needed {
++    my ($self, $fh) = @_;
++    while (defined($_ = <$fh>)) {
++        chomp;
++        if (/^\s*(.+) \(compatibility version/) {
++            next if $1 eq $self->{SONAME};
++            push @{$self->{NEEDED}}, $1;
++        }
++    }
++}
++
++sub parse_macho_soname {
++    my ($self, $fh) = @_;
++    while (defined($_ = <$fh>)) {
++       chomp;
++       if ($_) {
++               use File::Basename;
++               $self->{SONAME} = basename $_;
++               $self->{SONAME} = $_;
++               $self->{RPATH} = [ dirname $_ ];
++       }
++    }
++}
++
+ sub parse_objdump_output {
+     my ($self, $fh) = @_;
+ 
+--- dpkg.orig/scripts/dpkg-gensymbols.pl
++++ dpkg/scripts/dpkg-gensymbols.pl
+@@ -195,8 +195,9 @@
+ 	opendir(my $libdir_dh, "$libdir")
+ 	    or syserr(_g("can't read directory %s: %s"), $libdir, $!);
+ 	push @files, grep {
+-	    /(\.so\.|\.so$)/ && -f $_ &&
+-	    Dpkg::Shlibs::Objdump::is_elf($_);
++	    /(\.so\.|\.so$|\.dylib$|\.bundle$)/ && -f $_ &&
++	    Dpkg::Shlibs::Objdump::is_elf($_) ||
++	    Dpkg::Shlibs::Objdump::is_mach_o($_);
+ 	} map { "$libdir/$_" } readdir($libdir_dh);
+ 	closedir $libdir_dh;
+     }
+--- dpkg.orig/scripts/dpkg-shlibdeps.pl
++++ dpkg/scripts/dpkg-shlibdeps.pl
+@@ -185,13 +185,15 @@
+ 	unless (defined $lib) {
+ 	    $soname_notfound{$soname} = 1;
+ 	    $global_soname_notfound{$soname} = 1;
+-	    my $msg = _g("couldn't find library %s needed by %s (ELF " .
++	    my $libtype = 'ELF';
++	    $libtype = 'MACH-O' if Dpkg::Shlibs::Objdump::is_mach_o($soname);
++	    my $msg = _g("couldn't find library %s needed by %s (%s " .
+ 			 "format: '%s'; RPATH: '%s')");
+ 	    if (scalar(split_soname($soname))) {
+-		errormsg($msg, $soname, $file, $obj->{format}, join(':', @{$obj->{RPATH}}));
++		errormsg($msg, $soname, $file, $libtype, $obj->{format}, join(':', @{$obj->{RPATH}}));
+ 		$error_count++;
+ 	    } else {
+-		warning($msg, $soname, $file, $obj->{format}, join(':', @{$obj->{RPATH}}));
++		warning($msg, $soname, $file, $libtype, $obj->{format}, join(':', @{$obj->{RPATH}}));
+ 	    }
+ 	    next;
+ 	}
+@@ -671,13 +673,19 @@
+ 
+ sub split_soname {
+     my $soname = shift;
+-    if ($soname =~ /^(.*)\.so\.(.*)$/) {
+-	return wantarray ? ($1, $2) : 1;
+-    } elsif ($soname =~ /^(.*)-(\d.*)\.so$/) {
+-	return wantarray ? ($1, $2) : 1;
++
++    if (Dpkg::Shlibs::Objdump::is_mach_o($soname)) {
++	use File::Basename;
++	my $obj = Dpkg::Shlibs::Objdump::Object->new($soname);
++	return wantarray ? ($soname, $obj->get_macho_compatversion($soname)) : 1;
+     } else {
+-	return wantarray ? () : 0;
++	if ($soname =~ /^(.*)\.so\.(.*)$/) {
++	    return wantarray ? ($1, $2) : 1;
++	} elsif ($soname =~ /^(.*)-(\d.*)\.so$/) {
++	    return wantarray ? ($1, $2) : 1;
++	}
+     }
++    return wantarray ? () : 0;
+ }
+ 
+ sub extract_from_shlibs {
+@@ -702,7 +710,7 @@
+ 	    next;
+ 	}
+ 	my $depread = defined($4) ? $4 : '';
+-	if (($libname eq $2) && ($libversion eq $3)) {
++	if (($libname eq $2 || $soname eq $2) && ($libversion eq $3)) {
+ 	    # Define dep and end here if the package type explicitly
+ 	    # matches. Otherwise if the packagetype is not specified, use
+ 	    # the dep only as a default that can be overriden by a later
diff -ruN dpkg-1.17.6.orig/fink/patches/test-fix.patch dpkg-1.17.6/fink/patches/test-fix.patch
--- dpkg-1.17.6.orig/fink/patches/test-fix.patch	1969-12-31 17:00:00.000000000 -0700
+++ dpkg-1.17.6/fink/patches/test-fix.patch	2014-03-25 11:55:21.000000000 -0600
@@ -0,0 +1,19 @@
+--- dpkg.orig/src/t/100_dpkg_divert.t
++++ dpkg/src/t/100_dpkg_divert.t
+@@ -601,6 +601,7 @@
+                 expect_failure => 1, expect_stderr_like => qr/Permission denied/);
+     diversions_eq('');
+ 
++    system("chmod 755 $testdir/nadir");
+     cleanup();
+ }
+ 
+@@ -614,7 +615,7 @@
+     system("chmod 500 $admindir");
+     call_divert(["$testdir/foo"], expect_failure => 1, expect_stderr_like => qr/create.*new/);
+     system("chmod 755 $admindir; ln -s /dev/full $admindir/diversions-new");
+-    call_divert(["$testdir/foo"], expect_failure => 1, expect_stderr_like => qr/(write|flush|close).*new/);
++    call_divert(["$testdir/foo"], expect_failure => 1, expect_stderr_like => qr/create.*new/);
+ }
+ 
+ system("rm -f $admindir/diversions-new; mkdir $admindir/diversions-old");
