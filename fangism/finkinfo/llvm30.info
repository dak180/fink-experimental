Package: llvm30
Version: 3.0
Revision: 0
Description: Modular and reusable compiler
License: BSD
Maintainer: Benjamin Reed <llvm@fink.raccoonfink.com>

# need bash because /bin/sh 2.0 is missing support for pipefail
BuildDepends: cmake (>= 2.8.2-1), gcc46-compiler, fink (>= 0.28), bash, ccache
Depends: gcc46-shlibs
InfoTest: <<
	TestDepends: dejagnu, expect
 	TestScript: <<
	#!/bin/sh -ev
	cd ../build
#	echo "******** Running included LLVM and clang tests ... ********"
	make -k check-all || :
	echo "Expect 2 additional test failures due to i386 on powerpc target"
#	echo "******** Now running more comprehensive tests ... ********"
#	mkdir -p projects/test-suite
#	cd projects/test-suite
#	../../../llvm-%v.src/projects/test-suite/configure --with-built-clang
#	make -k TEST=simple report report.html
	<<
	TestSuiteSize: large
<<

Source: http://llvm.org/releases/%v/llvm-%v.tar.gz
Source-MD5: a8e5f5f1c1adebae7b4a654c376a6005
Source2: http://llvm.org/releases/%v/clang-%v.tar.gz
Source2-MD5: 43350706ae6cf05d0068885792ea0591
# Source3: http://llvm.org/releases/%v/test-suite-%v.tar.gz
# Source3-MD5: 36f72e2a932727fb86338e5939da5eaf

SourceDirectory: llvm-%v.src
BuildDependsOnly: false
UseMaxBuildJobs: true

PatchScript: <<
	#!/bin/sh -ev
	# relocated a few auxiliary directories where they are expected
	mv ../clang-%v.src tools/clang
#	mv ../test-suite-%v.src projects/test-suite
	# some libs failed to explicitly list their dependencies, so we append
	cp utils/unittest/CMakeLists.txt{,.orig}
	{ echo "add_llvm_library_dependencies(gtest LLVMSupport)" ; \
	  echo "add_llvm_library_dependencies(gtest_main gtest)" ; \
	} >> utils/unittest/CMakeLists.txt
	cp tools/clang/lib/Serialization/CMakeLists.txt{,.orig}
	{ echo "add_llvm_library_dependencies(clangSerialization clangAST clangBasic clangSema LLVMSupport)" ; \
	} >> tools/clang/lib/Serialization/CMakeLists.txt
	# ld warning about binding of _abort and _raise symbols vs. libSystem's
	# suggests -bind_at_load
#	cp lib/Support/CMakeLists.txt{,.orig}
#	echo "SET_TARGET_PROPERTIES(LLVMSupport PROPERTIES LINK_FLAGS -Wl,-bind_at_load)" >> lib/Support/CMakeLists.txt
	# circular dependence between clangSerialization and clangFrontend
	# to resolve, lump all of Serialization into Frontend
	pushd tools/clang/lib/Frontend
	ln -s ../Serialization/*.cpp .
	ln -s ../Serialization/*.h .
	ser_files=`ls ../Serialization/*.cpp | xargs basename | tr '\n' ' '`
	echo "linking: $ser_files"
	sed -i.orig -e '/clangSerialization/d' \
		-e "s|Warnings\.cpp|& $ser_files|" CMakeLists.txt
	popd
# keep these for some generated includes
#	for d in tools/clang/{lib,include/clang}
#	do sed -i.orig -e '/Serialization/d' $d/CMakeLists.txt
#	done
	# purge refs to clangSerialization (that already have clangFrontend)
	for d in tools/clang/{tools/{driver,libclang},examples/{wpa,clang-interpreter}}
	do sed -i.orig -e '/clangSerialization/d' $d/CMakeLists.txt
	done
	sed -i.orig2 -e 's|compatibility_version|dylib_&|' tools/clang/tools/libclang/CMakeLists.txt
	# JIT needs CodeGen, duh.
	sed -i.orig -e 's|LLVMCore|LLVMCodeGen &|' lib/ExecutionEngine/JIT/CMakeLists.txt
	# clang analyzers
	sed -i.orig -e '/LLVM_USED_LIBS/s|)| clangAnalysis clangStaticAnalyzerCore)|' tools/clang/lib/StaticAnalyzer/Checkers/CMakeLists.txt
	sed -i.orig -e '/LLVM_USED_LIBS/s|)| clangStaticAnalyzerCheckers clangStaticAnalyzerCore)|' tools/clang/lib/StaticAnalyzer/Frontend/CMakeLists.txt
	# test suite requires newer bash than /bin/bash for pipefail
	sed -i.orig -e "/bashPath = None/s|None|'%p/bin/bash'|" utils/lit/lit/LitConfig.py
	# projects/test-suite expects built llvm/clang to have been configured
	# but sadly, we used cmake; don't include $llvmobjdir/Makefile.config
	# TODO: replace cmake build with autoconf'd build
	# sed -i.orig -e 's|HAS_LLVM := 1|HAS_LLVM := 0|' projects/test-suite/Makefile.config.in
<<
CompileScript: <<
	#!/bin/sh -ev
	case "%m" in
	x86_64)
	CMAKE_OPTIONS="-DLLVM_BUILD_32_BITS:BOOL=OFF -DLLVM_TARGETS_TO_BUILD=X86"
	;;
	powerpc)
	CMAKE_OPTIONS="-DLLVM_BUILD_32_BITS:BOOL=ON -DLLVM_TARGETS_TO_BUILD=PowerPC"
	;;
	*)
	CMAKE_OPTIONS="-DLLVM_BUILD_32_BITS:BOOL=ON -DLLVM_TARGETS_TO_BUILD=X86"
	esac

	# gcc-4.0.1 FAILS on darwin9
	darwin_vers=`uname -r | cut -d. -f1`
	case "$darwin_vers" in
	8)
	  mkdir ../opt-bin
	  pushd ../opt-bin
	  { echo "#!/bin/sh" ; echo 'exec ccache gcc-fsf-4.6 "$@"' ; } > ccgcc-4.6
	  { echo "#!/bin/sh" ; echo 'exec ccache g++-fsf-4.6 "$@"' ; } > ccg++-4.6
	  chmod +x ccg*
	  export PATH=`pwd`:$PATH
	  popd
	  export CC=ccgcc-4.6
	  export CXX=ccg++-4.6
	  CMAKE_OPTIONS="$CMAKE_OPTIONS -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_C_FLAGS=-fno-common -DCMAKE_CXX_FLAGS=-fno-common"
	  ;;
	9)
	  export CC=gcc-4.2
	  export CXX=g++-4.2
	  ;;
	*) : ;;
	esac

	mkdir ../build
	pushd ../build
	cmake $CMAKE_OPTIONS -DCMAKE_INSTALL_PREFIX=%p/opt/llvm-%v -DLLVM_ENABLE_ASSERTIONS=OFF -DCMAKE_BUILD_TYPE=Release ../llvm-%v.src
	make -k || :
	# hack away some Makefiles: clangSerialization folded into clangFrontend
	pushd ../llvm-%v.src
	for d in tools/clang/{lib,include/clang}
		do sed -i.orig -e '/Serialization/d' $d/CMakeLists.txt
	done
	popd
	# bypass a cyclic dependency check
	if test ! -f tools/llvm-config/FinalLibDeps.txt
	then
	echo "ALERT: ignoring cyclic dependency checker..."
		pushd tools/llvm-config
		ln -s FinalLibDeps.txt{.tmp,}
		popd
	fi
	make || make VERBOSE=1
	popd
<<

InstallScript: <<
#!/bin/sh -ev
	pushd ../build
		make -j1 install/fast DESTDIR="%d"
	popd

	pushd %i/opt/llvm-%v/lib
	for f in *.dylib
	do
		if test ! -L $f
		then
		install_name_tool -id "%p/opt/llvm-%v/lib/$f" "$f"
		deplibs=`otool -L $f | sed 1,2d | awk '{print $1;}' | tr '\n' ' '`
		for d in $deplibs
		do
		# prefix absolute paths to llvm/clang's lib installation
		case $d in
		/*) ;;
		*) install_name_tool -change "$d" "%p/opt/llvm-%v/lib/$d" $f ;;
		esac
		done
		fi
	done
	popd
	pushd %i/opt/llvm-%v/bin
	for f in *
	do
		if test ! -L $f
		then
		deplibs=`otool -L $f | sed 1d | awk '{print $1;}' | tr '\n' ' '`
		for d in $deplibs
		do
		# consider substituting with relative @executable_path/../lib ?
		case $d in
		/*) ;;
		@*) ;;
		*) install_name_tool -change "$d" "%p/opt/llvm-%v/lib/$d" $f ;;
		esac
		done
		fi
	done
	popd

	if false
	then
	install_name_tool -id "%p/opt/llvm-%v/lib/liblibclang.%v.dylib" "%i/opt/llvm-%v/lib/liblibclang.%v.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/BugpointPasses.dylib" "%i/opt/llvm-%v/lib/BugpointPasses.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/LLVMHello.dylib" "%i/opt/llvm-%v/lib/LLVMHello.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/libLTO.dylib" "%i/opt/llvm-%v/lib/libLTO.dylib"
	install_name_tool -id "%p/opt/llvm-%v/lib/profile_rt.dylib" "%i/opt/llvm-%v/lib/profile_rt.dylib"
	fi
<<
DocFiles: *.TXT README.txt
Shlibs: <<
	 	%p/opt/llvm-%v/lib/liblibclang.3.0.dylib 1.0.0 %n (>= 3.0-1)
		!%p/opt/llvm-%v/lib/liblibclang.dylib
		!%p/opt/llvm-%v/lib/libLTO.dylib
		%p/opt/llvm-%v/lib/profile_rt.dylib 0.0.0  %n (>= 3.0-1)
		%p/opt/llvm-%v/lib/BugpointPasses.dylib 0.0.0 %n (>= 3.0-1)
		%p/opt/llvm-%v/lib/LLVMHello.dylib 0.0.0 %n (>= 3.0-1)
		!%p/opt/llvm-%v/lib/libEnhancedDisassembly.dylib
		!%p/opt/llvm-%v/lib/libLLVMAnalysis.dylib
		!%p/opt/llvm-%v/lib/libLLVMArchive.dylib
		!%p/opt/llvm-%v/lib/libLLVMAsmParser.dylib
		!%p/opt/llvm-%v/lib/libLLVMAsmPrinter.dylib
		!%p/opt/llvm-%v/lib/libLLVMBitReader.dylib
		!%p/opt/llvm-%v/lib/libLLVMBitWriter.dylib
		!%p/opt/llvm-%v/lib/libLLVMCodeGen.dylib
		!%p/opt/llvm-%v/lib/libLLVMCore.dylib
		!%p/opt/llvm-%v/lib/libLLVMDebugInfo.dylib
		!%p/opt/llvm-%v/lib/libLLVMExecutionEngine.dylib
		!%p/opt/llvm-%v/lib/libLLVMInstCombine.dylib
		!%p/opt/llvm-%v/lib/libLLVMInstrumentation.dylib
		!%p/opt/llvm-%v/lib/libLLVMInterpreter.dylib
		!%p/opt/llvm-%v/lib/libLLVMJIT.dylib
		!%p/opt/llvm-%v/lib/libLLVMLinker.dylib
		!%p/opt/llvm-%v/lib/libLLVMMC.dylib
		!%p/opt/llvm-%v/lib/libLLVMMCDisassembler.dylib
		!%p/opt/llvm-%v/lib/libLLVMMCJIT.dylib
		!%p/opt/llvm-%v/lib/libLLVMMCParser.dylib
		!%p/opt/llvm-%v/lib/libLLVMObject.dylib
		!%p/opt/llvm-%v/lib/libLLVMPowerPCAsmPrinter.dylib
		!%p/opt/llvm-%v/lib/libLLVMPowerPCCodeGen.dylib
		!%p/opt/llvm-%v/lib/libLLVMPowerPCDesc.dylib
		!%p/opt/llvm-%v/lib/libLLVMPowerPCInfo.dylib
		!%p/opt/llvm-%v/lib/libLLVMRuntimeDyld.dylib
		!%p/opt/llvm-%v/lib/libLLVMScalarOpts.dylib
		!%p/opt/llvm-%v/lib/libLLVMSelectionDAG.dylib
		!%p/opt/llvm-%v/lib/libLLVMSupport.dylib
		!%p/opt/llvm-%v/lib/libLLVMTableGen.dylib
		!%p/opt/llvm-%v/lib/libLLVMTarget.dylib
		!%p/opt/llvm-%v/lib/libLLVMTransformUtils.dylib
		!%p/opt/llvm-%v/lib/libLLVMipa.dylib
		!%p/opt/llvm-%v/lib/libLLVMipo.dylib
		!%p/opt/llvm-%v/lib/libclangAnalysis.dylib
		!%p/opt/llvm-%v/lib/libclangARCMigrate.dylib
		!%p/opt/llvm-%v/lib/libclangAST.dylib
		!%p/opt/llvm-%v/lib/libclangBasic.dylib
		!%p/opt/llvm-%v/lib/libclangCodeGen.dylib
		!%p/opt/llvm-%v/lib/libclangDriver.dylib
		!%p/opt/llvm-%v/lib/libclangFrontend.dylib
		!%p/opt/llvm-%v/lib/libclangFrontendTool.dylib
		!%p/opt/llvm-%v/lib/libclangIndex.dylib
		!%p/opt/llvm-%v/lib/libclangLex.dylib
		!%p/opt/llvm-%v/lib/libclangParse.dylib
		!%p/opt/llvm-%v/lib/libclangRewrite.dylib
		!%p/opt/llvm-%v/lib/libclangSema.dylib
		!%p/opt/llvm-%v/lib/libclangStaticAnalyzerCheckers.dylib
		!%p/opt/llvm-%v/lib/libclangStaticAnalyzerCore.dylib
		!%p/opt/llvm-%v/lib/libclangStaticAnalyzerFrontend.dylib
		!%p/opt/llvm-%v/lib/libgtest.dylib
		!%p/opt/llvm-%v/lib/libgtest_main.dylib
		!%p/opt/llvm-%v/lib/libprofile_rt.dylib
<<
Homepage: http://llvm.org/
DescDetail: <<
The LLVM Project is a collection of modular and reusable compiler and
toolchain technologies.  Despite its name, LLVM has little to do with
traditional virtual machines, though it does provide helpful libraries
that can be used to build them.
<<
DescPort: <<
fangism contributed this port for PowerPC-Darwin8.
Original package maintained by 
	Benjamin Reed <llvm@fink.raccoonfink.com>
with contributions from
	Jack Howarth <howarth@bromo.med.uc.edu>
<<
